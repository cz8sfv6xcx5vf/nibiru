// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package derivativesv1

import (
	context "context"
	ormlist "github.com/cosmos/cosmos-sdk/orm/model/ormlist"
	ormtable "github.com/cosmos/cosmos-sdk/orm/model/ormtable"
	ormerrors "github.com/cosmos/cosmos-sdk/orm/types/ormerrors"
)

// singleton store
type ParamsTable interface {
	Get(ctx context.Context) (*Params, error)
	Save(ctx context.Context, params *Params) error
}

type paramsTable struct {
	table ormtable.Table
}

var _ ParamsTable = paramsTable{}

func (x paramsTable) Get(ctx context.Context) (*Params, error) {
	params := &Params{}
	_, err := x.table.Get(ctx, params)
	return params, err
}

func (x paramsTable) Save(ctx context.Context, params *Params) error {
	return x.table.Save(ctx, params)
}

func NewParamsTable(db ormtable.Schema) (ParamsTable, error) {
	table := db.GetTable(&Params{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Params{}).ProtoReflect().Descriptor().FullName()))
	}
	return &paramsTable{table}, nil
}

type PositionTable interface {
	Insert(ctx context.Context, position *Position) error
	Update(ctx context.Context, position *Position) error
	Save(ctx context.Context, position *Position) error
	Delete(ctx context.Context, position *Position) error
	Has(ctx context.Context, address string, pair string) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, address string, pair string) (*Position, error)
	List(ctx context.Context, prefixKey PositionIndexKey, opts ...ormlist.Option) (PositionIterator, error)
	ListRange(ctx context.Context, from, to PositionIndexKey, opts ...ormlist.Option) (PositionIterator, error)
	DeleteBy(ctx context.Context, prefixKey PositionIndexKey) error
	DeleteRange(ctx context.Context, from, to PositionIndexKey) error

	doNotImplement()
}

type PositionIterator struct {
	ormtable.Iterator
}

func (i PositionIterator) Value() (*Position, error) {
	var position Position
	err := i.UnmarshalMessage(&position)
	return &position, err
}

type PositionIndexKey interface {
	id() uint32
	values() []interface{}
	positionIndexKey()
}

// primary key starting index..
type PositionPrimaryKey = PositionAddressPairIndexKey

type PositionAddressPairIndexKey struct {
	vs []interface{}
}

func (x PositionAddressPairIndexKey) id() uint32            { return 0 }
func (x PositionAddressPairIndexKey) values() []interface{} { return x.vs }
func (x PositionAddressPairIndexKey) positionIndexKey()     {}

func (this PositionAddressPairIndexKey) WithAddress(address string) PositionAddressPairIndexKey {
	this.vs = []interface{}{address}
	return this
}

func (this PositionAddressPairIndexKey) WithAddressPair(address string, pair string) PositionAddressPairIndexKey {
	this.vs = []interface{}{address, pair}
	return this
}

type positionTable struct {
	table ormtable.Table
}

func (this positionTable) Insert(ctx context.Context, position *Position) error {
	return this.table.Insert(ctx, position)
}

func (this positionTable) Update(ctx context.Context, position *Position) error {
	return this.table.Update(ctx, position)
}

func (this positionTable) Save(ctx context.Context, position *Position) error {
	return this.table.Save(ctx, position)
}

func (this positionTable) Delete(ctx context.Context, position *Position) error {
	return this.table.Delete(ctx, position)
}

func (this positionTable) Has(ctx context.Context, address string, pair string) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, address, pair)
}

func (this positionTable) Get(ctx context.Context, address string, pair string) (*Position, error) {
	var position Position
	found, err := this.table.PrimaryKey().Get(ctx, &position, address, pair)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &position, nil
}

func (this positionTable) List(ctx context.Context, prefixKey PositionIndexKey, opts ...ormlist.Option) (PositionIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return PositionIterator{it}, err
}

func (this positionTable) ListRange(ctx context.Context, from, to PositionIndexKey, opts ...ormlist.Option) (PositionIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return PositionIterator{it}, err
}

func (this positionTable) DeleteBy(ctx context.Context, prefixKey PositionIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this positionTable) DeleteRange(ctx context.Context, from, to PositionIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this positionTable) doNotImplement() {}

var _ PositionTable = positionTable{}

func NewPositionTable(db ormtable.Schema) (PositionTable, error) {
	table := db.GetTable(&Position{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Position{}).ProtoReflect().Descriptor().FullName()))
	}
	return positionTable{table}, nil
}

type PairMetadataTable interface {
	Insert(ctx context.Context, pairMetadata *PairMetadata) error
	Update(ctx context.Context, pairMetadata *PairMetadata) error
	Save(ctx context.Context, pairMetadata *PairMetadata) error
	Delete(ctx context.Context, pairMetadata *PairMetadata) error
	Has(ctx context.Context, pair string) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, pair string) (*PairMetadata, error)
	List(ctx context.Context, prefixKey PairMetadataIndexKey, opts ...ormlist.Option) (PairMetadataIterator, error)
	ListRange(ctx context.Context, from, to PairMetadataIndexKey, opts ...ormlist.Option) (PairMetadataIterator, error)
	DeleteBy(ctx context.Context, prefixKey PairMetadataIndexKey) error
	DeleteRange(ctx context.Context, from, to PairMetadataIndexKey) error

	doNotImplement()
}

type PairMetadataIterator struct {
	ormtable.Iterator
}

func (i PairMetadataIterator) Value() (*PairMetadata, error) {
	var pairMetadata PairMetadata
	err := i.UnmarshalMessage(&pairMetadata)
	return &pairMetadata, err
}

type PairMetadataIndexKey interface {
	id() uint32
	values() []interface{}
	pairMetadataIndexKey()
}

// primary key starting index..
type PairMetadataPrimaryKey = PairMetadataPairIndexKey

type PairMetadataPairIndexKey struct {
	vs []interface{}
}

func (x PairMetadataPairIndexKey) id() uint32            { return 0 }
func (x PairMetadataPairIndexKey) values() []interface{} { return x.vs }
func (x PairMetadataPairIndexKey) pairMetadataIndexKey() {}

func (this PairMetadataPairIndexKey) WithPair(pair string) PairMetadataPairIndexKey {
	this.vs = []interface{}{pair}
	return this
}

type pairMetadataTable struct {
	table ormtable.Table
}

func (this pairMetadataTable) Insert(ctx context.Context, pairMetadata *PairMetadata) error {
	return this.table.Insert(ctx, pairMetadata)
}

func (this pairMetadataTable) Update(ctx context.Context, pairMetadata *PairMetadata) error {
	return this.table.Update(ctx, pairMetadata)
}

func (this pairMetadataTable) Save(ctx context.Context, pairMetadata *PairMetadata) error {
	return this.table.Save(ctx, pairMetadata)
}

func (this pairMetadataTable) Delete(ctx context.Context, pairMetadata *PairMetadata) error {
	return this.table.Delete(ctx, pairMetadata)
}

func (this pairMetadataTable) Has(ctx context.Context, pair string) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, pair)
}

func (this pairMetadataTable) Get(ctx context.Context, pair string) (*PairMetadata, error) {
	var pairMetadata PairMetadata
	found, err := this.table.PrimaryKey().Get(ctx, &pairMetadata, pair)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &pairMetadata, nil
}

func (this pairMetadataTable) List(ctx context.Context, prefixKey PairMetadataIndexKey, opts ...ormlist.Option) (PairMetadataIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return PairMetadataIterator{it}, err
}

func (this pairMetadataTable) ListRange(ctx context.Context, from, to PairMetadataIndexKey, opts ...ormlist.Option) (PairMetadataIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return PairMetadataIterator{it}, err
}

func (this pairMetadataTable) DeleteBy(ctx context.Context, prefixKey PairMetadataIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this pairMetadataTable) DeleteRange(ctx context.Context, from, to PairMetadataIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this pairMetadataTable) doNotImplement() {}

var _ PairMetadataTable = pairMetadataTable{}

func NewPairMetadataTable(db ormtable.Schema) (PairMetadataTable, error) {
	table := db.GetTable(&PairMetadata{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&PairMetadata{}).ProtoReflect().Descriptor().FullName()))
	}
	return pairMetadataTable{table}, nil
}

type StateStore interface {
	ParamsTable() ParamsTable
	PositionTable() PositionTable
	PairMetadataTable() PairMetadataTable

	doNotImplement()
}

type stateStore struct {
	params       ParamsTable
	position     PositionTable
	pairMetadata PairMetadataTable
}

func (x stateStore) ParamsTable() ParamsTable {
	return x.params
}

func (x stateStore) PositionTable() PositionTable {
	return x.position
}

func (x stateStore) PairMetadataTable() PairMetadataTable {
	return x.pairMetadata
}

func (stateStore) doNotImplement() {}

var _ StateStore = stateStore{}

func NewStateStore(db ormtable.Schema) (StateStore, error) {
	paramsTable, err := NewParamsTable(db)
	if err != nil {
		return nil, err
	}

	positionTable, err := NewPositionTable(db)
	if err != nil {
		return nil, err
	}

	pairMetadataTable, err := NewPairMetadataTable(db)
	if err != nil {
		return nil, err
	}

	return stateStore{
		paramsTable,
		positionTable,
		pairMetadataTable,
	}, nil
}
