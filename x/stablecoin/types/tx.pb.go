// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stablecoin/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//MsgMintStable: Msg to mint NUSD. A user deposits NIBI and collateral and gets
//NUSD in return. The amount of NUSD received depends on the current price set
//by the pricefeed library and the current collateral ratio for the protocol.
type MsgMintStable struct {
	Creator string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Stable  types.Coin `protobuf:"bytes,2,opt,name=stable,proto3" json:"stable"`
}

func (m *MsgMintStable) Reset()         { *m = MsgMintStable{} }
func (m *MsgMintStable) String() string { return proto.CompactTextString(m) }
func (*MsgMintStable) ProtoMessage()    {}
func (*MsgMintStable) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ef74a087750083d, []int{0}
}
func (m *MsgMintStable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintStable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintStable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintStable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintStable.Merge(m, src)
}
func (m *MsgMintStable) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintStable) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintStable.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintStable proto.InternalMessageInfo

func (m *MsgMintStable) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMintStable) GetStable() types.Coin {
	if m != nil {
		return m.Stable
	}
	return types.Coin{}
}

// MsgMintStableResponse specifies the amount of NUSD token the user will receive after their
// mint transaction
type MsgMintStableResponse struct {
	Stable    types.Coin                               `protobuf:"bytes,1,opt,name=stable,proto3" json:"stable"`
	UsedCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=used_coins,json=usedCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"used_coins"`
	FeesPayed github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=fees_payed,json=feesPayed,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fees_payed"`
}

func (m *MsgMintStableResponse) Reset()         { *m = MsgMintStableResponse{} }
func (m *MsgMintStableResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintStableResponse) ProtoMessage()    {}
func (*MsgMintStableResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ef74a087750083d, []int{1}
}
func (m *MsgMintStableResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintStableResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintStableResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintStableResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintStableResponse.Merge(m, src)
}
func (m *MsgMintStableResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintStableResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintStableResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintStableResponse proto.InternalMessageInfo

func (m *MsgMintStableResponse) GetStable() types.Coin {
	if m != nil {
		return m.Stable
	}
	return types.Coin{}
}

func (m *MsgMintStableResponse) GetUsedCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.UsedCoins
	}
	return nil
}

func (m *MsgMintStableResponse) GetFeesPayed() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.FeesPayed
	}
	return nil
}

//
//MsgBurnStable allows users to burn NUSD in exchange for NIBI and collateral.
//The amount of NIBI and Collateral received depends on the current price set by
//the x/pricefeed library and the current collateral ratio.
type MsgBurnStable struct {
	Creator string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Stable  types.Coin `protobuf:"bytes,2,opt,name=stable,proto3" json:"stable"`
}

func (m *MsgBurnStable) Reset()         { *m = MsgBurnStable{} }
func (m *MsgBurnStable) String() string { return proto.CompactTextString(m) }
func (*MsgBurnStable) ProtoMessage()    {}
func (*MsgBurnStable) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ef74a087750083d, []int{2}
}
func (m *MsgBurnStable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnStable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnStable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnStable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnStable.Merge(m, src)
}
func (m *MsgBurnStable) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnStable) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnStable.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnStable proto.InternalMessageInfo

func (m *MsgBurnStable) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgBurnStable) GetStable() types.Coin {
	if m != nil {
		return m.Stable
	}
	return types.Coin{}
}

// MsgBurnStableResponse specifies the amount of collateral and governance
// token the user will receive after their burn transaction.
type MsgBurnStableResponse struct {
	Collateral types.Coin                               `protobuf:"bytes,1,opt,name=collateral,proto3" json:"collateral"`
	Gov        types.Coin                               `protobuf:"bytes,2,opt,name=gov,proto3" json:"gov"`
	FeesPayed  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=fees_payed,json=feesPayed,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fees_payed"`
}

func (m *MsgBurnStableResponse) Reset()         { *m = MsgBurnStableResponse{} }
func (m *MsgBurnStableResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBurnStableResponse) ProtoMessage()    {}
func (*MsgBurnStableResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ef74a087750083d, []int{3}
}
func (m *MsgBurnStableResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnStableResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnStableResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnStableResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnStableResponse.Merge(m, src)
}
func (m *MsgBurnStableResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnStableResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnStableResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnStableResponse proto.InternalMessageInfo

func (m *MsgBurnStableResponse) GetCollateral() types.Coin {
	if m != nil {
		return m.Collateral
	}
	return types.Coin{}
}

func (m *MsgBurnStableResponse) GetGov() types.Coin {
	if m != nil {
		return m.Gov
	}
	return types.Coin{}
}

func (m *MsgBurnStableResponse) GetFeesPayed() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.FeesPayed
	}
	return nil
}

// MsgRecollateralize
type MsgRecollateralize struct {
	Creator string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Coll    types.Coin `protobuf:"bytes,2,opt,name=coll,proto3" json:"coll"`
}

func (m *MsgRecollateralize) Reset()         { *m = MsgRecollateralize{} }
func (m *MsgRecollateralize) String() string { return proto.CompactTextString(m) }
func (*MsgRecollateralize) ProtoMessage()    {}
func (*MsgRecollateralize) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ef74a087750083d, []int{4}
}
func (m *MsgRecollateralize) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRecollateralize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRecollateralize.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRecollateralize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRecollateralize.Merge(m, src)
}
func (m *MsgRecollateralize) XXX_Size() int {
	return m.Size()
}
func (m *MsgRecollateralize) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRecollateralize.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRecollateralize proto.InternalMessageInfo

func (m *MsgRecollateralize) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRecollateralize) GetColl() types.Coin {
	if m != nil {
		return m.Coll
	}
	return types.Coin{}
}

// MsgRecollateralizeResponse is the output of a successful 'Recollateralize'
type MsgRecollateralizeResponse struct {
	// Gov (sdk.Coin): Tokens rewarded to the caller in exchange for her collateral.
	Gov types.Coin `protobuf:"bytes,1,opt,name=gov,proto3" json:"gov"`
}

func (m *MsgRecollateralizeResponse) Reset()         { *m = MsgRecollateralizeResponse{} }
func (m *MsgRecollateralizeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRecollateralizeResponse) ProtoMessage()    {}
func (*MsgRecollateralizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ef74a087750083d, []int{5}
}
func (m *MsgRecollateralizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRecollateralizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRecollateralizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRecollateralizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRecollateralizeResponse.Merge(m, src)
}
func (m *MsgRecollateralizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRecollateralizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRecollateralizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRecollateralizeResponse proto.InternalMessageInfo

func (m *MsgRecollateralizeResponse) GetGov() types.Coin {
	if m != nil {
		return m.Gov
	}
	return types.Coin{}
}

// MsgBuyback
type MsgBuyback struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// Gov (sdk.Coin): Tokens the caller wants to sell to the protocol in exchange
	// for collateral.
	Gov types.Coin `protobuf:"bytes,2,opt,name=gov,proto3" json:"gov"`
}

func (m *MsgBuyback) Reset()         { *m = MsgBuyback{} }
func (m *MsgBuyback) String() string { return proto.CompactTextString(m) }
func (*MsgBuyback) ProtoMessage()    {}
func (*MsgBuyback) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ef74a087750083d, []int{6}
}
func (m *MsgBuyback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyback.Merge(m, src)
}
func (m *MsgBuyback) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyback) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyback.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyback proto.InternalMessageInfo

func (m *MsgBuyback) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgBuyback) GetGov() types.Coin {
	if m != nil {
		return m.Gov
	}
	return types.Coin{}
}

// MsgBuybackResponse is the output of a successful 'Buyback'
type MsgBuybackResponse struct {
	// Coll (sdk.Coin): Tokens sold to the caller in exchange for her collateral.
	Coll types.Coin `protobuf:"bytes,1,opt,name=coll,proto3" json:"coll"`
}

func (m *MsgBuybackResponse) Reset()         { *m = MsgBuybackResponse{} }
func (m *MsgBuybackResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBuybackResponse) ProtoMessage()    {}
func (*MsgBuybackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ef74a087750083d, []int{7}
}
func (m *MsgBuybackResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuybackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuybackResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuybackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuybackResponse.Merge(m, src)
}
func (m *MsgBuybackResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuybackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuybackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuybackResponse proto.InternalMessageInfo

func (m *MsgBuybackResponse) GetColl() types.Coin {
	if m != nil {
		return m.Coll
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*MsgMintStable)(nil), "NibiruChain.stablecoin.v1.MsgMintStable")
	proto.RegisterType((*MsgMintStableResponse)(nil), "NibiruChain.stablecoin.v1.MsgMintStableResponse")
	proto.RegisterType((*MsgBurnStable)(nil), "NibiruChain.stablecoin.v1.MsgBurnStable")
	proto.RegisterType((*MsgBurnStableResponse)(nil), "NibiruChain.stablecoin.v1.MsgBurnStableResponse")
	proto.RegisterType((*MsgRecollateralize)(nil), "NibiruChain.stablecoin.v1.MsgRecollateralize")
	proto.RegisterType((*MsgRecollateralizeResponse)(nil), "NibiruChain.stablecoin.v1.MsgRecollateralizeResponse")
	proto.RegisterType((*MsgBuyback)(nil), "NibiruChain.stablecoin.v1.MsgBuyback")
	proto.RegisterType((*MsgBuybackResponse)(nil), "NibiruChain.stablecoin.v1.MsgBuybackResponse")
}

func init() { proto.RegisterFile("stablecoin/tx.proto", fileDescriptor_6ef74a087750083d) }

var fileDescriptor_6ef74a087750083d = []byte{
	// 515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xcd, 0xc6, 0x55, 0xab, 0x0e, 0x42, 0x48, 0x06, 0x24, 0xd7, 0x07, 0x37, 0xb2, 0x84, 0x94,
	0x4b, 0x76, 0x93, 0x56, 0x88, 0x23, 0x52, 0x7a, 0x02, 0x29, 0x80, 0xcc, 0x09, 0x2e, 0xd1, 0xda,
	0x59, 0x9c, 0xa5, 0xa9, 0x37, 0xf2, 0x6e, 0x42, 0xc3, 0x57, 0xf0, 0x19, 0x88, 0x2b, 0x3f, 0xd1,
	0x63, 0x8f, 0x9c, 0x00, 0x25, 0x1f, 0xc1, 0x15, 0xed, 0xc6, 0x71, 0xdc, 0x02, 0x89, 0x7d, 0x08,
	0xa7, 0x4c, 0xec, 0x37, 0xef, 0xcd, 0xbc, 0xf1, 0xec, 0xc2, 0x7d, 0xa9, 0x68, 0x38, 0x62, 0x91,
	0xe0, 0x09, 0x51, 0x97, 0x78, 0x9c, 0x0a, 0x25, 0xec, 0xa3, 0x17, 0x3c, 0xe4, 0xe9, 0xe4, 0x6c,
	0x48, 0x79, 0x82, 0xd7, 0x00, 0x3c, 0xed, 0xb8, 0x5e, 0x24, 0xe4, 0x85, 0x90, 0x24, 0xa4, 0x92,
	0x91, 0x69, 0x27, 0x64, 0x8a, 0x76, 0x88, 0x79, 0x69, 0x52, 0xdd, 0x07, 0xb1, 0x88, 0x85, 0x09,
	0x89, 0x8e, 0x96, 0x4f, 0xfd, 0x10, 0xee, 0xf6, 0x64, 0xdc, 0xe3, 0x89, 0x7a, 0x6d, 0xd8, 0x6c,
	0x07, 0x0e, 0xa2, 0x94, 0x51, 0x25, 0x52, 0x07, 0x35, 0x50, 0xf3, 0x30, 0x58, 0xfd, 0xb5, 0x9f,
	0xc0, 0xfe, 0x52, 0xd1, 0xa9, 0x37, 0x50, 0xf3, 0xce, 0xc9, 0x11, 0x5e, 0x2a, 0x62, 0xad, 0x88,
	0x33, 0x45, 0x7c, 0x26, 0x78, 0xd2, 0xdd, 0xbb, 0xfa, 0x7e, 0x5c, 0x0b, 0x32, 0xb8, 0xff, 0xb9,
	0x0e, 0x0f, 0x6f, 0x88, 0x04, 0x4c, 0x8e, 0x45, 0x22, 0x59, 0x81, 0x12, 0x55, 0xa2, 0xb4, 0xdf,
	0x03, 0x4c, 0x24, 0x1b, 0xf4, 0x75, 0x7f, 0xd2, 0xa9, 0x37, 0xac, 0xcd, 0xc9, 0x6d, 0x9d, 0xfc,
	0xe5, 0xc7, 0x71, 0x33, 0xe6, 0x6a, 0x38, 0x09, 0x71, 0x24, 0x2e, 0x48, 0x66, 0xd7, 0xf2, 0xa7,
	0x25, 0x07, 0xe7, 0x44, 0xcd, 0xc6, 0x4c, 0x9a, 0x04, 0x19, 0x1c, 0x6a, 0x7a, 0x13, 0x6a, 0xad,
	0x77, 0x8c, 0xc9, 0xfe, 0x98, 0xce, 0xd8, 0xc0, 0xb1, 0x76, 0xa0, 0xa5, 0xe9, 0x5f, 0x69, 0xf6,
	0x6c, 0x1c, 0xdd, 0x49, 0x9a, 0xec, 0x6e, 0x1c, 0xbf, 0x90, 0x19, 0xc7, 0x5a, 0x24, 0x1f, 0xc7,
	0x53, 0x80, 0x48, 0x8c, 0x46, 0x54, 0xb1, 0x94, 0x8e, 0xca, 0x8e, 0xa4, 0x90, 0x62, 0x77, 0xc0,
	0x8a, 0xc5, 0xb4, 0x6c, 0x41, 0x1a, 0xfb, 0x5f, 0xdd, 0x8d, 0xc0, 0xee, 0xc9, 0x38, 0x60, 0xeb,
	0x8a, 0xf9, 0xc7, 0x4d, 0x16, 0x9f, 0xc2, 0x9e, 0x86, 0x96, 0xed, 0xc7, 0x80, 0xfd, 0x97, 0xe0,
	0xfe, 0x29, 0x92, 0x5b, 0x9c, 0x39, 0x84, 0xca, 0x3b, 0xe4, 0xbf, 0x01, 0x30, 0xe3, 0x9a, 0x85,
	0x34, 0x3a, 0xdf, 0x50, 0x6d, 0x75, 0xf3, 0xfd, 0x67, 0xc6, 0x90, 0x8c, 0x3a, 0xaf, 0x71, 0xd5,
	0x36, 0xaa, 0xd0, 0xf6, 0xc9, 0x57, 0x0b, 0xac, 0x9e, 0x8c, 0xed, 0x21, 0x40, 0xe1, 0x34, 0x69,
	0xe2, 0x7f, 0x1e, 0x58, 0xf8, 0xc6, 0x91, 0xe0, 0xb6, 0xcb, 0x22, 0xf3, 0x32, 0x87, 0x00, 0x85,
	0x45, 0xd9, 0xa2, 0xb4, 0x46, 0x6e, 0x53, 0xfa, 0xcb, 0x5e, 0x7c, 0x80, 0x7b, 0xb7, 0x3f, 0x9a,
	0xd6, 0x66, 0x92, 0x5b, 0x70, 0xf7, 0x71, 0x25, 0x78, 0x2e, 0xdc, 0x87, 0x83, 0xd5, 0xdc, 0x1f,
	0x6d, 0xab, 0xda, 0xc0, 0xdc, 0x56, 0x29, 0xd8, 0x4a, 0xa0, 0xfb, 0xfc, 0x6a, 0xee, 0xa1, 0xeb,
	0xb9, 0x87, 0x7e, 0xce, 0x3d, 0xf4, 0x69, 0xe1, 0xd5, 0xae, 0x17, 0x5e, 0xed, 0xdb, 0xc2, 0xab,
	0xbd, 0x6d, 0x17, 0x16, 0xac, 0x40, 0x49, 0x12, 0x13, 0x93, 0x4b, 0x52, 0xbc, 0x9e, 0xf4, 0xba,
	0x85, 0xfb, 0xe6, 0x46, 0x39, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x9b, 0xf3, 0xca, 0x17, 0xb9,
	0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// MintStable defines a method for trading a mixture of GOV and COLL to mint an
	// equivalent value of stablecoins.
	MintStable(ctx context.Context, in *MsgMintStable, opts ...grpc.CallOption) (*MsgMintStableResponse, error)
	// BurnStable defines a method for redeeming/burning stablecoins to receive an
	// equivalent value as a mixture of governance and collateral tokens.
	BurnStable(ctx context.Context, in *MsgBurnStable, opts ...grpc.CallOption) (*MsgBurnStableResponse, error)
	// Recollateralize defines a method for manually adding collateral to the
	// protocol in exchange for an equivalent stablecoin value in governance tokens
	// plus a small bonus.
	Recollateralize(ctx context.Context, in *MsgRecollateralize, opts ...grpc.CallOption) (*MsgRecollateralizeResponse, error)
	// Buyback defines a method for manually adding NIBI to the protocol
	// in exchange for an equivalent stablecoin value in collateral, effectively
	// executing a share buyback for Nibiru Chain. The NIBI purchased by the protocol
	// is then burned, distributing value to all NIBI hodlers.
	Buyback(ctx context.Context, in *MsgBuyback, opts ...grpc.CallOption) (*MsgBuybackResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) MintStable(ctx context.Context, in *MsgMintStable, opts ...grpc.CallOption) (*MsgMintStableResponse, error) {
	out := new(MsgMintStableResponse)
	err := c.cc.Invoke(ctx, "/NibiruChain.stablecoin.v1.Msg/MintStable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BurnStable(ctx context.Context, in *MsgBurnStable, opts ...grpc.CallOption) (*MsgBurnStableResponse, error) {
	out := new(MsgBurnStableResponse)
	err := c.cc.Invoke(ctx, "/NibiruChain.stablecoin.v1.Msg/BurnStable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Recollateralize(ctx context.Context, in *MsgRecollateralize, opts ...grpc.CallOption) (*MsgRecollateralizeResponse, error) {
	out := new(MsgRecollateralizeResponse)
	err := c.cc.Invoke(ctx, "/NibiruChain.stablecoin.v1.Msg/Recollateralize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Buyback(ctx context.Context, in *MsgBuyback, opts ...grpc.CallOption) (*MsgBuybackResponse, error) {
	out := new(MsgBuybackResponse)
	err := c.cc.Invoke(ctx, "/NibiruChain.stablecoin.v1.Msg/Buyback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// MintStable defines a method for trading a mixture of GOV and COLL to mint an
	// equivalent value of stablecoins.
	MintStable(context.Context, *MsgMintStable) (*MsgMintStableResponse, error)
	// BurnStable defines a method for redeeming/burning stablecoins to receive an
	// equivalent value as a mixture of governance and collateral tokens.
	BurnStable(context.Context, *MsgBurnStable) (*MsgBurnStableResponse, error)
	// Recollateralize defines a method for manually adding collateral to the
	// protocol in exchange for an equivalent stablecoin value in governance tokens
	// plus a small bonus.
	Recollateralize(context.Context, *MsgRecollateralize) (*MsgRecollateralizeResponse, error)
	// Buyback defines a method for manually adding NIBI to the protocol
	// in exchange for an equivalent stablecoin value in collateral, effectively
	// executing a share buyback for Nibiru Chain. The NIBI purchased by the protocol
	// is then burned, distributing value to all NIBI hodlers.
	Buyback(context.Context, *MsgBuyback) (*MsgBuybackResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) MintStable(ctx context.Context, req *MsgMintStable) (*MsgMintStableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintStable not implemented")
}
func (*UnimplementedMsgServer) BurnStable(ctx context.Context, req *MsgBurnStable) (*MsgBurnStableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnStable not implemented")
}
func (*UnimplementedMsgServer) Recollateralize(ctx context.Context, req *MsgRecollateralize) (*MsgRecollateralizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recollateralize not implemented")
}
func (*UnimplementedMsgServer) Buyback(ctx context.Context, req *MsgBuyback) (*MsgBuybackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Buyback not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_MintStable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintStable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintStable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NibiruChain.stablecoin.v1.Msg/MintStable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintStable(ctx, req.(*MsgMintStable))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BurnStable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurnStable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BurnStable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NibiruChain.stablecoin.v1.Msg/BurnStable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BurnStable(ctx, req.(*MsgBurnStable))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Recollateralize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRecollateralize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Recollateralize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NibiruChain.stablecoin.v1.Msg/Recollateralize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Recollateralize(ctx, req.(*MsgRecollateralize))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Buyback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBuyback)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Buyback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NibiruChain.stablecoin.v1.Msg/Buyback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Buyback(ctx, req.(*MsgBuyback))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NibiruChain.stablecoin.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MintStable",
			Handler:    _Msg_MintStable_Handler,
		},
		{
			MethodName: "BurnStable",
			Handler:    _Msg_BurnStable_Handler,
		},
		{
			MethodName: "Recollateralize",
			Handler:    _Msg_Recollateralize_Handler,
		},
		{
			MethodName: "Buyback",
			Handler:    _Msg_Buyback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stablecoin/tx.proto",
}

func (m *MsgMintStable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintStable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintStable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Stable.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintStableResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintStableResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintStableResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeesPayed) > 0 {
		for iNdEx := len(m.FeesPayed) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeesPayed[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.UsedCoins) > 0 {
		for iNdEx := len(m.UsedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UsedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Stable.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgBurnStable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnStable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnStable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Stable.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBurnStableResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnStableResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnStableResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeesPayed) > 0 {
		for iNdEx := len(m.FeesPayed) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeesPayed[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Gov.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Collateral.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgRecollateralize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRecollateralize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRecollateralize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coll.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRecollateralizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRecollateralizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRecollateralizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Gov.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgBuyback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyback) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyback) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Gov.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBuybackResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuybackResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuybackResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coll.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgMintStable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Stable.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgMintStableResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Stable.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.UsedCoins) > 0 {
		for _, e := range m.UsedCoins {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.FeesPayed) > 0 {
		for _, e := range m.FeesPayed {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgBurnStable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Stable.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgBurnStableResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Collateral.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Gov.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.FeesPayed) > 0 {
		for _, e := range m.FeesPayed {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRecollateralize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Coll.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgRecollateralizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Gov.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgBuyback) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Gov.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgBuybackResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Coll.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgMintStable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintStable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintStable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintStableResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintStableResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintStableResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsedCoins = append(m.UsedCoins, types.Coin{})
			if err := m.UsedCoins[len(m.UsedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeesPayed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeesPayed = append(m.FeesPayed, types.Coin{})
			if err := m.FeesPayed[len(m.FeesPayed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnStable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnStable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnStable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnStableResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnStableResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnStableResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gov", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Gov.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeesPayed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeesPayed = append(m.FeesPayed, types.Coin{})
			if err := m.FeesPayed[len(m.FeesPayed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRecollateralize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRecollateralize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRecollateralize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coll.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRecollateralizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRecollateralizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRecollateralizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gov", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Gov.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gov", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Gov.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuybackResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuybackResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuybackResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coll.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
