// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: perp/v1/state.proto

package types

import (
	fmt "fmt"
	github_com_NibiruChain_nibiru_x_common "github.com/NibiruChain/nibiru/x/common"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Side int32

const (
	Side_SIDE_UNSPECIFIED Side = 0
	Side_BUY              Side = 1
	Side_SELL             Side = 2
)

var Side_name = map[int32]string{
	0: "SIDE_UNSPECIFIED",
	1: "BUY",
	2: "SELL",
}

var Side_value = map[string]int32{
	"SIDE_UNSPECIFIED": 0,
	"BUY":              1,
	"SELL":             2,
}

func (x Side) String() string {
	return proto.EnumName(Side_name, int32(x))
}

func (Side) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0416b6ef16ef80be, []int{0}
}

type PnLCalcOption int32

const (
	PnLCalcOption_PNL_CALC_OPTION_UNSPECIFIED PnLCalcOption = 0
	PnLCalcOption_SPOT_PRICE                  PnLCalcOption = 1
	PnLCalcOption_TWAP                        PnLCalcOption = 2
	PnLCalcOption_ORACLE                      PnLCalcOption = 3
)

var PnLCalcOption_name = map[int32]string{
	0: "PNL_CALC_OPTION_UNSPECIFIED",
	1: "SPOT_PRICE",
	2: "TWAP",
	3: "ORACLE",
}

var PnLCalcOption_value = map[string]int32{
	"PNL_CALC_OPTION_UNSPECIFIED": 0,
	"SPOT_PRICE":                  1,
	"TWAP":                        2,
	"ORACLE":                      3,
}

func (x PnLCalcOption) String() string {
	return proto.EnumName(PnLCalcOption_name, int32(x))
}

func (PnLCalcOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0416b6ef16ef80be, []int{1}
}

type PnLPreferenceOption int32

const (
	PnLPreferenceOption_PNL_PREFERENCE_UNSPECIFIED PnLPreferenceOption = 0
	PnLPreferenceOption_MAX                        PnLPreferenceOption = 1
	PnLPreferenceOption_MIN                        PnLPreferenceOption = 2
)

var PnLPreferenceOption_name = map[int32]string{
	0: "PNL_PREFERENCE_UNSPECIFIED",
	1: "MAX",
	2: "MIN",
}

var PnLPreferenceOption_value = map[string]int32{
	"PNL_PREFERENCE_UNSPECIFIED": 0,
	"MAX":                        1,
	"MIN":                        2,
}

func (x PnLPreferenceOption) String() string {
	return proto.EnumName(PnLPreferenceOption_name, int32(x))
}

func (PnLPreferenceOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0416b6ef16ef80be, []int{2}
}

type MarginCalculationPriceOption int32

const (
	MarginCalculationPriceOption_MARGIN_CALCULATION_PRICE_OPTION_UNSPECIFIED MarginCalculationPriceOption = 0
	MarginCalculationPriceOption_SPOT                                        MarginCalculationPriceOption = 1
	MarginCalculationPriceOption_INDEX                                       MarginCalculationPriceOption = 2
	MarginCalculationPriceOption_MAX_PNL                                     MarginCalculationPriceOption = 3
)

var MarginCalculationPriceOption_name = map[int32]string{
	0: "MARGIN_CALCULATION_PRICE_OPTION_UNSPECIFIED",
	1: "SPOT",
	2: "INDEX",
	3: "MAX_PNL",
}

var MarginCalculationPriceOption_value = map[string]int32{
	"MARGIN_CALCULATION_PRICE_OPTION_UNSPECIFIED": 0,
	"SPOT":    1,
	"INDEX":   2,
	"MAX_PNL": 3,
}

func (x MarginCalculationPriceOption) String() string {
	return proto.EnumName(MarginCalculationPriceOption_name, int32(x))
}

func (MarginCalculationPriceOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0416b6ef16ef80be, []int{3}
}

type Params struct {
	// stopped identifies if the perp exchange is stopped or not
	Stopped bool `protobuf:"varint,1,opt,name=stopped,proto3" json:"stopped,omitempty"`
	// FeePoolFeeRatio is the ratio transferred to the the fee pool
	FeePoolFeeRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=fee_pool_fee_ratio,json=feePoolFeeRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fee_pool_fee_ratio"`
	// EcosystemFundFeeRatio is the ratio transferred to the PerpEF.
	EcosystemFundFeeRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=ecosystem_fund_fee_ratio,json=ecosystemFundFeeRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"ecosystem_fund_fee_ratio"`
	// LiquidationFeeRatio is the percentage of liquidated position that will be
	// given to out as a reward. Half of the liquidation fee is given to the
	// liquidator, and the other half is given to the ecosystem fund.
	LiquidationFeeRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=liquidation_fee_ratio,json=liquidationFeeRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidation_fee_ratio"`
	// PartialLiquidationRatio is the share we try to liquidate if the margin is
	// higher than liquidation fee
	PartialLiquidationRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=partial_liquidation_ratio,json=partialLiquidationRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"partial_liquidation_ratio"`
	// specifies the interval on which the funding rate is updated
	FundingRateInterval string `protobuf:"bytes,7,opt,name=funding_rate_interval,json=fundingRateInterval,proto3" json:"funding_rate_interval,omitempty"`
	// amount of time to look back for TWAP calculations
	TwapLookbackWindow time.Duration `protobuf:"bytes,8,opt,name=twap_lookback_window,json=twapLookbackWindow,proto3,stdduration" json:"twap_lookback_window,omitempty" yaml:"twap_lookback_window"`
	// whitelisted_liquidators defines the list of addresses
	// which are allowed to liquidate a position.
	WhitelistedLiquidators []string `protobuf:"bytes,9,rep,name=whitelisted_liquidators,json=whitelistedLiquidators,proto3" json:"whitelisted_liquidators,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_0416b6ef16ef80be, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetStopped() bool {
	if m != nil {
		return m.Stopped
	}
	return false
}

func (m *Params) GetFundingRateInterval() string {
	if m != nil {
		return m.FundingRateInterval
	}
	return ""
}

func (m *Params) GetTwapLookbackWindow() time.Duration {
	if m != nil {
		return m.TwapLookbackWindow
	}
	return 0
}

func (m *Params) GetWhitelistedLiquidators() []string {
	if m != nil {
		return m.WhitelistedLiquidators
	}
	return nil
}

// Position identifies and records information on a user's position on one of
// the virtual liquidity pools.
type Position struct {
	// address identifies the address owner of this position
	TraderAddress string `protobuf:"bytes,1,opt,name=trader_address,json=traderAddress,proto3" json:"trader_address,omitempty"`
	// pair identifies the pair associated with this position
	Pair github_com_NibiruChain_nibiru_x_common.AssetPair `protobuf:"bytes,2,opt,name=pair,proto3,customtype=github.com/NibiruChain/nibiru/x/common.AssetPair" json:"pair"`
	// Position size.
	Size_ github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=size,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"size"`
	// Amount of margin remaining in the position.
	Margin github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=margin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"margin"`
	// OpenNotional is the quote denom value of the position when opening.
	// Used to calculate PnL.
	OpenNotional github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=open_notional,json=openNotional,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"open_notional"`
	// The most recent cumulative premium fraction this position has.
	// Used to calculate the next funding payment.
	LatestCumulativePremiumFraction github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=latest_cumulative_premium_fraction,json=latestCumulativePremiumFraction,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"latest_cumulative_premium_fraction"`
	// BlockNumber is the last block number when this position was updated.
	BlockNumber int64 `protobuf:"varint,7,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_0416b6ef16ef80be, []int{1}
}
func (m *Position) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Position.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(m, src)
}
func (m *Position) XXX_Size() int {
	return m.Size()
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

func (m *Position) GetTraderAddress() string {
	if m != nil {
		return m.TraderAddress
	}
	return ""
}

func (m *Position) GetBlockNumber() int64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type PairMetadata struct {
	Pair github_com_NibiruChain_nibiru_x_common.AssetPair `protobuf:"bytes,1,opt,name=pair,proto3,customtype=github.com/NibiruChain/nibiru/x/common.AssetPair" json:"pair"`
	// Latest cumulative premium fraction for a given pair.
	// Calculated once per funding rate interval.
	// A premium fraction is the difference between mark and index, divided by the number of payments per day.
	// (mark - index) / # payments in a day
	LatestCumulativePremiumFraction github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=latest_cumulative_premium_fraction,json=latestCumulativePremiumFraction,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"latest_cumulative_premium_fraction"`
}

func (m *PairMetadata) Reset()         { *m = PairMetadata{} }
func (m *PairMetadata) String() string { return proto.CompactTextString(m) }
func (*PairMetadata) ProtoMessage()    {}
func (*PairMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_0416b6ef16ef80be, []int{2}
}
func (m *PairMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PairMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PairMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PairMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairMetadata.Merge(m, src)
}
func (m *PairMetadata) XXX_Size() int {
	return m.Size()
}
func (m *PairMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_PairMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_PairMetadata proto.InternalMessageInfo

type PrepaidBadDebt struct {
	Denom  string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *PrepaidBadDebt) Reset()         { *m = PrepaidBadDebt{} }
func (m *PrepaidBadDebt) String() string { return proto.CompactTextString(m) }
func (*PrepaidBadDebt) ProtoMessage()    {}
func (*PrepaidBadDebt) Descriptor() ([]byte, []int) {
	return fileDescriptor_0416b6ef16ef80be, []int{3}
}
func (m *PrepaidBadDebt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrepaidBadDebt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrepaidBadDebt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrepaidBadDebt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepaidBadDebt.Merge(m, src)
}
func (m *PrepaidBadDebt) XXX_Size() int {
	return m.Size()
}
func (m *PrepaidBadDebt) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepaidBadDebt.DiscardUnknown(m)
}

var xxx_messageInfo_PrepaidBadDebt proto.InternalMessageInfo

func (m *PrepaidBadDebt) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type PositionResp struct {
	Position *Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	// The amount of quote assets exchanged.
	ExchangedNotionalValue github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=exchanged_notional_value,json=exchangedNotionalValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"exchanged_notional_value"`
	// The amount of base assets exchanged.
	ExchangedPositionSize github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=exchanged_position_size,json=exchangedPositionSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"exchanged_position_size"`
	// The amount of bad debt accrued during this position change.
	// Measured in absolute value of quote units.
	// If greater than zero, then the position change event will likely fail.
	BadDebt github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=bad_debt,json=badDebt,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"bad_debt"`
	// The funding payment applied on this position change.
	FundingPayment github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=funding_payment,json=fundingPayment,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"funding_payment"`
	// The amount of PnL realized on this position changed, measured in quote
	// units.
	RealizedPnl github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=realized_pnl,json=realizedPnl,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"realized_pnl"`
	// The unrealized PnL in the position after the position change.
	UnrealizedPnlAfter github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=unrealized_pnl_after,json=unrealizedPnlAfter,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"unrealized_pnl_after"`
	// The amount of margin the trader has to give to the vault.
	// A negative value means the vault pays the trader.
	MarginToVault github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=margin_to_vault,json=marginToVault,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"margin_to_vault"`
	// The position's notional value after the position change, measured in quote
	// units.
	PositionNotional github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=position_notional,json=positionNotional,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"position_notional"`
}

func (m *PositionResp) Reset()         { *m = PositionResp{} }
func (m *PositionResp) String() string { return proto.CompactTextString(m) }
func (*PositionResp) ProtoMessage()    {}
func (*PositionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_0416b6ef16ef80be, []int{4}
}
func (m *PositionResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionResp.Merge(m, src)
}
func (m *PositionResp) XXX_Size() int {
	return m.Size()
}
func (m *PositionResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionResp.DiscardUnknown(m)
}

var xxx_messageInfo_PositionResp proto.InternalMessageInfo

func (m *PositionResp) GetPosition() *Position {
	if m != nil {
		return m.Position
	}
	return nil
}

type LiquidateResp struct {
	// Amount of bad debt created by the liquidation event
	BadDebt github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=bad_debt,json=badDebt,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bad_debt"`
	// Fee paid to the liquidator
	FeeToLiquidator github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=fee_to_liquidator,json=feeToLiquidator,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"fee_to_liquidator"`
	// Fee paid to the Perp EF fund
	FeeToPerpEcosystemFund github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=fee_to_perp_ecosystem_fund,json=feeToPerpEcosystemFund,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"fee_to_perp_ecosystem_fund"`
	// Address of the liquidator
	Liquidator string `protobuf:"bytes,4,opt,name=liquidator,proto3" json:"liquidator,omitempty"`
	// Position response from the close or open reverse position
	PositionResp *PositionResp `protobuf:"bytes,5,opt,name=position_resp,json=positionResp,proto3" json:"position_resp,omitempty"`
}

func (m *LiquidateResp) Reset()         { *m = LiquidateResp{} }
func (m *LiquidateResp) String() string { return proto.CompactTextString(m) }
func (*LiquidateResp) ProtoMessage()    {}
func (*LiquidateResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_0416b6ef16ef80be, []int{5}
}
func (m *LiquidateResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidateResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidateResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidateResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidateResp.Merge(m, src)
}
func (m *LiquidateResp) XXX_Size() int {
	return m.Size()
}
func (m *LiquidateResp) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidateResp.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidateResp proto.InternalMessageInfo

func (m *LiquidateResp) GetLiquidator() string {
	if m != nil {
		return m.Liquidator
	}
	return ""
}

func (m *LiquidateResp) GetPositionResp() *PositionResp {
	if m != nil {
		return m.PositionResp
	}
	return nil
}

// PoolMetrics is a structure that displays a snapshot of perp metrics for each pair.
type Metrics struct {
	// Pair identifier for the two assets. Always in format 'base:quote'
	Pair github_com_NibiruChain_nibiru_x_common.AssetPair `protobuf:"bytes,1,opt,name=pair,proto3,customtype=github.com/NibiruChain/nibiru/x/common.AssetPair" json:"pair"`
	// Sum of all active position sizes for the pair.
	NetSize github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=net_size,json=netSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"net_size"`
	// Total notional volume for the pair.
	VolumeQuote github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=volumeQuote,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"volumeQuote"`
	// Total size volume for the pair.
	VolumeBase github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=volumeBase,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"volumeBase"`
}

func (m *Metrics) Reset()         { *m = Metrics{} }
func (m *Metrics) String() string { return proto.CompactTextString(m) }
func (*Metrics) ProtoMessage()    {}
func (*Metrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_0416b6ef16ef80be, []int{6}
}
func (m *Metrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metrics.Merge(m, src)
}
func (m *Metrics) XXX_Size() int {
	return m.Size()
}
func (m *Metrics) XXX_DiscardUnknown() {
	xxx_messageInfo_Metrics.DiscardUnknown(m)
}

var xxx_messageInfo_Metrics proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("nibiru.perp.v1.Side", Side_name, Side_value)
	proto.RegisterEnum("nibiru.perp.v1.PnLCalcOption", PnLCalcOption_name, PnLCalcOption_value)
	proto.RegisterEnum("nibiru.perp.v1.PnLPreferenceOption", PnLPreferenceOption_name, PnLPreferenceOption_value)
	proto.RegisterEnum("nibiru.perp.v1.MarginCalculationPriceOption", MarginCalculationPriceOption_name, MarginCalculationPriceOption_value)
	proto.RegisterType((*Params)(nil), "nibiru.perp.v1.Params")
	proto.RegisterType((*Position)(nil), "nibiru.perp.v1.Position")
	proto.RegisterType((*PairMetadata)(nil), "nibiru.perp.v1.PairMetadata")
	proto.RegisterType((*PrepaidBadDebt)(nil), "nibiru.perp.v1.PrepaidBadDebt")
	proto.RegisterType((*PositionResp)(nil), "nibiru.perp.v1.PositionResp")
	proto.RegisterType((*LiquidateResp)(nil), "nibiru.perp.v1.LiquidateResp")
	proto.RegisterType((*Metrics)(nil), "nibiru.perp.v1.Metrics")
}

func init() { proto.RegisterFile("perp/v1/state.proto", fileDescriptor_0416b6ef16ef80be) }

var fileDescriptor_0416b6ef16ef80be = []byte{
	// 1306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x97, 0xcd, 0x6e, 0xdb, 0xc6,
	0x16, 0xc7, 0x4d, 0x7f, 0xfb, 0xf8, 0x23, 0xca, 0xd8, 0x4e, 0x14, 0x27, 0x90, 0x7d, 0x05, 0xdc,
	0x0b, 0xc3, 0xf7, 0x5e, 0xb1, 0x76, 0x0b, 0xb4, 0xe8, 0x4e, 0x5f, 0x0e, 0x04, 0xc8, 0x32, 0x43,
	0x39, 0x4e, 0x9a, 0x2c, 0xd8, 0x21, 0x79, 0x24, 0x33, 0x26, 0x67, 0x18, 0x72, 0x28, 0xc7, 0xe9,
	0xa6, 0x9b, 0xee, 0xbb, 0x2a, 0xfa, 0x00, 0x7d, 0x8e, 0xae, 0xba, 0xc8, 0x32, 0xcb, 0xb6, 0x0b,
	0xb7, 0x48, 0x76, 0x5d, 0xf6, 0x09, 0x0a, 0x0e, 0x29, 0x9a, 0x29, 0x5c, 0xb4, 0x61, 0xd3, 0x95,
	0x38, 0x73, 0x66, 0x7e, 0xe7, 0xcc, 0xcc, 0xf9, 0x9f, 0x19, 0xc1, 0xaa, 0x8f, 0x81, 0xaf, 0x8e,
	0x76, 0xd5, 0x50, 0x50, 0x81, 0x35, 0x3f, 0xe0, 0x82, 0x93, 0x15, 0xe6, 0x98, 0x4e, 0x10, 0xd5,
	0x62, 0x5b, 0x6d, 0xb4, 0xbb, 0xb1, 0x36, 0xe4, 0x43, 0x2e, 0x4d, 0x6a, 0xfc, 0x95, 0x8c, 0xda,
	0xa8, 0x58, 0x3c, 0xf4, 0x78, 0xa8, 0x9a, 0x34, 0x44, 0x75, 0xb4, 0x6b, 0xa2, 0xa0, 0xbb, 0xaa,
	0xc5, 0x1d, 0x96, 0xda, 0x6f, 0x25, 0x76, 0x23, 0x99, 0x98, 0x34, 0xc6, 0x53, 0x87, 0x9c, 0x0f,
	0x5d, 0x54, 0x65, 0xcb, 0x8c, 0x06, 0xaa, 0x1d, 0x05, 0x54, 0x38, 0x3c, 0x9d, 0x5a, 0xfd, 0x76,
	0x06, 0x66, 0x35, 0x1a, 0x50, 0x2f, 0x24, 0x65, 0x98, 0x0b, 0x05, 0xf7, 0x7d, 0xb4, 0xcb, 0xca,
	0x96, 0xb2, 0x3d, 0xaf, 0x8f, 0x9b, 0xe4, 0x31, 0x90, 0x01, 0xa2, 0xe1, 0x73, 0xee, 0x1a, 0xf1,
	0x87, 0x24, 0x94, 0xa7, 0xb6, 0x94, 0xed, 0x85, 0x46, 0xed, 0xc5, 0xc5, 0xe6, 0xc4, 0x8f, 0x17,
	0x9b, 0xff, 0x19, 0x3a, 0xe2, 0x24, 0x32, 0x6b, 0x16, 0xf7, 0xd2, 0x08, 0xd2, 0x9f, 0xff, 0x87,
	0xf6, 0xa9, 0x2a, 0xce, 0x7d, 0x0c, 0x6b, 0x2d, 0xb4, 0xf4, 0x6b, 0x03, 0x44, 0x8d, 0x73, 0x77,
	0x1f, 0x51, 0x8f, 0x31, 0x64, 0x08, 0x65, 0xb4, 0x78, 0x78, 0x1e, 0x0a, 0xf4, 0x8c, 0x41, 0xc4,
	0xec, 0x9c, 0x8b, 0xe9, 0x42, 0x2e, 0xd6, 0x33, 0xde, 0x7e, 0xc4, 0xec, 0xcc, 0x91, 0x09, 0xeb,
	0xae, 0xf3, 0x34, 0x72, 0x6c, 0xb9, 0xfe, 0x9c, 0x97, 0x99, 0x42, 0x5e, 0x56, 0x73, 0xb0, 0xcc,
	0xc7, 0x13, 0xb8, 0xe5, 0xd3, 0x40, 0x38, 0xd4, 0x35, 0xf2, 0xbe, 0x12, 0x3f, 0xb3, 0x85, 0xfc,
	0xdc, 0x4c, 0x81, 0xdd, 0x4b, 0x5e, 0xe2, 0x6b, 0x0f, 0xd6, 0xe3, 0xed, 0x72, 0xd8, 0x30, 0xe6,
	0xa3, 0xe1, 0x30, 0x81, 0xc1, 0x88, 0xba, 0xe5, 0xb9, 0xd8, 0x8f, 0xbe, 0x9a, 0x1a, 0x75, 0x2a,
	0xb0, 0x93, 0x9a, 0xc8, 0x57, 0x0a, 0xac, 0x89, 0x33, 0xea, 0x1b, 0x2e, 0xe7, 0xa7, 0x26, 0xb5,
	0x4e, 0x8d, 0x33, 0x87, 0xd9, 0xfc, 0xac, 0x3c, 0xbf, 0xa5, 0x6c, 0x2f, 0xee, 0xdd, 0xaa, 0x25,
	0xe9, 0x52, 0x1b, 0xa7, 0x4b, 0xad, 0x95, 0xa6, 0x4b, 0xa3, 0x13, 0x87, 0xfd, 0xcb, 0xc5, 0x66,
	0xe5, 0xaa, 0xe9, 0xff, 0xe3, 0x9e, 0x23, 0xd0, 0xf3, 0xc5, 0xf9, 0xaf, 0x17, 0x9b, 0xb7, 0xcf,
	0xa9, 0xe7, 0x7e, 0x5c, 0xbd, 0x6a, 0x5c, 0xf5, 0xeb, 0x9f, 0x36, 0x15, 0x9d, 0xc4, 0xa6, 0x6e,
	0x6a, 0x79, 0x20, 0x0d, 0xe4, 0x43, 0xb8, 0x79, 0x76, 0xe2, 0x08, 0x74, 0x9d, 0x50, 0xa0, 0x9d,
	0x6d, 0x1e, 0x0f, 0xc2, 0xf2, 0xc2, 0xd6, 0xd4, 0xf6, 0x82, 0x7e, 0x23, 0x67, 0xee, 0x5e, 0x5a,
	0xab, 0x9f, 0x4f, 0xc3, 0xbc, 0xc6, 0x43, 0x27, 0x0e, 0x92, 0xfc, 0x1b, 0x56, 0x44, 0x40, 0x6d,
	0x0c, 0x0c, 0x6a, 0xdb, 0x01, 0x86, 0xa1, 0xcc, 0xe4, 0x05, 0x7d, 0x39, 0xe9, 0xad, 0x27, 0x9d,
	0xa4, 0x0b, 0xd3, 0x3e, 0x75, 0x82, 0xf2, 0xa4, 0x3c, 0x90, 0x8f, 0xd2, 0x03, 0x79, 0x2f, 0x77,
	0x20, 0x3d, 0x29, 0xcb, 0xe6, 0x09, 0x75, 0x98, 0x9a, 0x48, 0x54, 0x7d, 0xa6, 0x5a, 0xdc, 0xf3,
	0x38, 0xab, 0xd5, 0xc3, 0x10, 0x85, 0x46, 0x9d, 0x40, 0x97, 0x14, 0xd2, 0x80, 0xe9, 0xd0, 0x79,
	0x8e, 0x05, 0xf5, 0x20, 0xe7, 0x92, 0x7d, 0x98, 0xf5, 0x68, 0x30, 0x74, 0x58, 0xc1, 0x94, 0x4f,
	0x67, 0x93, 0x3e, 0x2c, 0x73, 0x1f, 0x99, 0xc1, 0x78, 0xbc, 0x1f, 0xd4, 0x2d, 0x98, 0xdb, 0x4b,
	0x31, 0xa4, 0x97, 0x32, 0xc8, 0x67, 0x50, 0x75, 0xa9, 0xc0, 0x50, 0x18, 0x56, 0xe4, 0x45, 0x2e,
	0x15, 0xce, 0x08, 0x0d, 0x3f, 0x40, 0xcf, 0x89, 0x3c, 0x63, 0x10, 0x50, 0x2b, 0x1e, 0x57, 0x30,
	0xbb, 0x37, 0x13, 0x72, 0x33, 0x03, 0x6b, 0x09, 0x77, 0x3f, 0xc5, 0x92, 0x7f, 0xc1, 0x92, 0xe9,
	0x72, 0xeb, 0xd4, 0x60, 0x91, 0x67, 0x62, 0x20, 0x93, 0x7b, 0x4a, 0x5f, 0x94, 0x7d, 0x3d, 0xd9,
	0x55, 0xfd, 0x41, 0x81, 0xa5, 0xf8, 0x3c, 0x0e, 0x50, 0x50, 0x9b, 0x0a, 0x9a, 0x9d, 0xaf, 0xf2,
	0x4e, 0xce, 0xf7, 0xaf, 0x2d, 0x7f, 0xf2, 0x1f, 0x59, 0x7e, 0x95, 0xc1, 0x8a, 0x16, 0xa0, 0x4f,
	0x1d, 0xbb, 0x41, 0xed, 0x16, 0x9a, 0x82, 0xac, 0xc1, 0x8c, 0x8d, 0x8c, 0x7b, 0x69, 0x6a, 0x27,
	0x8d, 0x38, 0x81, 0xa8, 0xc7, 0x23, 0x26, 0x0a, 0x04, 0xd2, 0x61, 0x42, 0x4f, 0x67, 0x57, 0xbf,
	0x99, 0x85, 0xa5, 0xb1, 0x9c, 0x74, 0x0c, 0x7d, 0xf2, 0x01, 0xcc, 0xfb, 0x69, 0x5b, 0x7a, 0x5c,
	0xdc, 0x2b, 0xd7, 0xde, 0xbc, 0xb4, 0x6a, 0xd9, 0xf8, 0x6c, 0x24, 0x39, 0x81, 0x32, 0x3e, 0xb3,
	0x4e, 0x28, 0x1b, 0xa2, 0x9d, 0x25, 0xa3, 0x31, 0xa2, 0x6e, 0x84, 0x05, 0x77, 0xea, 0x46, 0xc6,
	0x1b, 0xe7, 0xe5, 0x71, 0x4c, 0x23, 0x03, 0xb8, 0x79, 0xe9, 0x69, 0xec, 0xdf, 0xf8, 0x1b, 0x82,
	0x5c, 0xcf, 0x70, 0xe3, 0x75, 0xf5, 0x63, 0x85, 0x76, 0x60, 0xde, 0xa4, 0xb6, 0x61, 0xa3, 0x29,
	0x0a, 0x6a, 0x74, 0xce, 0x4c, 0x4f, 0xf0, 0x01, 0x5c, 0x1b, 0x17, 0x6e, 0x9f, 0x9e, 0x7b, 0xc8,
	0x44, 0x41, 0x99, 0xae, 0xa4, 0x18, 0x2d, 0xa1, 0x90, 0x7b, 0xb0, 0x14, 0x20, 0x75, 0x9d, 0xe7,
	0xf1, 0x56, 0x30, 0xb7, 0xa0, 0x24, 0x17, 0xc7, 0x0c, 0x8d, 0xb9, 0xe4, 0x53, 0x58, 0x8b, 0x58,
	0x1e, 0x6a, 0xd0, 0x81, 0x48, 0x65, 0xf8, 0xf6, 0x68, 0x72, 0xc9, 0xd2, 0x98, 0x5b, 0x8f, 0x49,
	0xe4, 0x18, 0xae, 0x25, 0xc5, 0xcb, 0x10, 0xdc, 0x18, 0xd1, 0xc8, 0x15, 0xf2, 0x32, 0x7a, 0x7b,
	0xf8, 0x72, 0x82, 0x39, 0xe2, 0xc7, 0x31, 0x84, 0x3c, 0x86, 0xeb, 0x59, 0x3a, 0x64, 0xe5, 0x70,
	0xa1, 0x10, 0xb9, 0x34, 0x06, 0x8d, 0x53, 0xaf, 0xfa, 0xc5, 0x14, 0x2c, 0x8f, 0x6f, 0x21, 0x94,
	0x3a, 0xc9, 0xe7, 0x87, 0x52, 0x48, 0x82, 0x59, 0x7e, 0x3c, 0x82, 0xeb, 0xf1, 0xe3, 0x44, 0xf0,
	0xdc, 0x35, 0x58, 0x50, 0xd6, 0xf1, 0x6b, 0xeb, 0x88, 0x5f, 0xde, 0x97, 0xe4, 0x09, 0x6c, 0xa4,
	0xec, 0x58, 0xbd, 0xc6, 0x9b, 0x2f, 0xaf, 0x02, 0x8a, 0x89, 0x9d, 0xdc, 0x90, 0x4e, 0x34, 0x0c,
	0xfc, 0x76, 0xfe, 0xe1, 0x45, 0x2a, 0x00, 0xb9, 0x05, 0x48, 0xd1, 0xe8, 0xb9, 0x1e, 0x52, 0x87,
	0xe5, 0xec, 0x84, 0x02, 0x0c, 0x7d, 0xa9, 0x82, 0xc5, 0xbd, 0x3b, 0x7f, 0x58, 0x5f, 0x30, 0xf4,
	0xf5, 0x25, 0x3f, 0xd7, 0xaa, 0x7e, 0x37, 0x09, 0x73, 0x07, 0x28, 0x02, 0xc7, 0x0a, 0xdf, 0x71,
	0xd5, 0xef, 0xc0, 0x3c, 0x43, 0x91, 0x14, 0x92, 0x62, 0x15, 0x6b, 0x8e, 0xa1, 0x90, 0xa5, 0x43,
	0x83, 0xc5, 0x11, 0x77, 0x23, 0x0f, 0xef, 0x45, 0x5c, 0x14, 0x2d, 0x4b, 0x79, 0x04, 0xe9, 0x01,
	0x24, 0xcd, 0x06, 0x0d, 0xb1, 0x60, 0x39, 0xca, 0x11, 0x76, 0x54, 0x98, 0xee, 0x3b, 0x36, 0x92,
	0x35, 0x28, 0xf5, 0x3b, 0xad, 0xb6, 0x71, 0xbf, 0xd7, 0xd7, 0xda, 0xcd, 0xce, 0x7e, 0xa7, 0xdd,
	0x2a, 0x4d, 0x90, 0x39, 0x98, 0x6a, 0xdc, 0xff, 0xa4, 0xa4, 0x90, 0x79, 0x98, 0xee, 0xb7, 0xbb,
	0xdd, 0xd2, 0xe4, 0xce, 0x31, 0x2c, 0x6b, 0xac, 0xdb, 0xa4, 0xae, 0x75, 0xe8, 0xcb, 0x82, 0xbf,
	0x09, 0xb7, 0xb5, 0x5e, 0xd7, 0x68, 0xd6, 0xbb, 0x4d, 0xe3, 0x50, 0x3b, 0xea, 0x1c, 0xf6, 0x7e,
	0x07, 0x59, 0x01, 0xe8, 0x6b, 0x87, 0x47, 0x86, 0xa6, 0x77, 0x9a, 0xed, 0x84, 0x75, 0xf4, 0xa0,
	0xae, 0x95, 0x26, 0x09, 0xc0, 0xec, 0xa1, 0x5e, 0x6f, 0x76, 0xdb, 0xa5, 0xa9, 0x9d, 0xbb, 0xb0,
	0xaa, 0xb1, 0xae, 0x16, 0xe0, 0x00, 0x03, 0x64, 0x16, 0xa6, 0xf4, 0x0a, 0x6c, 0xc4, 0x74, 0x4d,
	0x6f, 0xef, 0xb7, 0xf5, 0x76, 0xaf, 0x79, 0x45, 0x84, 0x07, 0xf5, 0x87, 0x25, 0x45, 0x7e, 0x74,
	0x7a, 0xa5, 0xc9, 0x9d, 0xa7, 0x70, 0xe7, 0x40, 0x96, 0x83, 0x38, 0x46, 0x79, 0xb7, 0x72, 0xa6,
	0x05, 0x4e, 0x46, 0x54, 0xe1, 0xbf, 0x07, 0x75, 0xfd, 0x6e, 0xa7, 0x27, 0x43, 0xbe, 0xdf, 0xad,
	0xcb, 0x90, 0x65, 0x70, 0x57, 0xc7, 0x1f, 0xaf, 0x5d, 0x3b, 0x3c, 0x2a, 0x29, 0x64, 0x01, 0x66,
	0x3a, 0xbd, 0x56, 0xfb, 0x61, 0x69, 0x92, 0x2c, 0xc2, 0xdc, 0x41, 0xfd, 0xa1, 0xa1, 0xf5, 0xba,
	0xa5, 0xa9, 0x46, 0xeb, 0xc5, 0xab, 0x8a, 0xf2, 0xf2, 0x55, 0x45, 0xf9, 0xf9, 0x55, 0x45, 0xf9,
	0xf2, 0x75, 0x65, 0xe2, 0xe5, 0xeb, 0xca, 0xc4, 0xf7, 0xaf, 0x2b, 0x13, 0x8f, 0x76, 0xfe, 0x2c,
	0x07, 0xe5, 0x5f, 0x43, 0x79, 0x34, 0xe6, 0xac, 0x7c, 0x7a, 0xbf, 0xff, 0x5b, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xd9, 0xa8, 0xae, 0xf9, 0x2f, 0x0e, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WhitelistedLiquidators) > 0 {
		for iNdEx := len(m.WhitelistedLiquidators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WhitelistedLiquidators[iNdEx])
			copy(dAtA[i:], m.WhitelistedLiquidators[iNdEx])
			i = encodeVarintState(dAtA, i, uint64(len(m.WhitelistedLiquidators[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.TwapLookbackWindow, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.TwapLookbackWindow):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintState(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x42
	if len(m.FundingRateInterval) > 0 {
		i -= len(m.FundingRateInterval)
		copy(dAtA[i:], m.FundingRateInterval)
		i = encodeVarintState(dAtA, i, uint64(len(m.FundingRateInterval)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.PartialLiquidationRatio.Size()
		i -= size
		if _, err := m.PartialLiquidationRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.LiquidationFeeRatio.Size()
		i -= size
		if _, err := m.LiquidationFeeRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.EcosystemFundFeeRatio.Size()
		i -= size
		if _, err := m.EcosystemFundFeeRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.FeePoolFeeRatio.Size()
		i -= size
		if _, err := m.FeePoolFeeRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Stopped {
		i--
		if m.Stopped {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Position) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Position) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockNumber != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.LatestCumulativePremiumFraction.Size()
		i -= size
		if _, err := m.LatestCumulativePremiumFraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.OpenNotional.Size()
		i -= size
		if _, err := m.OpenNotional.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Margin.Size()
		i -= size
		if _, err := m.Margin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Size_.Size()
		i -= size
		if _, err := m.Size_.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Pair.Size()
		i -= size
		if _, err := m.Pair.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.TraderAddress) > 0 {
		i -= len(m.TraderAddress)
		copy(dAtA[i:], m.TraderAddress)
		i = encodeVarintState(dAtA, i, uint64(len(m.TraderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PairMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PairMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PairMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.LatestCumulativePremiumFraction.Size()
		i -= size
		if _, err := m.LatestCumulativePremiumFraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Pair.Size()
		i -= size
		if _, err := m.Pair.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PrepaidBadDebt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrepaidBadDebt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrepaidBadDebt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintState(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PositionResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PositionResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PositionNotional.Size()
		i -= size
		if _, err := m.PositionNotional.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.MarginToVault.Size()
		i -= size
		if _, err := m.MarginToVault.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.UnrealizedPnlAfter.Size()
		i -= size
		if _, err := m.UnrealizedPnlAfter.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.RealizedPnl.Size()
		i -= size
		if _, err := m.RealizedPnl.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.FundingPayment.Size()
		i -= size
		if _, err := m.FundingPayment.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.BadDebt.Size()
		i -= size
		if _, err := m.BadDebt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.ExchangedPositionSize.Size()
		i -= size
		if _, err := m.ExchangedPositionSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.ExchangedNotionalValue.Size()
		i -= size
		if _, err := m.ExchangedNotionalValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintState(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidateResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidateResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidateResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PositionResp != nil {
		{
			size, err := m.PositionResp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintState(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Liquidator) > 0 {
		i -= len(m.Liquidator)
		copy(dAtA[i:], m.Liquidator)
		i = encodeVarintState(dAtA, i, uint64(len(m.Liquidator)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.FeeToPerpEcosystemFund.Size()
		i -= size
		if _, err := m.FeeToPerpEcosystemFund.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.FeeToLiquidator.Size()
		i -= size
		if _, err := m.FeeToLiquidator.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.BadDebt.Size()
		i -= size
		if _, err := m.BadDebt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Metrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.VolumeBase.Size()
		i -= size
		if _, err := m.VolumeBase.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.VolumeQuote.Size()
		i -= size
		if _, err := m.VolumeQuote.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.NetSize.Size()
		i -= size
		if _, err := m.NetSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Pair.Size()
		i -= size
		if _, err := m.Pair.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintState(dAtA []byte, offset int, v uint64) int {
	offset -= sovState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stopped {
		n += 2
	}
	l = m.FeePoolFeeRatio.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.EcosystemFundFeeRatio.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.LiquidationFeeRatio.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.PartialLiquidationRatio.Size()
	n += 1 + l + sovState(uint64(l))
	l = len(m.FundingRateInterval)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.TwapLookbackWindow)
	n += 1 + l + sovState(uint64(l))
	if len(m.WhitelistedLiquidators) > 0 {
		for _, s := range m.WhitelistedLiquidators {
			l = len(s)
			n += 1 + l + sovState(uint64(l))
		}
	}
	return n
}

func (m *Position) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TraderAddress)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = m.Pair.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.Size_.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.Margin.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.OpenNotional.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.LatestCumulativePremiumFraction.Size()
	n += 1 + l + sovState(uint64(l))
	if m.BlockNumber != 0 {
		n += 1 + sovState(uint64(m.BlockNumber))
	}
	return n
}

func (m *PairMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pair.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.LatestCumulativePremiumFraction.Size()
	n += 1 + l + sovState(uint64(l))
	return n
}

func (m *PrepaidBadDebt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovState(uint64(l))
	return n
}

func (m *PositionResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovState(uint64(l))
	}
	l = m.ExchangedNotionalValue.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.ExchangedPositionSize.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.BadDebt.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.FundingPayment.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.RealizedPnl.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.UnrealizedPnlAfter.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.MarginToVault.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.PositionNotional.Size()
	n += 1 + l + sovState(uint64(l))
	return n
}

func (m *LiquidateResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BadDebt.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.FeeToLiquidator.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.FeeToPerpEcosystemFund.Size()
	n += 1 + l + sovState(uint64(l))
	l = len(m.Liquidator)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	if m.PositionResp != nil {
		l = m.PositionResp.Size()
		n += 1 + l + sovState(uint64(l))
	}
	return n
}

func (m *Metrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pair.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.NetSize.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.VolumeQuote.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.VolumeBase.Size()
	n += 1 + l + sovState(uint64(l))
	return n
}

func sovState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozState(x uint64) (n int) {
	return sovState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stopped", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Stopped = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePoolFeeRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeePoolFeeRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcosystemFundFeeRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EcosystemFundFeeRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationFeeRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationFeeRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialLiquidationRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PartialLiquidationRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingRateInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FundingRateInterval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwapLookbackWindow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.TwapLookbackWindow, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistedLiquidators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhitelistedLiquidators = append(m.WhitelistedLiquidators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Size_.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Margin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Margin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenNotional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OpenNotional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestCumulativePremiumFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LatestCumulativePremiumFraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PairMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PairMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PairMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestCumulativePremiumFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LatestCumulativePremiumFraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrepaidBadDebt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrepaidBadDebt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrepaidBadDebt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PositionResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &Position{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangedNotionalValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangedNotionalValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangedPositionSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangedPositionSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadDebt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BadDebt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingPayment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FundingPayment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealizedPnl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RealizedPnl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnrealizedPnlAfter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnrealizedPnlAfter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarginToVault", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarginToVault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionNotional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PositionNotional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidateResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidateResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidateResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadDebt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BadDebt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeToLiquidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeToLiquidator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeToPerpEcosystemFund", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeToPerpEcosystemFund.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Liquidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PositionResp == nil {
				m.PositionResp = &PositionResp{}
			}
			if err := m.PositionResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeQuote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VolumeQuote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VolumeBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupState = fmt.Errorf("proto: unexpected end of group")
)
