// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: perp/v1/state.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Side int32

const (
	Side_BUY  Side = 0
	Side_SELL Side = 1
)

var Side_name = map[int32]string{
	0: "BUY",
	1: "SELL",
}

var Side_value = map[string]int32{
	"BUY":  0,
	"SELL": 1,
}

func (x Side) String() string {
	return proto.EnumName(Side_name, int32(x))
}

func (Side) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0416b6ef16ef80be, []int{0}
}

type PnLCalcOption int32

const (
	PnLCalcOption_SPOT_PRICE PnLCalcOption = 0
	PnLCalcOption_TWAP       PnLCalcOption = 1
	PnLCalcOption_ORACLE     PnLCalcOption = 2
)

var PnLCalcOption_name = map[int32]string{
	0: "SPOT_PRICE",
	1: "TWAP",
	2: "ORACLE",
}

var PnLCalcOption_value = map[string]int32{
	"SPOT_PRICE": 0,
	"TWAP":       1,
	"ORACLE":     2,
}

func (x PnLCalcOption) String() string {
	return proto.EnumName(PnLCalcOption_name, int32(x))
}

func (PnLCalcOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0416b6ef16ef80be, []int{1}
}

type PnLPreferenceOption int32

const (
	PnLPreferenceOption_MAX PnLPreferenceOption = 0
	PnLPreferenceOption_MIN PnLPreferenceOption = 1
)

var PnLPreferenceOption_name = map[int32]string{
	0: "MAX",
	1: "MIN",
}

var PnLPreferenceOption_value = map[string]int32{
	"MAX": 0,
	"MIN": 1,
}

func (x PnLPreferenceOption) String() string {
	return proto.EnumName(PnLPreferenceOption_name, int32(x))
}

func (PnLPreferenceOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0416b6ef16ef80be, []int{2}
}

type Params struct {
	// stopped identifies if the perp exchange is stopped or not
	Stopped                bool                                   `protobuf:"varint,1,opt,name=stopped,proto3" json:"stopped,omitempty"`
	MaintenanceMarginRatio github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=maintenance_margin_ratio,json=maintenanceMarginRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"maintenance_margin_ratio"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_0416b6ef16ef80be, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetStopped() bool {
	if m != nil {
		return m.Stopped
	}
	return false
}

// GenesisState defines the perp  module's genesis state.
type GenesisState struct {
	Params               Params     `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	ModuleAccountBalance types.Coin `protobuf:"bytes,2,opt,name=module_account_balance,json=moduleAccountBalance,proto3" json:"module_account_balance" yaml:"module_account_balance"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_0416b6ef16ef80be, []int{1}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetModuleAccountBalance() types.Coin {
	if m != nil {
		return m.ModuleAccountBalance
	}
	return types.Coin{}
}

// Position identifies and records information on a user's position on one of
// the virtual liquidity pools.
type Position struct {
	// address identifies the address owner of this position
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// pair identifies the pair associated with this position
	Pair   string                                 `protobuf:"bytes,2,opt,name=pair,proto3" json:"pair,omitempty"`
	Size_  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=size,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"size"`
	Margin github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=margin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"margin"`
	// OpenNotional is the quote denom value of the position when opening.
	OpenNotional                        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=open_notional,json=openNotional,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"open_notional"`
	LastUpdateCumulativePremiumFraction github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=last_update_cumulative_premium_fraction,json=lastUpdateCumulativePremiumFraction,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"last_update_cumulative_premium_fraction"`
	LiquidityHistoryIndex               int64                                  `protobuf:"varint,7,opt,name=liquidity_history_index,json=liquidityHistoryIndex,proto3" json:"liquidity_history_index,omitempty"`
	// BlockNumber is the block number of the change to the position.
	BlockNumber int64 `protobuf:"varint,8,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_0416b6ef16ef80be, []int{2}
}
func (m *Position) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Position.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(m, src)
}
func (m *Position) XXX_Size() int {
	return m.Size()
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

func (m *Position) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Position) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *Position) GetLiquidityHistoryIndex() int64 {
	if m != nil {
		return m.LiquidityHistoryIndex
	}
	return 0
}

func (m *Position) GetBlockNumber() int64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type PositionResp struct {
	Position                  *Position                              `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	ExchangedQuoteAssetAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=exchanged_quote_asset_amount,json=exchangedQuoteAssetAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"exchanged_quote_asset_amount"`
	BadDebt                   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=bad_debt,json=badDebt,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bad_debt"`
	ExchangedPositionSize     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=exchanged_position_size,json=exchangedPositionSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"exchanged_position_size"`
	FundingPayment            github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=funding_payment,json=fundingPayment,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"funding_payment"`
	RealizedPnl               github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=realized_pnl,json=realizedPnl,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"realized_pnl"`
	MarginToVault             github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=margin_to_vault,json=marginToVault,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"margin_to_vault"`
	UnrealizedPnlAfter        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=unrealized_pnl_after,json=unrealizedPnlAfter,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"unrealized_pnl_after"`
}

func (m *PositionResp) Reset()         { *m = PositionResp{} }
func (m *PositionResp) String() string { return proto.CompactTextString(m) }
func (*PositionResp) ProtoMessage()    {}
func (*PositionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_0416b6ef16ef80be, []int{3}
}
func (m *PositionResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionResp.Merge(m, src)
}
func (m *PositionResp) XXX_Size() int {
	return m.Size()
}
func (m *PositionResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionResp.DiscardUnknown(m)
}

var xxx_messageInfo_PositionResp proto.InternalMessageInfo

func (m *PositionResp) GetPosition() *Position {
	if m != nil {
		return m.Position
	}
	return nil
}

type VirtualPoolInfo struct {
	Pair                       string                                   `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	LastRestrictionBlock       int64                                    `protobuf:"varint,2,opt,name=last_restriction_block,json=lastRestrictionBlock,proto3" json:"last_restriction_block,omitempty"`
	CumulativePremiumFractions []github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,rep,name=cumulative_premium_fractions,json=cumulativePremiumFractions,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"cumulative_premium_fractions"`
}

func (m *VirtualPoolInfo) Reset()         { *m = VirtualPoolInfo{} }
func (m *VirtualPoolInfo) String() string { return proto.CompactTextString(m) }
func (*VirtualPoolInfo) ProtoMessage()    {}
func (*VirtualPoolInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0416b6ef16ef80be, []int{4}
}
func (m *VirtualPoolInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VirtualPoolInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VirtualPoolInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VirtualPoolInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualPoolInfo.Merge(m, src)
}
func (m *VirtualPoolInfo) XXX_Size() int {
	return m.Size()
}
func (m *VirtualPoolInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualPoolInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualPoolInfo proto.InternalMessageInfo

func (m *VirtualPoolInfo) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *VirtualPoolInfo) GetLastRestrictionBlock() int64 {
	if m != nil {
		return m.LastRestrictionBlock
	}
	return 0
}

type PairMetadata struct {
	Pair                       string                                   `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	OpenInterestNotional       *github_com_cosmos_cosmos_sdk_types.Int  `protobuf:"bytes,2,opt,name=open_interest_notional,json=openInterestNotional,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"open_interest_notional,omitempty"`
	CumulativePremiumFractions []github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,rep,name=cumulative_premium_fractions,json=cumulativePremiumFractions,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"cumulative_premium_fractions,omitempty"`
}

func (m *PairMetadata) Reset()         { *m = PairMetadata{} }
func (m *PairMetadata) String() string { return proto.CompactTextString(m) }
func (*PairMetadata) ProtoMessage()    {}
func (*PairMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_0416b6ef16ef80be, []int{5}
}
func (m *PairMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PairMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PairMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PairMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairMetadata.Merge(m, src)
}
func (m *PairMetadata) XXX_Size() int {
	return m.Size()
}
func (m *PairMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_PairMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_PairMetadata proto.InternalMessageInfo

func (m *PairMetadata) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

type PositionChangedEvent struct {
	Trader                string                                 `protobuf:"bytes,1,opt,name=trader,proto3" json:"trader,omitempty"`
	Pair                  string                                 `protobuf:"bytes,2,opt,name=pair,proto3" json:"pair,omitempty"`
	Margin                github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=margin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"margin"`
	PositionNotional      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=position_notional,json=positionNotional,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"position_notional"`
	ExchangedPositionSize github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=exchanged_position_size,json=exchangedPositionSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"exchanged_position_size"`
	Fee                   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=fee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"fee"`
	PositionSizeAfter     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=position_size_after,json=positionSizeAfter,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"position_size_after"`
	RealizedPnl           github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=realized_pnl,json=realizedPnl,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"realized_pnl"`
	UnrealizedPnlAfter    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,9,opt,name=unrealized_pnl_after,json=unrealizedPnlAfter,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"unrealized_pnl_after"`
	BadDebt               github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,10,opt,name=bad_debt,json=badDebt,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bad_debt"`
	LiquidationPenalty    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,11,opt,name=liquidation_penalty,json=liquidationPenalty,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"liquidation_penalty"`
	SpotPrice             github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,12,opt,name=spot_price,json=spotPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"spot_price"`
	FundingPayment        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,13,opt,name=funding_payment,json=fundingPayment,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"funding_payment"`
}

func (m *PositionChangedEvent) Reset()         { *m = PositionChangedEvent{} }
func (m *PositionChangedEvent) String() string { return proto.CompactTextString(m) }
func (*PositionChangedEvent) ProtoMessage()    {}
func (*PositionChangedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0416b6ef16ef80be, []int{6}
}
func (m *PositionChangedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionChangedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionChangedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionChangedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionChangedEvent.Merge(m, src)
}
func (m *PositionChangedEvent) XXX_Size() int {
	return m.Size()
}
func (m *PositionChangedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionChangedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_PositionChangedEvent proto.InternalMessageInfo

func (m *PositionChangedEvent) GetTrader() string {
	if m != nil {
		return m.Trader
	}
	return ""
}

func (m *PositionChangedEvent) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func init() {
	proto.RegisterEnum("nibiru.perp.v1.Side", Side_name, Side_value)
	proto.RegisterEnum("nibiru.perp.v1.PnLCalcOption", PnLCalcOption_name, PnLCalcOption_value)
	proto.RegisterEnum("nibiru.perp.v1.PnLPreferenceOption", PnLPreferenceOption_name, PnLPreferenceOption_value)
	proto.RegisterType((*Params)(nil), "nibiru.perp.v1.Params")
	proto.RegisterType((*GenesisState)(nil), "nibiru.perp.v1.GenesisState")
	proto.RegisterType((*Position)(nil), "nibiru.perp.v1.Position")
	proto.RegisterType((*PositionResp)(nil), "nibiru.perp.v1.PositionResp")
	proto.RegisterType((*VirtualPoolInfo)(nil), "nibiru.perp.v1.VirtualPoolInfo")
	proto.RegisterType((*PairMetadata)(nil), "nibiru.perp.v1.PairMetadata")
	proto.RegisterType((*PositionChangedEvent)(nil), "nibiru.perp.v1.PositionChangedEvent")
}

func init() { proto.RegisterFile("perp/v1/state.proto", fileDescriptor_0416b6ef16ef80be) }

var fileDescriptor_0416b6ef16ef80be = []byte{
	// 1128 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0xc7, 0xc5, 0x48, 0x91, 0xe4, 0xb1, 0x9c, 0xa8, 0x6b, 0x45, 0xa1, 0x83, 0x54, 0x71, 0x55,
	0xb4, 0x09, 0x04, 0x54, 0x82, 0xd3, 0xb4, 0x87, 0x9e, 0x2a, 0x29, 0x4e, 0x2b, 0xc0, 0x76, 0x18,
	0x2a, 0x1f, 0xfd, 0x00, 0xba, 0x59, 0x92, 0x2b, 0x79, 0x11, 0x72, 0x97, 0x21, 0x97, 0x42, 0x94,
	0x73, 0x8f, 0x3d, 0xf4, 0x81, 0xfa, 0x00, 0xb9, 0xb4, 0xc8, 0xb1, 0xe8, 0x21, 0x28, 0x92, 0x37,
	0xc8, 0xb1, 0xbd, 0x14, 0xbb, 0xa4, 0x64, 0x07, 0x71, 0x82, 0x9a, 0xf6, 0x49, 0x5c, 0xce, 0xee,
	0x8f, 0x33, 0xa3, 0x99, 0xff, 0x90, 0xb0, 0x1e, 0xd2, 0x28, 0xec, 0xcd, 0xb6, 0x7a, 0xb1, 0x24,
	0x92, 0x76, 0xc3, 0x48, 0x48, 0x81, 0xce, 0x71, 0xe6, 0xb0, 0x28, 0xe9, 0x2a, 0x5b, 0x77, 0xb6,
	0x75, 0xa9, 0x31, 0x15, 0x53, 0xa1, 0x4d, 0x3d, 0x75, 0x95, 0xee, 0xba, 0xd4, 0x72, 0x45, 0x1c,
	0x88, 0xb8, 0xe7, 0x90, 0x98, 0xf6, 0x66, 0x5b, 0x0e, 0x95, 0x64, 0xab, 0xe7, 0x0a, 0xc6, 0x33,
	0xfb, 0x46, 0x6a, 0xc7, 0xe9, 0xc1, 0x74, 0x91, 0x9a, 0xda, 0xbf, 0x18, 0x50, 0xb6, 0x48, 0x44,
	0x82, 0x18, 0x99, 0x50, 0x89, 0xa5, 0x08, 0x43, 0xea, 0x99, 0xc6, 0xa6, 0x71, 0xad, 0x6a, 0x2f,
	0x96, 0x68, 0x1f, 0xcc, 0x80, 0x30, 0x2e, 0x29, 0x27, 0xdc, 0xa5, 0x38, 0x20, 0xd1, 0x94, 0x71,
	0x1c, 0x11, 0xc9, 0x84, 0x79, 0x66, 0xd3, 0xb8, 0xb6, 0x32, 0xe8, 0x3e, 0x7b, 0x71, 0xa5, 0xf0,
	0xd7, 0x8b, 0x2b, 0x9f, 0x4e, 0x99, 0xdc, 0x4f, 0x9c, 0xae, 0x2b, 0x82, 0xec, 0x39, 0xd9, 0xcf,
	0x67, 0xb1, 0xf7, 0xa8, 0x27, 0xe7, 0x21, 0x8d, 0xbb, 0x23, 0x2e, 0xed, 0xe6, 0x21, 0xde, 0xae,
	0xc6, 0xd9, 0x8a, 0xd6, 0xfe, 0xcd, 0x80, 0xda, 0x37, 0x94, 0xd3, 0x98, 0xc5, 0x63, 0x95, 0x06,
	0x74, 0x03, 0xca, 0xa1, 0x76, 0x4f, 0xfb, 0xb4, 0x7a, 0xbd, 0xd9, 0x7d, 0x33, 0x23, 0xdd, 0xd4,
	0xf9, 0x41, 0x49, 0x39, 0x60, 0x67, 0x7b, 0xd1, 0x0c, 0x9a, 0x81, 0xf0, 0x12, 0x9f, 0x62, 0xe2,
	0xba, 0x22, 0xe1, 0x12, 0x3b, 0xc4, 0x57, 0xcf, 0xd2, 0xee, 0xae, 0x5e, 0xdf, 0xe8, 0x66, 0x49,
	0x50, 0x19, 0xeb, 0x66, 0x19, 0xeb, 0x0e, 0x05, 0xe3, 0x83, 0x4f, 0x14, 0xe8, 0xf5, 0x8b, 0x2b,
	0x1f, 0xce, 0x49, 0xe0, 0x7f, 0xd5, 0x3e, 0x1a, 0xd3, 0xb6, 0x1b, 0xa9, 0xa1, 0x9f, 0xde, 0x1f,
	0x64, 0xb7, 0xff, 0x2d, 0x42, 0xd5, 0x12, 0x31, 0x93, 0x4c, 0x70, 0x95, 0x4f, 0xe2, 0x79, 0x11,
	0x8d, 0x53, 0xdf, 0x57, 0xec, 0xc5, 0x12, 0x21, 0x28, 0x85, 0x84, 0x45, 0x69, 0xee, 0x6c, 0x7d,
	0x8d, 0x06, 0x50, 0x8a, 0xd9, 0x53, 0x6a, 0x16, 0x73, 0xe5, 0x53, 0x9f, 0x45, 0xb7, 0xa0, 0x9c,
	0xfe, 0x37, 0x66, 0x29, 0x17, 0x25, 0x3b, 0x8d, 0xc6, 0xb0, 0x26, 0x42, 0xca, 0x31, 0x17, 0x2a,
	0x10, 0xe2, 0x9b, 0x67, 0x73, 0xe1, 0x6a, 0x0a, 0xb2, 0x97, 0x31, 0xd0, 0xcf, 0x06, 0x5c, 0xf5,
	0x49, 0x2c, 0x71, 0x12, 0x7a, 0x44, 0x52, 0xec, 0x26, 0x41, 0xe2, 0x13, 0xc9, 0x66, 0x14, 0x87,
	0x11, 0x0d, 0x58, 0x12, 0xe0, 0x49, 0x44, 0x5c, 0xb5, 0xdb, 0x2c, 0xe7, 0x7a, 0xde, 0xc7, 0x0a,
	0x7f, 0x4f, 0xd3, 0x87, 0x4b, 0xb8, 0x95, 0xb2, 0x6f, 0x65, 0x68, 0xf4, 0x25, 0x5c, 0xf4, 0xd9,
	0xe3, 0x84, 0x79, 0x4c, 0xce, 0xf1, 0x3e, 0x8b, 0xa5, 0x88, 0xe6, 0x98, 0x71, 0x8f, 0x3e, 0x31,
	0x2b, 0x9b, 0xc6, 0xb5, 0xa2, 0x7d, 0x61, 0x69, 0xfe, 0x36, 0xb5, 0x8e, 0x94, 0x11, 0x7d, 0x04,
	0x35, 0xc7, 0x17, 0xee, 0x23, 0xcc, 0x93, 0xc0, 0xa1, 0x91, 0x59, 0xd5, 0x9b, 0x57, 0xf5, 0xbd,
	0x3d, 0x7d, 0xab, 0xfd, 0xc7, 0x59, 0xa8, 0x2d, 0xfe, 0x7d, 0x9b, 0xc6, 0x21, 0xba, 0x01, 0xd5,
	0x30, 0x5b, 0x67, 0xe5, 0x6b, 0xbe, 0x55, 0xbe, 0x8b, 0xfd, 0xcb, 0x9d, 0x48, 0xc0, 0x65, 0xfa,
	0xc4, 0xdd, 0x27, 0x7c, 0x4a, 0x3d, 0xfc, 0x38, 0x11, 0x92, 0x62, 0x12, 0xc7, 0x54, 0x62, 0x12,
	0xa8, 0x5a, 0xcb, 0xd9, 0x71, 0x1b, 0x4b, 0xe6, 0x1d, 0x85, 0xec, 0x2b, 0x62, 0x5f, 0x03, 0xd1,
	0x08, 0xaa, 0x0e, 0xf1, 0xb0, 0x47, 0x1d, 0x99, 0xb3, 0xfc, 0x2a, 0x0e, 0xf1, 0x6e, 0x52, 0x47,
	0xa2, 0x09, 0x5c, 0x3c, 0xf0, 0x7d, 0x11, 0x11, 0xd6, 0x85, 0x9d, 0xaf, 0x24, 0x2f, 0x2c, 0x71,
	0x8b, 0x4c, 0x8d, 0x55, 0xa5, 0x3f, 0x80, 0xf3, 0x93, 0x84, 0x7b, 0x8c, 0x4f, 0x71, 0x48, 0xe6,
	0x01, 0xe5, 0x32, 0x67, 0x8d, 0x9e, 0xcb, 0x30, 0x56, 0x4a, 0x41, 0x77, 0xa0, 0x16, 0x51, 0xe2,
	0xb3, 0xa7, 0xca, 0x7f, 0xee, 0xe7, 0xac, 0xc4, 0xd5, 0x05, 0xc3, 0xe2, 0x3e, 0xba, 0x0f, 0xe7,
	0x33, 0xc5, 0x94, 0x02, 0xcf, 0x48, 0xe2, 0x4b, 0x5d, 0x69, 0xc7, 0xa7, 0xae, 0xa5, 0x98, 0xbb,
	0xe2, 0xbe, 0x82, 0xa0, 0x87, 0xd0, 0x48, 0xf8, 0x61, 0x67, 0x31, 0x99, 0xc8, 0xac, 0x32, 0x8f,
	0x0f, 0x47, 0x07, 0x2c, 0x8b, 0xfb, 0x7d, 0x45, 0x6a, 0xff, 0x6e, 0xc0, 0xf9, 0xfb, 0x2c, 0x92,
	0x09, 0xf1, 0x2d, 0x21, 0xfc, 0x11, 0x9f, 0x88, 0xa5, 0x76, 0x19, 0x87, 0xb4, 0xeb, 0x06, 0x34,
	0x75, 0x67, 0x47, 0x34, 0x96, 0x11, 0xd3, 0x7d, 0x86, 0x75, 0x63, 0xe8, 0x5a, 0x2d, 0xda, 0x0d,
	0x65, 0xb5, 0x0f, 0x8c, 0x03, 0x65, 0x43, 0x21, 0x5c, 0x7e, 0x8f, 0x06, 0xc4, 0x66, 0x71, 0xb3,
	0x98, 0x23, 0x8e, 0x4b, 0xee, 0xbb, 0x5a, 0x3f, 0x6e, 0xbf, 0x36, 0xa0, 0x66, 0x11, 0x16, 0xed,
	0x52, 0x49, 0x3c, 0x22, 0xc9, 0x91, 0xc1, 0x3c, 0x84, 0xa6, 0x16, 0x3f, 0x35, 0x9f, 0x54, 0x40,
	0x07, 0x2a, 0x98, 0x36, 0x5e, 0xe7, 0x18, 0xce, 0x34, 0x14, 0x69, 0x94, 0x81, 0x96, 0x4a, 0xe8,
	0xff, 0xaf, 0xc0, 0x3b, 0xa7, 0x14, 0xf4, 0x3f, 0x15, 0x68, 0x2c, 0x7a, 0x67, 0x98, 0xb6, 0xd2,
	0xf6, 0x4c, 0x95, 0x7a, 0x13, 0xca, 0x32, 0x22, 0x1e, 0x5d, 0x84, 0x9f, 0xad, 0x8e, 0x9c, 0x4e,
	0x07, 0x93, 0xa5, 0x78, 0xa2, 0xc9, 0xf2, 0x23, 0x7c, 0xb0, 0x54, 0x85, 0x65, 0x5e, 0xf3, 0x29,
	0x43, 0x7d, 0x01, 0x5a, 0xe6, 0xf5, 0x3d, 0xe2, 0x73, 0xf6, 0x34, 0xc5, 0xe7, 0x6b, 0x28, 0x4e,
	0x28, 0xcd, 0x29, 0x0d, 0xea, 0x28, 0xfa, 0x09, 0xd6, 0xdf, 0xf0, 0x2f, 0xeb, 0xdc, 0x7c, 0xb2,
	0xb0, 0xcc, 0xa8, 0x72, 0x4e, 0x37, 0xee, 0x5b, 0x2a, 0x56, 0x3d, 0xb9, 0x8a, 0xbd, 0x4b, 0x6d,
	0x56, 0x4e, 0x4b, 0x6d, 0xde, 0x18, 0x43, 0x70, 0xb2, 0x31, 0x84, 0x61, 0x3d, 0x9d, 0xe2, 0x44,
	0xa7, 0x38, 0xa4, 0x9c, 0xf8, 0x72, 0x6e, 0xae, 0xe6, 0xf3, 0xf5, 0x10, 0xca, 0x4a, 0x49, 0x68,
	0x17, 0x20, 0x0e, 0x85, 0xc4, 0x61, 0xc4, 0x5c, 0x6a, 0xd6, 0x72, 0x71, 0x57, 0x14, 0xc1, 0x52,
	0x80, 0xa3, 0xc6, 0xd9, 0xda, 0x69, 0x8c, 0xb3, 0xce, 0x06, 0x94, 0xc6, 0xcc, 0xa3, 0xa8, 0x02,
	0xc5, 0xc1, 0xbd, 0xef, 0xeb, 0x05, 0x54, 0x85, 0xd2, 0x78, 0x7b, 0x67, 0xa7, 0x6e, 0x74, 0xbe,
	0x80, 0x35, 0x8b, 0xef, 0x0c, 0x89, 0xef, 0xde, 0x0e, 0xf5, 0x7b, 0xc7, 0x39, 0x80, 0xb1, 0x75,
	0xfb, 0x2e, 0xb6, 0xec, 0xd1, 0x70, 0x3b, 0xdd, 0x7a, 0xf7, 0x41, 0xdf, 0xaa, 0x1b, 0x08, 0xa0,
	0x7c, 0xdb, 0xee, 0x0f, 0x77, 0xb6, 0xeb, 0x67, 0x3a, 0x57, 0x61, 0xdd, 0xe2, 0x3b, 0x56, 0x44,
	0x27, 0x34, 0xa2, 0xdc, 0xa5, 0xd9, 0xe1, 0x0a, 0x14, 0x77, 0xfb, 0xdf, 0xd5, 0x0b, 0xfa, 0x62,
	0xb4, 0x57, 0x37, 0x06, 0x37, 0x9f, 0xbd, 0x6c, 0x19, 0xcf, 0x5f, 0xb6, 0x8c, 0xbf, 0x5f, 0xb6,
	0x8c, 0x5f, 0x5f, 0xb5, 0x0a, 0xcf, 0x5f, 0xb5, 0x0a, 0x7f, 0xbe, 0x6a, 0x15, 0x7e, 0xe8, 0x1c,
	0x0a, 0x66, 0x4f, 0xbf, 0x0e, 0x0d, 0xf7, 0x09, 0xe3, 0xbd, 0xf4, 0xd5, 0xa8, 0xf7, 0xa4, 0xa7,
	0xbf, 0x84, 0x74, 0x50, 0x4e, 0x59, 0x7f, 0xa6, 0x7c, 0xfe, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x45, 0xaf, 0x6d, 0xc2, 0x1e, 0x0d, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaintenanceMarginRatio.Size()
		i -= size
		if _, err := m.MaintenanceMarginRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Stopped {
		i--
		if m.Stopped {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ModuleAccountBalance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Position) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Position) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockNumber != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x40
	}
	if m.LiquidityHistoryIndex != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.LiquidityHistoryIndex))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.LastUpdateCumulativePremiumFraction.Size()
		i -= size
		if _, err := m.LastUpdateCumulativePremiumFraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.OpenNotional.Size()
		i -= size
		if _, err := m.OpenNotional.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Margin.Size()
		i -= size
		if _, err := m.Margin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Size_.Size()
		i -= size
		if _, err := m.Size_.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Pair) > 0 {
		i -= len(m.Pair)
		copy(dAtA[i:], m.Pair)
		i = encodeVarintState(dAtA, i, uint64(len(m.Pair)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintState(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PositionResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PositionResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.UnrealizedPnlAfter.Size()
		i -= size
		if _, err := m.UnrealizedPnlAfter.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.MarginToVault.Size()
		i -= size
		if _, err := m.MarginToVault.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.RealizedPnl.Size()
		i -= size
		if _, err := m.RealizedPnl.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.FundingPayment.Size()
		i -= size
		if _, err := m.FundingPayment.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.ExchangedPositionSize.Size()
		i -= size
		if _, err := m.ExchangedPositionSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.BadDebt.Size()
		i -= size
		if _, err := m.BadDebt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.ExchangedQuoteAssetAmount.Size()
		i -= size
		if _, err := m.ExchangedQuoteAssetAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintState(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VirtualPoolInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualPoolInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualPoolInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CumulativePremiumFractions) > 0 {
		for iNdEx := len(m.CumulativePremiumFractions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.CumulativePremiumFractions[iNdEx].Size()
				i -= size
				if _, err := m.CumulativePremiumFractions[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintState(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LastRestrictionBlock != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.LastRestrictionBlock))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Pair) > 0 {
		i -= len(m.Pair)
		copy(dAtA[i:], m.Pair)
		i = encodeVarintState(dAtA, i, uint64(len(m.Pair)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PairMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PairMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PairMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CumulativePremiumFractions) > 0 {
		for iNdEx := len(m.CumulativePremiumFractions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.CumulativePremiumFractions[iNdEx].Size()
				i -= size
				if _, err := m.CumulativePremiumFractions[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintState(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.OpenInterestNotional != nil {
		{
			size := m.OpenInterestNotional.Size()
			i -= size
			if _, err := m.OpenInterestNotional.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintState(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pair) > 0 {
		i -= len(m.Pair)
		copy(dAtA[i:], m.Pair)
		i = encodeVarintState(dAtA, i, uint64(len(m.Pair)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PositionChangedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionChangedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PositionChangedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.FundingPayment.Size()
		i -= size
		if _, err := m.FundingPayment.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.SpotPrice.Size()
		i -= size
		if _, err := m.SpotPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.LiquidationPenalty.Size()
		i -= size
		if _, err := m.LiquidationPenalty.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.BadDebt.Size()
		i -= size
		if _, err := m.BadDebt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.UnrealizedPnlAfter.Size()
		i -= size
		if _, err := m.UnrealizedPnlAfter.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.RealizedPnl.Size()
		i -= size
		if _, err := m.RealizedPnl.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.PositionSizeAfter.Size()
		i -= size
		if _, err := m.PositionSizeAfter.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.Fee.Size()
		i -= size
		if _, err := m.Fee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.ExchangedPositionSize.Size()
		i -= size
		if _, err := m.ExchangedPositionSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.PositionNotional.Size()
		i -= size
		if _, err := m.PositionNotional.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Margin.Size()
		i -= size
		if _, err := m.Margin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Pair) > 0 {
		i -= len(m.Pair)
		copy(dAtA[i:], m.Pair)
		i = encodeVarintState(dAtA, i, uint64(len(m.Pair)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Trader) > 0 {
		i -= len(m.Trader)
		copy(dAtA[i:], m.Trader)
		i = encodeVarintState(dAtA, i, uint64(len(m.Trader)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintState(dAtA []byte, offset int, v uint64) int {
	offset -= sovState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stopped {
		n += 2
	}
	l = m.MaintenanceMarginRatio.Size()
	n += 1 + l + sovState(uint64(l))
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.ModuleAccountBalance.Size()
	n += 1 + l + sovState(uint64(l))
	return n
}

func (m *Position) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.Pair)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = m.Size_.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.Margin.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.OpenNotional.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.LastUpdateCumulativePremiumFraction.Size()
	n += 1 + l + sovState(uint64(l))
	if m.LiquidityHistoryIndex != 0 {
		n += 1 + sovState(uint64(m.LiquidityHistoryIndex))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovState(uint64(m.BlockNumber))
	}
	return n
}

func (m *PositionResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovState(uint64(l))
	}
	l = m.ExchangedQuoteAssetAmount.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.BadDebt.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.ExchangedPositionSize.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.FundingPayment.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.RealizedPnl.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.MarginToVault.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.UnrealizedPnlAfter.Size()
	n += 1 + l + sovState(uint64(l))
	return n
}

func (m *VirtualPoolInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pair)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	if m.LastRestrictionBlock != 0 {
		n += 1 + sovState(uint64(m.LastRestrictionBlock))
	}
	if len(m.CumulativePremiumFractions) > 0 {
		for _, e := range m.CumulativePremiumFractions {
			l = e.Size()
			n += 1 + l + sovState(uint64(l))
		}
	}
	return n
}

func (m *PairMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pair)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	if m.OpenInterestNotional != nil {
		l = m.OpenInterestNotional.Size()
		n += 1 + l + sovState(uint64(l))
	}
	if len(m.CumulativePremiumFractions) > 0 {
		for _, e := range m.CumulativePremiumFractions {
			l = e.Size()
			n += 1 + l + sovState(uint64(l))
		}
	}
	return n
}

func (m *PositionChangedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Trader)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.Pair)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = m.Margin.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.PositionNotional.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.ExchangedPositionSize.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.Fee.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.PositionSizeAfter.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.RealizedPnl.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.UnrealizedPnlAfter.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.BadDebt.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.LiquidationPenalty.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.SpotPrice.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.FundingPayment.Size()
	n += 1 + l + sovState(uint64(l))
	return n
}

func sovState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozState(x uint64) (n int) {
	return sovState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stopped", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Stopped = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaintenanceMarginRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaintenanceMarginRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleAccountBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ModuleAccountBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Size_.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Margin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Margin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenNotional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OpenNotional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdateCumulativePremiumFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastUpdateCumulativePremiumFraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityHistoryIndex", wireType)
			}
			m.LiquidityHistoryIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidityHistoryIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PositionResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &Position{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangedQuoteAssetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangedQuoteAssetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadDebt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BadDebt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangedPositionSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangedPositionSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingPayment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FundingPayment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealizedPnl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RealizedPnl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarginToVault", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarginToVault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnrealizedPnlAfter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnrealizedPnlAfter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualPoolInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualPoolInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualPoolInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRestrictionBlock", wireType)
			}
			m.LastRestrictionBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRestrictionBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativePremiumFractions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.CumulativePremiumFractions = append(m.CumulativePremiumFractions, v)
			if err := m.CumulativePremiumFractions[len(m.CumulativePremiumFractions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PairMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PairMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PairMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenInterestNotional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.OpenInterestNotional = &v
			if err := m.OpenInterestNotional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativePremiumFractions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.CumulativePremiumFractions = append(m.CumulativePremiumFractions, v)
			if err := m.CumulativePremiumFractions[len(m.CumulativePremiumFractions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PositionChangedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionChangedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionChangedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Margin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Margin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionNotional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PositionNotional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangedPositionSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangedPositionSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionSizeAfter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PositionSizeAfter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealizedPnl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RealizedPnl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnrealizedPnlAfter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnrealizedPnlAfter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadDebt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BadDebt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationPenalty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationPenalty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpotPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpotPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingPayment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FundingPayment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupState = fmt.Errorf("proto: unexpected end of group")
)
