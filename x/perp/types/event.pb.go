// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: perp/v1/event.proto

package types

import (
	fmt "fmt"
	github_com_NibiruChain_nibiru_x_common_asset "github.com/NibiruChain/nibiru/x/common/asset"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LiquidationFailedEvent_LiquidationFailedReason int32

const (
	LiquidationFailedEvent_UNSPECIFIED LiquidationFailedEvent_LiquidationFailedReason = 0
	// the position is healthy and does not need to be liquidated.
	LiquidationFailedEvent_POSITION_HEALTHY LiquidationFailedEvent_LiquidationFailedReason = 1
	// the pair does not exist.
	LiquidationFailedEvent_NONEXISTENT_PAIR LiquidationFailedEvent_LiquidationFailedReason = 2
	// the position does not exist.
	LiquidationFailedEvent_NONEXISTENT_POSITION LiquidationFailedEvent_LiquidationFailedReason = 3
)

var LiquidationFailedEvent_LiquidationFailedReason_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "POSITION_HEALTHY",
	2: "NONEXISTENT_PAIR",
	3: "NONEXISTENT_POSITION",
}

var LiquidationFailedEvent_LiquidationFailedReason_value = map[string]int32{
	"UNSPECIFIED":          0,
	"POSITION_HEALTHY":     1,
	"NONEXISTENT_PAIR":     2,
	"NONEXISTENT_POSITION": 3,
}

func (x LiquidationFailedEvent_LiquidationFailedReason) String() string {
	return proto.EnumName(LiquidationFailedEvent_LiquidationFailedReason_name, int32(x))
}

func (LiquidationFailedEvent_LiquidationFailedReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_19b7f9ebcf2fdb5b, []int{4, 0}
}

// Emitted when a position changes.
// TODO: Is there a way to split this into different events without creating too
// much complexity?
type PositionChangedEvent struct {
	// identifier of the corresponding virtual pool for the position
	Pair github_com_NibiruChain_nibiru_x_common_asset.Pair `protobuf:"bytes,1,opt,name=pair,proto3,customtype=github.com/NibiruChain/nibiru/x/common/asset.Pair" json:"pair"`
	// owner of the position.
	TraderAddress string `protobuf:"bytes,2,opt,name=trader_address,json=traderAddress,proto3" json:"trader_address,omitempty"`
	// Amount of collateral (quote units) backing the position after the change.
	Margin types.Coin `protobuf:"bytes,3,opt,name=margin,proto3" json:"margin" yaml:"margin"`
	// Position notional (quote units) after the change. In general,
	// 'notional = baseAmount * priceQuotePerBase', where size is the baseAmount.
	PositionNotional github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=position_notional,json=positionNotional,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"position_notional"`
	// Exchanged size is the magnitude of the change to position size (base
	// units). The size is a signed quantity expressing how much exposure a
	// position has in base units of the pair.
	ExchangedSize github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=exchanged_size,json=exchangedSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"exchanged_size"`
	//
	// Exchanged notional is the value of the exchanged size in quote units.
	// exchangedNotional = posBefore.OpenNotional + (direction * realizedPnl),
	// where 'posBefore' is the position before the change, and
	// direction is 1 if posBefore.Size > 0 or -1 if posBefore.Size < 0,
	ExchangedNotional github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=exchanged_notional,json=exchangedNotional,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"exchanged_notional"`
	// Transaction fee paid. A "taker" fee.
	TransactionFee types.Coin `protobuf:"bytes,7,opt,name=transaction_fee,json=transactionFee,proto3" json:"transaction_fee" yaml:"transaction_fee"`
	// Position size after the change.
	PositionSize github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=position_size,json=positionSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"position_size"`
	// realize profits and losses after the change
	RealizedPnl github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=realized_pnl,json=realizedPnl,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"realized_pnl"`
	// unrealized profits and losses after the change
	UnrealizedPnlAfter github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=unrealized_pnl_after,json=unrealizedPnlAfter,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"unrealized_pnl_after"`
	// Amount of bad debt cleared by the PerpEF during the change.
	// Bad debt is negative net margin past the liquidation point of a position.
	BadDebt types.Coin `protobuf:"bytes,11,opt,name=bad_debt,json=badDebt,proto3" json:"bad_debt"`
	// Mark price, synonymous with mark price in this context, is the quotient of
	// the quote reserves and base reserves
	MarkPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,12,opt,name=mark_price,json=markPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"mark_price"`
	// A funding payment made or received by the trader on the current position.
	// 'fundingPayment' is positive if 'owner' is the sender and negative if 'owner'
	// is the receiver of the payment. Its magnitude is abs(vSize * fundingRate).
	// Funding payments act to converge the mark price (vPrice) and index price
	// (average price on major exchanges).
	FundingPayment github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,13,opt,name=funding_payment,json=fundingPayment,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"funding_payment"`
	// The block number at which this position was changed.
	BlockHeight int64 `protobuf:"varint,14,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// The block time in unix milliseconds at which this position was changed.
	BlockTimeMs int64 `protobuf:"varint,15,opt,name=block_time_ms,json=blockTimeMs,proto3" json:"block_time_ms,omitempty"`
}

func (m *PositionChangedEvent) Reset()         { *m = PositionChangedEvent{} }
func (m *PositionChangedEvent) String() string { return proto.CompactTextString(m) }
func (*PositionChangedEvent) ProtoMessage()    {}
func (*PositionChangedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b7f9ebcf2fdb5b, []int{0}
}
func (m *PositionChangedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionChangedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionChangedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionChangedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionChangedEvent.Merge(m, src)
}
func (m *PositionChangedEvent) XXX_Size() int {
	return m.Size()
}
func (m *PositionChangedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionChangedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_PositionChangedEvent proto.InternalMessageInfo

func (m *PositionChangedEvent) GetTraderAddress() string {
	if m != nil {
		return m.TraderAddress
	}
	return ""
}

func (m *PositionChangedEvent) GetMargin() types.Coin {
	if m != nil {
		return m.Margin
	}
	return types.Coin{}
}

func (m *PositionChangedEvent) GetTransactionFee() types.Coin {
	if m != nil {
		return m.TransactionFee
	}
	return types.Coin{}
}

func (m *PositionChangedEvent) GetBadDebt() types.Coin {
	if m != nil {
		return m.BadDebt
	}
	return types.Coin{}
}

func (m *PositionChangedEvent) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *PositionChangedEvent) GetBlockTimeMs() int64 {
	if m != nil {
		return m.BlockTimeMs
	}
	return 0
}

// Emitted when a position is liquidated.
type PositionLiquidatedEvent struct {
	// identifier of the corresponding virtual pool for the position
	Pair github_com_NibiruChain_nibiru_x_common_asset.Pair `protobuf:"bytes,1,opt,name=pair,proto3,customtype=github.com/NibiruChain/nibiru/x/common/asset.Pair" json:"pair"`
	// owner of the position.
	TraderAddress string `protobuf:"bytes,2,opt,name=trader_address,json=traderAddress,proto3" json:"trader_address,omitempty"`
	// margin * leverage * vPrice. 'notional' is the virtual size times  the
	// virtual price on 'perp.amm'.
	ExchangedQuoteAmount github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=exchanged_quote_amount,json=exchangedQuoteAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"exchanged_quote_amount"`
	// virtual amount of base assets for the position, which would be margin *
	// leverage * priceBasePerQuote.
	ExchangedPositionSize github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=exchanged_position_size,json=exchangedPositionSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"exchanged_position_size"`
	// Address of the account that executed the tx.
	LiquidatorAddress string `protobuf:"bytes,5,opt,name=liquidator_address,json=liquidatorAddress,proto3" json:"liquidator_address,omitempty"`
	// Commission (in margin units) received by 'liquidator'.
	FeeToLiquidator types.Coin `protobuf:"bytes,6,opt,name=fee_to_liquidator,json=feeToLiquidator,proto3" json:"fee_to_liquidator" yaml:"fee_to_liquidator"`
	// Commission (in margin units) given to the ecosystem fund.
	FeeToEcosystemFund types.Coin `protobuf:"bytes,7,opt,name=fee_to_ecosystem_fund,json=feeToEcosystemFund,proto3" json:"fee_to_ecosystem_fund" yaml:"fee_to_ecosystem_fund"`
	//  Bad debt (margin units) cleared by the PerpEF during the tx. Bad debt is
	//  negative net margin past the liquidation point of a position.
	BadDebt types.Coin `protobuf:"bytes,8,opt,name=bad_debt,json=badDebt,proto3" json:"bad_debt"`
	// Remaining margin in the position after liquidation
	Margin types.Coin `protobuf:"bytes,9,opt,name=margin,proto3" json:"margin" yaml:"margin"`
	// Remaining position notional in the position after liquidation
	PositionNotional github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=position_notional,json=positionNotional,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"position_notional"`
	// Remaining position size in the position after liquidation
	PositionSize github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=position_size,json=positionSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"position_size"`
	// Unrealized PnL in the position after liquidation
	UnrealizedPnl github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,12,opt,name=unrealizedPnl,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"unrealizedPnl"`
	// Spot price of the vAMM after liquidation
	MarkPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,13,opt,name=mark_price,json=markPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"mark_price"`
	// The block number at which this liquidation occured.
	BlockHeight int64 `protobuf:"varint,14,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// The unix timestamp in milliseconds at which this liquidation occured.
	BlockTimeMs int64 `protobuf:"varint,15,opt,name=block_time_ms,json=blockTimeMs,proto3" json:"block_time_ms,omitempty"`
}

func (m *PositionLiquidatedEvent) Reset()         { *m = PositionLiquidatedEvent{} }
func (m *PositionLiquidatedEvent) String() string { return proto.CompactTextString(m) }
func (*PositionLiquidatedEvent) ProtoMessage()    {}
func (*PositionLiquidatedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b7f9ebcf2fdb5b, []int{1}
}
func (m *PositionLiquidatedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionLiquidatedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionLiquidatedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionLiquidatedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionLiquidatedEvent.Merge(m, src)
}
func (m *PositionLiquidatedEvent) XXX_Size() int {
	return m.Size()
}
func (m *PositionLiquidatedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionLiquidatedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_PositionLiquidatedEvent proto.InternalMessageInfo

func (m *PositionLiquidatedEvent) GetTraderAddress() string {
	if m != nil {
		return m.TraderAddress
	}
	return ""
}

func (m *PositionLiquidatedEvent) GetLiquidatorAddress() string {
	if m != nil {
		return m.LiquidatorAddress
	}
	return ""
}

func (m *PositionLiquidatedEvent) GetFeeToLiquidator() types.Coin {
	if m != nil {
		return m.FeeToLiquidator
	}
	return types.Coin{}
}

func (m *PositionLiquidatedEvent) GetFeeToEcosystemFund() types.Coin {
	if m != nil {
		return m.FeeToEcosystemFund
	}
	return types.Coin{}
}

func (m *PositionLiquidatedEvent) GetBadDebt() types.Coin {
	if m != nil {
		return m.BadDebt
	}
	return types.Coin{}
}

func (m *PositionLiquidatedEvent) GetMargin() types.Coin {
	if m != nil {
		return m.Margin
	}
	return types.Coin{}
}

func (m *PositionLiquidatedEvent) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *PositionLiquidatedEvent) GetBlockTimeMs() int64 {
	if m != nil {
		return m.BlockTimeMs
	}
	return 0
}

// Emitted when a position is settled.
type PositionSettledEvent struct {
	// Identifier for the virtual pool of the position.
	Pair github_com_NibiruChain_nibiru_x_common_asset.Pair `protobuf:"bytes,1,opt,name=pair,proto3,customtype=github.com/NibiruChain/nibiru/x/common/asset.Pair" json:"pair"`
	// Owner of the position.
	TraderAddress string `protobuf:"bytes,2,opt,name=trader_address,json=traderAddress,proto3" json:"trader_address,omitempty"`
	// Settled coin as dictated by the settlement price of the perp.amm.
	SettledCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=settled_coins,json=settledCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"settled_coins" yaml:"settled_coins"`
}

func (m *PositionSettledEvent) Reset()         { *m = PositionSettledEvent{} }
func (m *PositionSettledEvent) String() string { return proto.CompactTextString(m) }
func (*PositionSettledEvent) ProtoMessage()    {}
func (*PositionSettledEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b7f9ebcf2fdb5b, []int{2}
}
func (m *PositionSettledEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionSettledEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionSettledEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionSettledEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionSettledEvent.Merge(m, src)
}
func (m *PositionSettledEvent) XXX_Size() int {
	return m.Size()
}
func (m *PositionSettledEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionSettledEvent.DiscardUnknown(m)
}

var xxx_messageInfo_PositionSettledEvent proto.InternalMessageInfo

func (m *PositionSettledEvent) GetTraderAddress() string {
	if m != nil {
		return m.TraderAddress
	}
	return ""
}

func (m *PositionSettledEvent) GetSettledCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.SettledCoins
	}
	return nil
}

// Emitted when a new funding rate is calculated.
type FundingRateChangedEvent struct {
	// The pair for which the funding rate was calculated.
	Pair github_com_NibiruChain_nibiru_x_common_asset.Pair `protobuf:"bytes,1,opt,name=pair,proto3,customtype=github.com/NibiruChain/nibiru/x/common/asset.Pair" json:"pair"`
	// The mark price of the pair.
	MarkPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=mark_price,json=markPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"mark_price"`
	// The oracle index price of the pair.
	IndexPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=index_price,json=indexPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"index_price"`
	// The latest funding rate.
	LatestFundingRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=latest_funding_rate,json=latestFundingRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"latest_funding_rate"`
	// The latest premium fraction just calculated.
	LatestPremiumFraction github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=latest_premium_fraction,json=latestPremiumFraction,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"latest_premium_fraction"`
	// The latest cumulative premium fraction.
	// The funding payment a position will pay is the difference between this
	// value and the latest cumulative premium fraction on the position,
	// multiplied by the position size.
	CumulativePremiumFraction github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=cumulative_premium_fraction,json=cumulativePremiumFraction,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"cumulative_premium_fraction"`
	// The block number at which the funding rate was calculated.
	BlockHeight int64 `protobuf:"varint,7,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// The block time in unix milliseconds at which the funding rate was
	// calculated.
	BlockTimeMs int64 `protobuf:"varint,8,opt,name=block_time_ms,json=blockTimeMs,proto3" json:"block_time_ms,omitempty"`
}

func (m *FundingRateChangedEvent) Reset()         { *m = FundingRateChangedEvent{} }
func (m *FundingRateChangedEvent) String() string { return proto.CompactTextString(m) }
func (*FundingRateChangedEvent) ProtoMessage()    {}
func (*FundingRateChangedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b7f9ebcf2fdb5b, []int{3}
}
func (m *FundingRateChangedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FundingRateChangedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FundingRateChangedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FundingRateChangedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundingRateChangedEvent.Merge(m, src)
}
func (m *FundingRateChangedEvent) XXX_Size() int {
	return m.Size()
}
func (m *FundingRateChangedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_FundingRateChangedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_FundingRateChangedEvent proto.InternalMessageInfo

func (m *FundingRateChangedEvent) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *FundingRateChangedEvent) GetBlockTimeMs() int64 {
	if m != nil {
		return m.BlockTimeMs
	}
	return 0
}

// Emitted when liquidation fails.
type LiquidationFailedEvent struct {
	// The pair for which we are trying to liquidate.
	Pair github_com_NibiruChain_nibiru_x_common_asset.Pair `protobuf:"bytes,1,opt,name=pair,proto3,customtype=github.com/NibiruChain/nibiru/x/common/asset.Pair" json:"pair"`
	// owner of the position.
	Trader string `protobuf:"bytes,2,opt,name=trader,proto3" json:"trader,omitempty"`
	// Address of the account that executed the tx.
	Liquidator string `protobuf:"bytes,3,opt,name=liquidator,proto3" json:"liquidator,omitempty"`
	// Reason for the liquidation failure.
	Reason LiquidationFailedEvent_LiquidationFailedReason `protobuf:"varint,4,opt,name=reason,proto3,enum=nibiru.perp.v1.LiquidationFailedEvent_LiquidationFailedReason" json:"reason,omitempty"`
}

func (m *LiquidationFailedEvent) Reset()         { *m = LiquidationFailedEvent{} }
func (m *LiquidationFailedEvent) String() string { return proto.CompactTextString(m) }
func (*LiquidationFailedEvent) ProtoMessage()    {}
func (*LiquidationFailedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b7f9ebcf2fdb5b, []int{4}
}
func (m *LiquidationFailedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidationFailedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidationFailedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidationFailedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidationFailedEvent.Merge(m, src)
}
func (m *LiquidationFailedEvent) XXX_Size() int {
	return m.Size()
}
func (m *LiquidationFailedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidationFailedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidationFailedEvent proto.InternalMessageInfo

func (m *LiquidationFailedEvent) GetTrader() string {
	if m != nil {
		return m.Trader
	}
	return ""
}

func (m *LiquidationFailedEvent) GetLiquidator() string {
	if m != nil {
		return m.Liquidator
	}
	return ""
}

func (m *LiquidationFailedEvent) GetReason() LiquidationFailedEvent_LiquidationFailedReason {
	if m != nil {
		return m.Reason
	}
	return LiquidationFailedEvent_UNSPECIFIED
}

type MetricsEvent struct {
	Pair github_com_NibiruChain_nibiru_x_common_asset.Pair `protobuf:"bytes,1,opt,name=pair,proto3,customtype=github.com/NibiruChain/nibiru/x/common/asset.Pair" json:"pair"`
	// Sum of all active position sizes for the pair.
	NetSize github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=net_size,json=netSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"net_size"`
	// Total notional volume for the pair.
	VolumeQuote github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=volumeQuote,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"volumeQuote"`
	// Total size volume for the pair.
	VolumeBase github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=volumeBase,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"volumeBase"`
	// The block number at which metrics were generated.
	BlockHeight int64 `protobuf:"varint,5,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// The block time in unix milliseconds at which metrics were generated.
	BlockTimeMs int64 `protobuf:"varint,6,opt,name=block_time_ms,json=blockTimeMs,proto3" json:"block_time_ms,omitempty"`
}

func (m *MetricsEvent) Reset()         { *m = MetricsEvent{} }
func (m *MetricsEvent) String() string { return proto.CompactTextString(m) }
func (*MetricsEvent) ProtoMessage()    {}
func (*MetricsEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b7f9ebcf2fdb5b, []int{5}
}
func (m *MetricsEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricsEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricsEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetricsEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsEvent.Merge(m, src)
}
func (m *MetricsEvent) XXX_Size() int {
	return m.Size()
}
func (m *MetricsEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsEvent proto.InternalMessageInfo

func (m *MetricsEvent) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MetricsEvent) GetBlockTimeMs() int64 {
	if m != nil {
		return m.BlockTimeMs
	}
	return 0
}

type PegMultiplierUpdate struct {
	Pair github_com_NibiruChain_nibiru_x_common_asset.Pair `protobuf:"bytes,1,opt,name=pair,proto3,customtype=github.com/NibiruChain/nibiru/x/common/asset.Pair" json:"pair"`
	// New repeg multiplier
	NewPeg github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=new_peg,json=newPeg,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"new_peg"`
	// Cost of repeg
	Cost github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=cost,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"cost"`
}

func (m *PegMultiplierUpdate) Reset()         { *m = PegMultiplierUpdate{} }
func (m *PegMultiplierUpdate) String() string { return proto.CompactTextString(m) }
func (*PegMultiplierUpdate) ProtoMessage()    {}
func (*PegMultiplierUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b7f9ebcf2fdb5b, []int{6}
}
func (m *PegMultiplierUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PegMultiplierUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PegMultiplierUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PegMultiplierUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PegMultiplierUpdate.Merge(m, src)
}
func (m *PegMultiplierUpdate) XXX_Size() int {
	return m.Size()
}
func (m *PegMultiplierUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_PegMultiplierUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_PegMultiplierUpdate proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("nibiru.perp.v1.LiquidationFailedEvent_LiquidationFailedReason", LiquidationFailedEvent_LiquidationFailedReason_name, LiquidationFailedEvent_LiquidationFailedReason_value)
	proto.RegisterType((*PositionChangedEvent)(nil), "nibiru.perp.v1.PositionChangedEvent")
	proto.RegisterType((*PositionLiquidatedEvent)(nil), "nibiru.perp.v1.PositionLiquidatedEvent")
	proto.RegisterType((*PositionSettledEvent)(nil), "nibiru.perp.v1.PositionSettledEvent")
	proto.RegisterType((*FundingRateChangedEvent)(nil), "nibiru.perp.v1.FundingRateChangedEvent")
	proto.RegisterType((*LiquidationFailedEvent)(nil), "nibiru.perp.v1.LiquidationFailedEvent")
	proto.RegisterType((*MetricsEvent)(nil), "nibiru.perp.v1.MetricsEvent")
	proto.RegisterType((*PegMultiplierUpdate)(nil), "nibiru.perp.v1.PegMultiplierUpdate")
}

func init() { proto.RegisterFile("perp/v1/event.proto", fileDescriptor_19b7f9ebcf2fdb5b) }

var fileDescriptor_19b7f9ebcf2fdb5b = []byte{
	// 1239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x98, 0x4d, 0x6f, 0xdb, 0x46,
	0x13, 0xc7, 0x2d, 0xdb, 0x91, 0xed, 0x95, 0x25, 0xdb, 0x1b, 0xd9, 0x66, 0xf2, 0x04, 0xb2, 0x1f,
	0xa1, 0x2d, 0x8c, 0x02, 0x21, 0xe1, 0xf4, 0xd4, 0x1c, 0x0a, 0xf8, 0x45, 0xae, 0x05, 0xc4, 0x32,
	0x43, 0x2b, 0x7d, 0x45, 0xcb, 0xae, 0xc8, 0x11, 0xbd, 0x08, 0xb9, 0xcb, 0x70, 0x97, 0x4e, 0x9c,
	0x63, 0x2f, 0xed, 0xa5, 0x40, 0x7b, 0xea, 0x77, 0xe8, 0x27, 0xc9, 0x31, 0xc7, 0xa2, 0x87, 0xb4,
	0x48, 0x4e, 0x3d, 0xb6, 0x9f, 0xa0, 0xe0, 0x92, 0x7a, 0xb3, 0xda, 0x38, 0x61, 0x6c, 0xe4, 0x24,
	0x73, 0x96, 0xfb, 0xdb, 0x9d, 0xd1, 0xcc, 0x7f, 0xc6, 0x42, 0x57, 0x43, 0x88, 0x42, 0xe3, 0x64,
	0xd3, 0x80, 0x13, 0x60, 0x52, 0x0f, 0x23, 0x2e, 0x39, 0xae, 0x30, 0xda, 0xa1, 0x51, 0xac, 0x27,
	0x6b, 0xfa, 0xc9, 0xe6, 0xf5, 0xaa, 0xc7, 0x3d, 0xae, 0x96, 0x8c, 0xe4, 0xaf, 0xf4, 0xad, 0xeb,
	0x37, 0x3c, 0xce, 0x3d, 0x1f, 0x0c, 0x12, 0x52, 0x83, 0x30, 0xc6, 0x25, 0x91, 0x94, 0x33, 0x91,
	0xad, 0xd6, 0x1c, 0x2e, 0x02, 0x2e, 0x8c, 0x0e, 0x11, 0x60, 0x9c, 0x6c, 0x76, 0x40, 0x92, 0x4d,
	0xc3, 0xe1, 0x94, 0x65, 0xeb, 0xfd, 0x83, 0x85, 0x24, 0x12, 0x52, 0x63, 0xfd, 0xdb, 0x39, 0x54,
	0x35, 0xb9, 0xa0, 0x09, 0x68, 0xe7, 0x98, 0x30, 0x0f, 0xdc, 0x46, 0x72, 0x2f, 0x7c, 0x80, 0xa6,
	0x43, 0x42, 0x23, 0xad, 0xb0, 0x5e, 0xd8, 0x98, 0xdb, 0xfe, 0xf0, 0xc9, 0xb3, 0xb5, 0x89, 0xdf,
	0x9e, 0xad, 0x6d, 0x7a, 0x54, 0x1e, 0xc7, 0x1d, 0xdd, 0xe1, 0x81, 0xd1, 0x52, 0x57, 0xde, 0x39,
	0x26, 0x94, 0x19, 0xe9, 0xf5, 0x8d, 0x47, 0x86, 0xc3, 0x83, 0x80, 0x33, 0x83, 0x08, 0x01, 0x52,
	0x37, 0x09, 0x8d, 0x2c, 0x85, 0xc1, 0xef, 0xa2, 0x8a, 0x8c, 0x88, 0x0b, 0x91, 0x4d, 0x5c, 0x37,
	0x02, 0x21, 0xb4, 0xc9, 0x04, 0x6c, 0x95, 0x53, 0xeb, 0x56, 0x6a, 0xc4, 0xfb, 0xa8, 0x18, 0x90,
	0xc8, 0xa3, 0x4c, 0x9b, 0x5a, 0x2f, 0x6c, 0x94, 0x6e, 0x5d, 0xd3, 0x53, 0xa7, 0xf4, 0xc4, 0x29,
	0x3d, 0x73, 0x4a, 0xdf, 0xe1, 0x94, 0x6d, 0x2f, 0x27, 0x57, 0xfa, 0xfb, 0xd9, 0x5a, 0xf9, 0x94,
	0x04, 0xfe, 0xed, 0x7a, 0xba, 0xad, 0x6e, 0x65, 0xfb, 0xf1, 0x97, 0x68, 0x29, 0xcc, 0xfc, 0xb2,
	0x19, 0x4f, 0x3e, 0x88, 0xaf, 0x4d, 0x2b, 0x67, 0xf4, 0xcc, 0x99, 0xf7, 0x86, 0x9c, 0xc9, 0x62,
	0x97, 0x7e, 0xdc, 0x14, 0xee, 0x7d, 0x43, 0x9e, 0x86, 0x20, 0xf4, 0x5d, 0x70, 0xac, 0xc5, 0x1e,
	0xa8, 0x95, 0x71, 0xf0, 0x3d, 0x54, 0x81, 0x47, 0x4e, 0x1a, 0x2e, 0x5b, 0xd0, 0xc7, 0xa0, 0x5d,
	0xc9, 0x45, 0x2e, 0xf7, 0x29, 0x47, 0xf4, 0x31, 0xe0, 0xaf, 0x10, 0x1e, 0x60, 0xfb, 0x97, 0x2e,
	0xe6, 0x42, 0x2f, 0xf5, 0x49, 0xfd, 0x5b, 0x77, 0xd0, 0x82, 0x8c, 0x08, 0x13, 0xc4, 0x51, 0x51,
	0xe9, 0x02, 0x68, 0x33, 0xe7, 0x45, 0xb9, 0x96, 0x45, 0x79, 0x25, 0x8d, 0xf2, 0x99, 0xfd, 0x75,
	0xab, 0x32, 0x64, 0xd9, 0x03, 0xc0, 0x47, 0xa8, 0xdc, 0x0f, 0xbb, 0x0a, 0xcc, 0x6c, 0xae, 0xdb,
	0xcf, 0xf7, 0x20, 0x2a, 0x2e, 0x77, 0xd1, 0x7c, 0x04, 0xc4, 0xa7, 0x8f, 0xc1, 0xb5, 0x43, 0xe6,
	0x6b, 0x73, 0xb9, 0x98, 0xa5, 0x1e, 0xc3, 0x64, 0x3e, 0xfe, 0x06, 0x55, 0x63, 0x36, 0x0c, 0xb5,
	0x49, 0x57, 0x42, 0xa4, 0xa1, 0x5c, 0x68, 0x3c, 0x60, 0x99, 0xcc, 0xdf, 0x4a, 0x48, 0xf8, 0x36,
	0x9a, 0xed, 0x10, 0xd7, 0x76, 0xa1, 0x23, 0xb5, 0xd2, 0x79, 0x61, 0x9e, 0x4e, 0x0e, 0xb4, 0x66,
	0x3a, 0xc4, 0xdd, 0x85, 0x4e, 0x52, 0x7c, 0x28, 0x20, 0xd1, 0x7d, 0x3b, 0x8c, 0xa8, 0x03, 0xda,
	0x7c, 0xae, 0x3b, 0xcd, 0x25, 0x04, 0x33, 0x01, 0xe0, 0x4f, 0xd1, 0x42, 0x37, 0x66, 0x2e, 0x65,
	0x9e, 0x1d, 0x92, 0xd3, 0x00, 0x98, 0xd4, 0xca, 0xb9, 0x98, 0x95, 0x0c, 0x63, 0xa6, 0x14, 0xfc,
	0x7f, 0x34, 0xdf, 0xf1, 0xb9, 0x73, 0xdf, 0x3e, 0x06, 0xea, 0x1d, 0x4b, 0xad, 0xb2, 0x5e, 0xd8,
	0x98, 0xb2, 0x4a, 0xca, 0xb6, 0xaf, 0x4c, 0xb8, 0x8e, 0xca, 0xe9, 0x2b, 0x92, 0x06, 0x60, 0x07,
	0x42, 0x5b, 0x18, 0x7a, 0xa7, 0x4d, 0x03, 0x38, 0x10, 0xf5, 0x1f, 0xe6, 0xd0, 0x6a, 0x4f, 0x84,
	0xee, 0xd0, 0x07, 0x31, 0x75, 0x89, 0x7c, 0xbb, 0x3a, 0xe4, 0xa2, 0x95, 0x41, 0x25, 0x3e, 0x88,
	0xb9, 0x04, 0x9b, 0x04, 0x3c, 0x66, 0x52, 0xe9, 0xd2, 0xeb, 0x07, 0xae, 0xda, 0xa7, 0xdd, 0x4d,
	0x60, 0x5b, 0x8a, 0x85, 0xbb, 0x68, 0x75, 0x70, 0xca, 0x68, 0xd9, 0xe4, 0x53, 0xaa, 0xe5, 0x3e,
	0xce, 0x1c, 0xae, 0x9f, 0x9b, 0x08, 0xfb, 0x59, 0x58, 0xf9, 0xc0, 0x71, 0x25, 0x59, 0xd6, 0xd2,
	0x60, 0xa5, 0xe7, 0xbc, 0x87, 0x96, 0xba, 0x00, 0xb6, 0xe4, 0xf6, 0x60, 0x4d, 0xa9, 0xd0, 0x4b,
	0x53, 0x78, 0x3d, 0x53, 0x0a, 0x2d, 0x55, 0x8a, 0x31, 0x42, 0xdd, 0x5a, 0xe8, 0x02, 0xb4, 0xf9,
	0x9d, 0xbe, 0x05, 0x47, 0x68, 0x39, 0x7b, 0x0d, 0x1c, 0x2e, 0x4e, 0x85, 0x84, 0xc0, 0x4e, 0x32,
	0xec, 0x7c, 0x59, 0x7a, 0x27, 0x3b, 0xec, 0xc6, 0xc8, 0x61, 0xa3, 0x94, 0xba, 0x85, 0xd5, 0x81,
	0x8d, 0x9e, 0x75, 0x2f, 0x66, 0xee, 0x48, 0x59, 0xce, 0xbe, 0x66, 0x59, 0x0e, 0xba, 0xd3, 0xdc,
	0x65, 0x74, 0x27, 0x74, 0x41, 0xdd, 0x69, 0x4c, 0x83, 0x4b, 0x17, 0xa0, 0xc1, 0x6d, 0x54, 0x1e,
	0x11, 0xb9, 0x9c, 0xaa, 0x34, 0x0a, 0x39, 0x23, 0x74, 0xe5, 0x37, 0x15, 0xba, 0x0b, 0xd2, 0xa3,
	0x9f, 0x27, 0x07, 0x43, 0xd1, 0x11, 0x48, 0xe9, 0xbf, 0x5d, 0x31, 0xfa, 0xbe, 0x80, 0xca, 0x22,
	0xbd, 0x86, 0x9d, 0xcc, 0x73, 0x42, 0x9b, 0x5a, 0x9f, 0x7a, 0x79, 0xfa, 0xed, 0x67, 0xe9, 0x57,
	0x4d, 0xd3, 0x6f, 0x64, 0x77, 0xfd, 0x97, 0xdf, 0xd7, 0x36, 0x5e, 0x21, 0xb6, 0x09, 0x48, 0x58,
	0xf3, 0xd9, 0x5e, 0xf5, 0x54, 0xff, 0xee, 0x0a, 0x5a, 0xdd, 0x4b, 0x7b, 0x80, 0x45, 0x24, 0x5c,
	0xe6, 0xc4, 0x38, 0x9a, 0x1a, 0x93, 0x6f, 0x9a, 0x1a, 0x87, 0xa8, 0x44, 0x99, 0x0b, 0x8f, 0x32,
	0x5e, 0x3e, 0x19, 0x47, 0x0a, 0x91, 0x02, 0xbf, 0x46, 0x57, 0x7d, 0x22, 0x41, 0x48, 0xbb, 0xd7,
	0x5b, 0x23, 0x22, 0xf3, 0x0a, 0xf7, 0x52, 0x8a, 0x1a, 0x0a, 0x6d, 0xd2, 0x1c, 0x32, 0x7e, 0x18,
	0x41, 0x40, 0xe3, 0xc0, 0xee, 0x46, 0xe9, 0x9c, 0x95, 0x73, 0xd8, 0x5c, 0x4e, 0x71, 0x66, 0x4a,
	0xdb, 0xcb, 0x60, 0x98, 0xa1, 0xff, 0x39, 0x71, 0x10, 0xfb, 0x44, 0xd2, 0x13, 0x18, 0x3f, 0x2b,
	0xdf, 0xf4, 0x79, 0x6d, 0x80, 0x3c, 0x7b, 0xde, 0xd9, 0x1a, 0x9d, 0x79, 0x85, 0x1a, 0x9d, 0x1d,
	0xaf, 0xd1, 0x3f, 0x27, 0xd1, 0x4a, 0xaf, 0x95, 0x24, 0xb3, 0x27, 0xa1, 0x97, 0x55, 0xa5, 0x2b,
	0xa8, 0x98, 0xd6, 0x63, 0x56, 0x9d, 0xd9, 0x13, 0xae, 0x21, 0x34, 0xd4, 0x1f, 0x55, 0x42, 0x59,
	0x43, 0x16, 0xfc, 0x09, 0x2a, 0x46, 0x40, 0x04, 0x67, 0x2a, 0x27, 0x2a, 0xb7, 0x3e, 0xd2, 0x47,
	0xff, 0xc9, 0xd3, 0xff, 0xfd, 0xfa, 0xe3, 0x66, 0x4b, 0x51, 0xac, 0x8c, 0x56, 0x0f, 0xd1, 0xea,
	0x7f, 0xbc, 0x82, 0x17, 0x50, 0xe9, 0x5e, 0xeb, 0xc8, 0x6c, 0xec, 0x34, 0xf7, 0x9a, 0x8d, 0xdd,
	0xc5, 0x09, 0x5c, 0x45, 0x8b, 0xe6, 0xe1, 0x51, 0xb3, 0xdd, 0x3c, 0x6c, 0xd9, 0xfb, 0x8d, 0xad,
	0x3b, 0xed, 0xfd, 0xcf, 0x17, 0x0b, 0x89, 0xb5, 0x75, 0xd8, 0x6a, 0x7c, 0xd6, 0x3c, 0x6a, 0x37,
	0x5a, 0x6d, 0xdb, 0xdc, 0x6a, 0x5a, 0x8b, 0x93, 0x58, 0x43, 0xd5, 0x11, 0x6b, 0xb6, 0x6f, 0x71,
	0xaa, 0xfe, 0xd3, 0x14, 0x9a, 0x3f, 0x00, 0x19, 0x51, 0x47, 0x5c, 0x4a, 0x84, 0x9b, 0x68, 0x96,
	0x81, 0x4c, 0x7b, 0x55, 0xbe, 0x42, 0x9f, 0x61, 0x20, 0x55, 0x9b, 0x32, 0x51, 0xe9, 0x84, 0xfb,
	0x71, 0x00, 0x6a, 0xce, 0xca, 0x59, 0xe6, 0xc3, 0x08, 0xdc, 0x42, 0x28, 0x7d, 0xdc, 0x26, 0x22,
	0x6f, 0x79, 0x0f, 0x11, 0xc6, 0xf2, 0xff, 0xca, 0x2b, 0xe4, 0x7f, 0x71, 0x3c, 0xff, 0xff, 0x2a,
	0xa0, 0xab, 0x26, 0x78, 0x07, 0xb1, 0x2f, 0x69, 0xe8, 0x53, 0x88, 0xee, 0x85, 0xc9, 0xd4, 0x7c,
	0xd1, 0x5f, 0xcd, 0xc7, 0x68, 0x86, 0xc1, 0x43, 0x3b, 0x04, 0x2f, 0xe7, 0x37, 0x53, 0x64, 0xf0,
	0xd0, 0x04, 0x0f, 0x6f, 0xa3, 0x69, 0x87, 0x8b, 0x3c, 0xf3, 0x73, 0x93, 0x49, 0x4b, 0xed, 0xdd,
	0xde, 0x7d, 0xf2, 0xbc, 0x56, 0x78, 0xfa, 0xbc, 0x56, 0xf8, 0xe3, 0x79, 0xad, 0xf0, 0xe3, 0x8b,
	0xda, 0xc4, 0xd3, 0x17, 0xb5, 0x89, 0x5f, 0x5f, 0xd4, 0x26, 0xbe, 0x78, 0xff, 0x3c, 0xff, 0xd4,
	0x6f, 0x1f, 0x8a, 0xd7, 0x29, 0xaa, 0x5f, 0x3e, 0x3e, 0xf8, 0x27, 0x00, 0x00, 0xff, 0xff, 0x49,
	0x1d, 0x1f, 0xc6, 0x89, 0x11, 0x00, 0x00,
}

func (m *PositionChangedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionChangedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PositionChangedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockTimeMs != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BlockTimeMs))
		i--
		dAtA[i] = 0x78
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x70
	}
	{
		size := m.FundingPayment.Size()
		i -= size
		if _, err := m.FundingPayment.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.MarkPrice.Size()
		i -= size
		if _, err := m.MarkPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.BadDebt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.UnrealizedPnlAfter.Size()
		i -= size
		if _, err := m.UnrealizedPnlAfter.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.RealizedPnl.Size()
		i -= size
		if _, err := m.RealizedPnl.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.PositionSize.Size()
		i -= size
		if _, err := m.PositionSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.TransactionFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.ExchangedNotional.Size()
		i -= size
		if _, err := m.ExchangedNotional.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.ExchangedSize.Size()
		i -= size
		if _, err := m.ExchangedSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.PositionNotional.Size()
		i -= size
		if _, err := m.PositionNotional.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Margin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.TraderAddress) > 0 {
		i -= len(m.TraderAddress)
		copy(dAtA[i:], m.TraderAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.TraderAddress)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Pair.Size()
		i -= size
		if _, err := m.Pair.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PositionLiquidatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionLiquidatedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PositionLiquidatedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockTimeMs != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BlockTimeMs))
		i--
		dAtA[i] = 0x78
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x70
	}
	{
		size := m.MarkPrice.Size()
		i -= size
		if _, err := m.MarkPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.UnrealizedPnl.Size()
		i -= size
		if _, err := m.UnrealizedPnl.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.PositionSize.Size()
		i -= size
		if _, err := m.PositionSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.PositionNotional.Size()
		i -= size
		if _, err := m.PositionNotional.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size, err := m.Margin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.BadDebt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.FeeToEcosystemFund.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.FeeToLiquidator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.LiquidatorAddress) > 0 {
		i -= len(m.LiquidatorAddress)
		copy(dAtA[i:], m.LiquidatorAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.LiquidatorAddress)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.ExchangedPositionSize.Size()
		i -= size
		if _, err := m.ExchangedPositionSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.ExchangedQuoteAmount.Size()
		i -= size
		if _, err := m.ExchangedQuoteAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.TraderAddress) > 0 {
		i -= len(m.TraderAddress)
		copy(dAtA[i:], m.TraderAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.TraderAddress)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Pair.Size()
		i -= size
		if _, err := m.Pair.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PositionSettledEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionSettledEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PositionSettledEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SettledCoins) > 0 {
		for iNdEx := len(m.SettledCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SettledCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TraderAddress) > 0 {
		i -= len(m.TraderAddress)
		copy(dAtA[i:], m.TraderAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.TraderAddress)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Pair.Size()
		i -= size
		if _, err := m.Pair.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FundingRateChangedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FundingRateChangedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FundingRateChangedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockTimeMs != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BlockTimeMs))
		i--
		dAtA[i] = 0x40
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.CumulativePremiumFraction.Size()
		i -= size
		if _, err := m.CumulativePremiumFraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.LatestPremiumFraction.Size()
		i -= size
		if _, err := m.LatestPremiumFraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.LatestFundingRate.Size()
		i -= size
		if _, err := m.LatestFundingRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.IndexPrice.Size()
		i -= size
		if _, err := m.IndexPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.MarkPrice.Size()
		i -= size
		if _, err := m.MarkPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Pair.Size()
		i -= size
		if _, err := m.Pair.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LiquidationFailedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidationFailedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidationFailedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reason != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Liquidator) > 0 {
		i -= len(m.Liquidator)
		copy(dAtA[i:], m.Liquidator)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Liquidator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Trader) > 0 {
		i -= len(m.Trader)
		copy(dAtA[i:], m.Trader)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Trader)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Pair.Size()
		i -= size
		if _, err := m.Pair.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MetricsEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetricsEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockTimeMs != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BlockTimeMs))
		i--
		dAtA[i] = 0x30
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.VolumeBase.Size()
		i -= size
		if _, err := m.VolumeBase.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.VolumeQuote.Size()
		i -= size
		if _, err := m.VolumeQuote.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.NetSize.Size()
		i -= size
		if _, err := m.NetSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Pair.Size()
		i -= size
		if _, err := m.Pair.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PegMultiplierUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PegMultiplierUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PegMultiplierUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Cost.Size()
		i -= size
		if _, err := m.Cost.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.NewPeg.Size()
		i -= size
		if _, err := m.NewPeg.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Pair.Size()
		i -= size
		if _, err := m.Pair.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PositionChangedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pair.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.TraderAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = m.Margin.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.PositionNotional.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.ExchangedSize.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.ExchangedNotional.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.TransactionFee.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.PositionSize.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.RealizedPnl.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.UnrealizedPnlAfter.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.BadDebt.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.MarkPrice.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.FundingPayment.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.BlockHeight != 0 {
		n += 1 + sovEvent(uint64(m.BlockHeight))
	}
	if m.BlockTimeMs != 0 {
		n += 1 + sovEvent(uint64(m.BlockTimeMs))
	}
	return n
}

func (m *PositionLiquidatedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pair.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.TraderAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = m.ExchangedQuoteAmount.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.ExchangedPositionSize.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.LiquidatorAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = m.FeeToLiquidator.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.FeeToEcosystemFund.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.BadDebt.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.Margin.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.PositionNotional.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.PositionSize.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.UnrealizedPnl.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.MarkPrice.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.BlockHeight != 0 {
		n += 1 + sovEvent(uint64(m.BlockHeight))
	}
	if m.BlockTimeMs != 0 {
		n += 1 + sovEvent(uint64(m.BlockTimeMs))
	}
	return n
}

func (m *PositionSettledEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pair.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.TraderAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.SettledCoins) > 0 {
		for _, e := range m.SettledCoins {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *FundingRateChangedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pair.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.MarkPrice.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.IndexPrice.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.LatestFundingRate.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.LatestPremiumFraction.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.CumulativePremiumFraction.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.BlockHeight != 0 {
		n += 1 + sovEvent(uint64(m.BlockHeight))
	}
	if m.BlockTimeMs != 0 {
		n += 1 + sovEvent(uint64(m.BlockTimeMs))
	}
	return n
}

func (m *LiquidationFailedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pair.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.Trader)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Liquidator)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Reason != 0 {
		n += 1 + sovEvent(uint64(m.Reason))
	}
	return n
}

func (m *MetricsEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pair.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.NetSize.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.VolumeQuote.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.VolumeBase.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.BlockHeight != 0 {
		n += 1 + sovEvent(uint64(m.BlockHeight))
	}
	if m.BlockTimeMs != 0 {
		n += 1 + sovEvent(uint64(m.BlockTimeMs))
	}
	return n
}

func (m *PegMultiplierUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pair.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.NewPeg.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.Cost.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PositionChangedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionChangedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionChangedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Margin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Margin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionNotional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PositionNotional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangedSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangedSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangedNotional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangedNotional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TransactionFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PositionSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealizedPnl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RealizedPnl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnrealizedPnlAfter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnrealizedPnlAfter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadDebt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BadDebt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarkPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingPayment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FundingPayment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTimeMs", wireType)
			}
			m.BlockTimeMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTimeMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PositionLiquidatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionLiquidatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionLiquidatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangedQuoteAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangedQuoteAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangedPositionSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangedPositionSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeToLiquidator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeToLiquidator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeToEcosystemFund", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeToEcosystemFund.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadDebt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BadDebt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Margin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Margin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionNotional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PositionNotional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PositionSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnrealizedPnl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnrealizedPnl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarkPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTimeMs", wireType)
			}
			m.BlockTimeMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTimeMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PositionSettledEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionSettledEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionSettledEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettledCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettledCoins = append(m.SettledCoins, types.Coin{})
			if err := m.SettledCoins[len(m.SettledCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FundingRateChangedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundingRateChangedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundingRateChangedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarkPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IndexPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestFundingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LatestFundingRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestPremiumFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LatestPremiumFraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativePremiumFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CumulativePremiumFraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTimeMs", wireType)
			}
			m.BlockTimeMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTimeMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidationFailedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidationFailedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidationFailedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Liquidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= LiquidationFailedEvent_LiquidationFailedReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeQuote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VolumeQuote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VolumeBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTimeMs", wireType)
			}
			m.BlockTimeMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTimeMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PegMultiplierUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PegMultiplierUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PegMultiplierUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPeg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewPeg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
