// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: perp/v1/event.proto

package types

import (
	fmt "fmt"
	_ "github.com/NibiruChain/nibiru/x/common"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Emitted when a position changes.
// TODO: Is there a way to split this into different events without creating too much complexity?
type PositionChangedEvent struct {
	// identifier of the corresponding virtual pool for the position
	Pair string `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	// owner of the position.
	TraderAddress string `protobuf:"bytes,2,opt,name=trader_address,json=traderAddress,proto3" json:"trader_address,omitempty"`
	// amount of margin backing the position.
	Margin types.Coin `protobuf:"bytes,3,opt,name=margin,proto3" json:"margin" yaml:"margin"`
	// margin * leverage * vPrice. 'notional' is the virtual size times the virtual price on 'vpool'.
	PositionNotional github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=position_notional,json=positionNotional,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"position_notional"`
	// magnitude of the change to vsize. The vsize is the amount of base assets for the position, margin * leverage * priceBasePerQuote.
	ExchangedPositionSize github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=exchanged_position_size,json=exchangedPositionSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"exchanged_position_size"`
	// transaction fee paid
	TransactionFee types.Coin `protobuf:"bytes,6,opt,name=transaction_fee,json=transactionFee,proto3" json:"transaction_fee" yaml:"transaction_fee"`
	// position virtual size after the change
	PositionSize github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=position_size,json=positionSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"position_size"`
	// realize profits and losses after the change
	RealizedPnl github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=realized_pnl,json=realizedPnl,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"realized_pnl"`
	// unrealized profits and losses after the change
	UnrealizedPnlAfter github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=unrealized_pnl_after,json=unrealizedPnlAfter,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"unrealized_pnl_after"`
	// Amount of bad debt cleared by the PerpEF during the change.
	// Bad debt is negative net margin past the liquidation point of a position.
	BadDebt types.Coin `protobuf:"bytes,10,opt,name=bad_debt,json=badDebt,proto3" json:"bad_debt"`
	// amt of margin (y) lost due to liquidation
	LiquidationPenalty github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=liquidation_penalty,json=liquidationPenalty,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidation_penalty"`
	// Spot price, synonymous with mark price in this context, is the quotient of
	// the quote reserves and base reserves
	SpotPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,12,opt,name=spot_price,json=spotPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"spot_price"`
	// A funding payment made or received by the trader on the current position.
	// 'fundingPayment' is positive if 'owner' is the sender and negative if 'owner'
	// is the receiver of the payment. Its magnitude is abs(vSize * fundingRate).
	// Funding payments act to converge the mark price (vPrice) and index price
	// (average price on major exchanges).
	FundingPayment github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,13,opt,name=funding_payment,json=fundingPayment,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"funding_payment"`
	// The block number at which this position was changed.
	BlockHeight int64 `protobuf:"varint,14,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// The block time in unix milliseconds at which this position was changed.
	BlockTimeMs int64 `protobuf:"varint,15,opt,name=block_time_ms,json=blockTimeMs,proto3" json:"block_time_ms,omitempty"`
}

func (m *PositionChangedEvent) Reset()         { *m = PositionChangedEvent{} }
func (m *PositionChangedEvent) String() string { return proto.CompactTextString(m) }
func (*PositionChangedEvent) ProtoMessage()    {}
func (*PositionChangedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b7f9ebcf2fdb5b, []int{0}
}
func (m *PositionChangedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionChangedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionChangedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionChangedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionChangedEvent.Merge(m, src)
}
func (m *PositionChangedEvent) XXX_Size() int {
	return m.Size()
}
func (m *PositionChangedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionChangedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_PositionChangedEvent proto.InternalMessageInfo

func (m *PositionChangedEvent) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *PositionChangedEvent) GetTraderAddress() string {
	if m != nil {
		return m.TraderAddress
	}
	return ""
}

func (m *PositionChangedEvent) GetMargin() types.Coin {
	if m != nil {
		return m.Margin
	}
	return types.Coin{}
}

func (m *PositionChangedEvent) GetTransactionFee() types.Coin {
	if m != nil {
		return m.TransactionFee
	}
	return types.Coin{}
}

func (m *PositionChangedEvent) GetBadDebt() types.Coin {
	if m != nil {
		return m.BadDebt
	}
	return types.Coin{}
}

func (m *PositionChangedEvent) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *PositionChangedEvent) GetBlockTimeMs() int64 {
	if m != nil {
		return m.BlockTimeMs
	}
	return 0
}

// Emitted when a position is liquidated.
type PositionLiquidatedEvent struct {
	// identifier of the corresponding virtual pool for the position
	Pair string `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	// owner of the position.
	TraderAddress string `protobuf:"bytes,2,opt,name=trader_address,json=traderAddress,proto3" json:"trader_address,omitempty"`
	// margin * leverage * vPrice. 'notional' is the virtual size times  the virtual price on 'vpool'.
	ExchangedQuoteAmount github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=exchanged_quote_amount,json=exchangedQuoteAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"exchanged_quote_amount"`
	// virtual amount of base assets for the position, which would be margin * leverage * priceBasePerQuote.
	ExchangedPositionSize github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=exchanged_position_size,json=exchangedPositionSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"exchanged_position_size"`
	// Address of the account that executed the tx.
	LiquidatorAddress string `protobuf:"bytes,5,opt,name=liquidator_address,json=liquidatorAddress,proto3" json:"liquidator_address,omitempty"`
	// Commission (in margin units) received by 'liquidator'.
	FeeToLiquidator types.Coin `protobuf:"bytes,6,opt,name=fee_to_liquidator,json=feeToLiquidator,proto3" json:"fee_to_liquidator" yaml:"fee_to_liquidator"`
	// Commission (in margin units) given to the ecosystem fund.
	FeeToEcosystemFund types.Coin `protobuf:"bytes,7,opt,name=fee_to_ecosystem_fund,json=feeToEcosystemFund,proto3" json:"fee_to_ecosystem_fund" yaml:"fee_to_ecosystem_fund"`
	//  Bad debt (margin units) cleared by the PerpEF during the tx. Bad debt is negative net margin past the liquidation point of a position.
	BadDebt types.Coin `protobuf:"bytes,8,opt,name=bad_debt,json=badDebt,proto3" json:"bad_debt"`
	// Remaining margin in the position after liquidation
	Margin types.Coin `protobuf:"bytes,9,opt,name=margin,proto3" json:"margin" yaml:"margin"`
	// Remaining position notional in the position after liquidation
	PositionNotional github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=position_notional,json=positionNotional,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"position_notional"`
	// Remaining position size in the position after liquidation
	PositionSize github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=position_size,json=positionSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"position_size"`
	// Unrealized PnL in the position after liquidation
	UnrealizedPnl github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,12,opt,name=unrealizedPnl,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"unrealizedPnl"`
	// Spot price of the vAMM after liquidation
	MarkPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,13,opt,name=mark_price,json=markPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"mark_price"`
	// The block number at which this liquidation occured.
	BlockHeight int64 `protobuf:"varint,14,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// The unix timestamp in milliseconds at which this liquidation occured.
	BlockTimeMs int64 `protobuf:"varint,15,opt,name=block_time_ms,json=blockTimeMs,proto3" json:"block_time_ms,omitempty"`
}

func (m *PositionLiquidatedEvent) Reset()         { *m = PositionLiquidatedEvent{} }
func (m *PositionLiquidatedEvent) String() string { return proto.CompactTextString(m) }
func (*PositionLiquidatedEvent) ProtoMessage()    {}
func (*PositionLiquidatedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b7f9ebcf2fdb5b, []int{1}
}
func (m *PositionLiquidatedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionLiquidatedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionLiquidatedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionLiquidatedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionLiquidatedEvent.Merge(m, src)
}
func (m *PositionLiquidatedEvent) XXX_Size() int {
	return m.Size()
}
func (m *PositionLiquidatedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionLiquidatedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_PositionLiquidatedEvent proto.InternalMessageInfo

func (m *PositionLiquidatedEvent) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *PositionLiquidatedEvent) GetTraderAddress() string {
	if m != nil {
		return m.TraderAddress
	}
	return ""
}

func (m *PositionLiquidatedEvent) GetLiquidatorAddress() string {
	if m != nil {
		return m.LiquidatorAddress
	}
	return ""
}

func (m *PositionLiquidatedEvent) GetFeeToLiquidator() types.Coin {
	if m != nil {
		return m.FeeToLiquidator
	}
	return types.Coin{}
}

func (m *PositionLiquidatedEvent) GetFeeToEcosystemFund() types.Coin {
	if m != nil {
		return m.FeeToEcosystemFund
	}
	return types.Coin{}
}

func (m *PositionLiquidatedEvent) GetBadDebt() types.Coin {
	if m != nil {
		return m.BadDebt
	}
	return types.Coin{}
}

func (m *PositionLiquidatedEvent) GetMargin() types.Coin {
	if m != nil {
		return m.Margin
	}
	return types.Coin{}
}

func (m *PositionLiquidatedEvent) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *PositionLiquidatedEvent) GetBlockTimeMs() int64 {
	if m != nil {
		return m.BlockTimeMs
	}
	return 0
}

// Emitted when a position is settled.
type PositionSettledEvent struct {
	// Identifier for the virtual pool of the position.
	Pair string `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	// Owner of the position.
	TraderAddress string `protobuf:"bytes,2,opt,name=trader_address,json=traderAddress,proto3" json:"trader_address,omitempty"`
	// Settled coin as dictated by the settlement price of the vpool.
	SettledCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=settled_coins,json=settledCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"settled_coins" yaml:"settled_coins"`
}

func (m *PositionSettledEvent) Reset()         { *m = PositionSettledEvent{} }
func (m *PositionSettledEvent) String() string { return proto.CompactTextString(m) }
func (*PositionSettledEvent) ProtoMessage()    {}
func (*PositionSettledEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b7f9ebcf2fdb5b, []int{2}
}
func (m *PositionSettledEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionSettledEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionSettledEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionSettledEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionSettledEvent.Merge(m, src)
}
func (m *PositionSettledEvent) XXX_Size() int {
	return m.Size()
}
func (m *PositionSettledEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionSettledEvent.DiscardUnknown(m)
}

var xxx_messageInfo_PositionSettledEvent proto.InternalMessageInfo

func (m *PositionSettledEvent) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *PositionSettledEvent) GetTraderAddress() string {
	if m != nil {
		return m.TraderAddress
	}
	return ""
}

func (m *PositionSettledEvent) GetSettledCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.SettledCoins
	}
	return nil
}

// Emitted when a new funding rate is calculated.
type FundingRateChangedEvent struct {
	// The pair for which the funding rate was calculated.
	Pair string `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	// The mark price of the pair.
	MarkPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=mark_price,json=markPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"mark_price"`
	// The oracle index price of the pair.
	IndexPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=index_price,json=indexPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"index_price"`
	// The latest funding rate.
	LatestFundingRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=latest_funding_rate,json=latestFundingRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"latest_funding_rate"`
	// The latest cumulative funding rate.
	// The funding rate a position will pay is the difference between this value
	// and the latest cumulative funding rate on the position.
	CumulativeFundingRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=cumulative_funding_rate,json=cumulativeFundingRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"cumulative_funding_rate"`
	// The block number at which the funding rate was calculated.
	BlockHeight int64 `protobuf:"varint,6,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// The block time in unix milliseconds at which the funding rate was calculated.
	BlockTimeMs int64 `protobuf:"varint,7,opt,name=block_time_ms,json=blockTimeMs,proto3" json:"block_time_ms,omitempty"`
}

func (m *FundingRateChangedEvent) Reset()         { *m = FundingRateChangedEvent{} }
func (m *FundingRateChangedEvent) String() string { return proto.CompactTextString(m) }
func (*FundingRateChangedEvent) ProtoMessage()    {}
func (*FundingRateChangedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b7f9ebcf2fdb5b, []int{3}
}
func (m *FundingRateChangedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FundingRateChangedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FundingRateChangedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FundingRateChangedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundingRateChangedEvent.Merge(m, src)
}
func (m *FundingRateChangedEvent) XXX_Size() int {
	return m.Size()
}
func (m *FundingRateChangedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_FundingRateChangedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_FundingRateChangedEvent proto.InternalMessageInfo

func (m *FundingRateChangedEvent) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *FundingRateChangedEvent) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *FundingRateChangedEvent) GetBlockTimeMs() int64 {
	if m != nil {
		return m.BlockTimeMs
	}
	return 0
}

func init() {
	proto.RegisterType((*PositionChangedEvent)(nil), "nibiru.perp.v1.PositionChangedEvent")
	proto.RegisterType((*PositionLiquidatedEvent)(nil), "nibiru.perp.v1.PositionLiquidatedEvent")
	proto.RegisterType((*PositionSettledEvent)(nil), "nibiru.perp.v1.PositionSettledEvent")
	proto.RegisterType((*FundingRateChangedEvent)(nil), "nibiru.perp.v1.FundingRateChangedEvent")
}

func init() { proto.RegisterFile("perp/v1/event.proto", fileDescriptor_19b7f9ebcf2fdb5b) }

var fileDescriptor_19b7f9ebcf2fdb5b = []byte{
	// 955 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x97, 0xdf, 0x6e, 0xdb, 0xb6,
	0x17, 0xc7, 0xe3, 0x26, 0xbf, 0xc4, 0xa6, 0xff, 0xe4, 0x17, 0xc6, 0x69, 0xb4, 0xa2, 0x70, 0x3c,
	0x61, 0x1b, 0x82, 0x01, 0x95, 0x90, 0xed, 0xae, 0x77, 0xf9, 0xd3, 0x20, 0x17, 0x6d, 0xe7, 0x2a,
	0x01, 0x06, 0x6c, 0xc0, 0x34, 0x4a, 0x3a, 0x96, 0x89, 0x48, 0xa4, 0x2a, 0x52, 0x46, 0x9c, 0x27,
	0xd8, 0xe5, 0x9e, 0x63, 0x4f, 0xd2, 0xcb, 0x62, 0x57, 0x43, 0x51, 0x64, 0x43, 0xf2, 0x06, 0x7b,
	0x82, 0x81, 0xa2, 0xfc, 0xaf, 0x01, 0x92, 0x56, 0xf3, 0xae, 0x64, 0x9f, 0x43, 0x7e, 0xce, 0xe1,
	0xd1, 0xe1, 0x97, 0x14, 0xda, 0x4c, 0x20, 0x4d, 0xec, 0xe1, 0x9e, 0x0d, 0x43, 0x60, 0xd2, 0x4a,
	0x52, 0x2e, 0x39, 0x6e, 0x31, 0xea, 0xd1, 0x34, 0xb3, 0x94, 0xcf, 0x1a, 0xee, 0x3d, 0x6a, 0x87,
	0x3c, 0xe4, 0xb9, 0xcb, 0x56, 0xbf, 0xf4, 0xa8, 0x47, 0x8f, 0x43, 0xce, 0xc3, 0x08, 0x6c, 0x92,
	0x50, 0x9b, 0x30, 0xc6, 0x25, 0x91, 0x94, 0x33, 0x51, 0x78, 0x3b, 0x3e, 0x17, 0x31, 0x17, 0xb6,
	0x47, 0x04, 0xd8, 0xc3, 0x3d, 0x0f, 0x24, 0xd9, 0xb3, 0x7d, 0x4e, 0x59, 0xe1, 0xdf, 0xf4, 0x79,
	0x1c, 0x73, 0x66, 0xeb, 0xc7, 0xd8, 0x38, 0xce, 0x46, 0x48, 0x22, 0x41, 0x1b, 0xcd, 0x77, 0x55,
	0xd4, 0xee, 0x71, 0x41, 0x15, 0xfd, 0x70, 0x40, 0x58, 0x08, 0xc1, 0x33, 0x95, 0x2c, 0xc6, 0x68,
	0x25, 0x21, 0x34, 0x35, 0x2a, 0xdd, 0xca, 0x6e, 0xcd, 0xc9, 0x7f, 0xe3, 0x2f, 0x51, 0x4b, 0xa6,
	0x24, 0x80, 0xd4, 0x25, 0x41, 0x90, 0x82, 0x10, 0xc6, 0x83, 0xdc, 0xdb, 0xd4, 0xd6, 0x7d, 0x6d,
	0xc4, 0x27, 0x68, 0x35, 0x26, 0x69, 0x48, 0x99, 0xb1, 0xdc, 0xad, 0xec, 0xd6, 0xbf, 0xf9, 0xcc,
	0xd2, 0xe9, 0x5a, 0x2a, 0x5d, 0xab, 0x48, 0xd7, 0x3a, 0xe4, 0x94, 0x1d, 0x6c, 0xbd, 0xb9, 0xda,
	0x59, 0xfa, 0xfb, 0x6a, 0xa7, 0x39, 0x22, 0x71, 0xf4, 0xd4, 0xd4, 0xd3, 0x4c, 0xa7, 0x98, 0x8f,
	0x7f, 0x44, 0x1b, 0x49, 0x91, 0x9c, 0xcb, 0xb8, 0x7a, 0x90, 0xc8, 0x58, 0x51, 0x31, 0x0f, 0x2c,
	0x35, 0xf3, 0xdd, 0xd5, 0xce, 0x57, 0x21, 0x95, 0x83, 0xcc, 0xb3, 0x7c, 0x1e, 0xdb, 0x45, 0x55,
	0xf4, 0xe3, 0x89, 0x08, 0xce, 0x6d, 0x39, 0x4a, 0x40, 0x58, 0x47, 0xe0, 0x3b, 0xff, 0x1f, 0x83,
	0x5e, 0x16, 0x1c, 0xdc, 0x47, 0xdb, 0x70, 0xe1, 0xeb, 0x35, 0xbb, 0x93, 0x30, 0x82, 0x5e, 0x82,
	0xf1, 0xbf, 0x52, 0x21, 0xb6, 0x26, 0xb8, 0x71, 0x45, 0x4f, 0xe9, 0x25, 0x60, 0x0f, 0xad, 0xcb,
	0x94, 0x30, 0x41, 0xfc, 0x3c, 0x40, 0x1f, 0xc0, 0x58, 0xbd, 0xaf, 0x2e, 0x9d, 0xa2, 0x2e, 0x0f,
	0x75, 0x5d, 0x3e, 0x98, 0x6f, 0x3a, 0xad, 0x19, 0xcb, 0x31, 0x00, 0x3e, 0x45, 0xcd, 0xf9, 0x15,
	0xac, 0x95, 0x5a, 0x41, 0x23, 0x99, 0x4d, 0xfc, 0x15, 0x6a, 0xa4, 0x40, 0x22, 0x7a, 0xa9, 0xea,
	0xc3, 0x22, 0xa3, 0x5a, 0x8a, 0x59, 0x1f, 0x33, 0x7a, 0x2c, 0xc2, 0x3f, 0xa3, 0x76, 0xc6, 0x66,
	0xa1, 0x2e, 0xe9, 0x4b, 0x48, 0x8d, 0x5a, 0x29, 0x34, 0x9e, 0xb2, 0x7a, 0x2c, 0xda, 0x57, 0x24,
	0xfc, 0x14, 0x55, 0x3d, 0x12, 0xb8, 0x01, 0x78, 0xd2, 0x40, 0xf7, 0x95, 0x79, 0x45, 0x05, 0x74,
	0xd6, 0x3c, 0x12, 0x1c, 0x81, 0x27, 0xb1, 0x8b, 0x36, 0x23, 0xfa, 0x3a, 0xa3, 0x41, 0xbe, 0xd9,
	0xdc, 0x04, 0x18, 0x89, 0xe4, 0xc8, 0xa8, 0x97, 0x4b, 0x6e, 0x06, 0xd5, 0xd3, 0x24, 0xfc, 0x02,
	0x21, 0x91, 0x70, 0xe9, 0x26, 0x29, 0xf5, 0xc1, 0x68, 0x94, 0xe2, 0xd6, 0x14, 0xa1, 0xa7, 0x00,
	0xf8, 0x7b, 0xb4, 0xde, 0xcf, 0x58, 0x40, 0x59, 0xe8, 0x26, 0x64, 0x14, 0x03, 0x93, 0x46, 0xb3,
	0x14, 0xb3, 0x55, 0x60, 0x7a, 0x9a, 0x82, 0x3f, 0x47, 0x0d, 0x2f, 0xe2, 0xfe, 0xb9, 0x3b, 0x00,
	0x1a, 0x0e, 0xa4, 0xd1, 0xea, 0x56, 0x76, 0x97, 0x9d, 0x7a, 0x6e, 0x3b, 0xc9, 0x4d, 0xd8, 0x44,
	0x4d, 0x3d, 0x44, 0xd2, 0x18, 0xdc, 0x58, 0x18, 0xeb, 0x33, 0x63, 0xce, 0x68, 0x0c, 0x2f, 0x84,
	0xf9, 0x7b, 0x15, 0x6d, 0x8f, 0xb7, 0xc2, 0xf3, 0xa2, 0x1a, 0x0b, 0xd0, 0x97, 0x00, 0x3d, 0x9c,
	0x6e, 0xdc, 0xd7, 0x19, 0x97, 0xe0, 0x92, 0x98, 0x67, 0x4c, 0xe6, 0x7a, 0xf3, 0xe9, 0xab, 0x6f,
	0x4f, 0x68, 0xaf, 0x14, 0x6c, 0x3f, 0x67, 0xdd, 0x25, 0x0f, 0x2b, 0x8b, 0x94, 0x87, 0x27, 0x68,
	0xd2, 0x29, 0x7c, 0xba, 0xf0, 0x5c, 0x81, 0x9c, 0x8d, 0xa9, 0x67, 0xbc, 0xf8, 0x10, 0x6d, 0xf4,
	0x01, 0x5c, 0xc9, 0xdd, 0xa9, 0xef, 0x7e, 0x3d, 0xe9, 0x16, 0x7a, 0x62, 0x68, 0x3d, 0xb9, 0x45,
	0x30, 0x9d, 0xf5, 0x3e, 0xc0, 0x19, 0x7f, 0x3e, 0xb1, 0xe0, 0x14, 0x6d, 0x15, 0xc3, 0xc0, 0xe7,
	0x62, 0x24, 0x24, 0xc4, 0xae, 0x6a, 0x93, 0x5c, 0x5a, 0xee, 0x0c, 0xf6, 0x45, 0x11, 0xec, 0xf1,
	0x5c, 0xb0, 0x79, 0x8a, 0xe9, 0xe0, 0x3c, 0xe0, 0xb3, 0xb1, 0xf5, 0x38, 0x63, 0xc1, 0xdc, 0xe6,
	0xad, 0x7e, 0xe2, 0xe6, 0x9d, 0x9e, 0x3a, 0xb5, 0xff, 0xe2, 0xd4, 0x41, 0x0b, 0x3a, 0x75, 0x6e,
	0x29, 0x75, 0x7d, 0x01, 0x4a, 0x7d, 0x86, 0x9a, 0x73, 0x52, 0x58, 0x52, 0x5a, 0xe6, 0x21, 0x4a,
	0xad, 0x62, 0x92, 0x9e, 0x17, 0x6a, 0x55, 0x4e, 0x59, 0x6a, 0x8a, 0xa0, 0xd5, 0x6a, 0x41, 0xa2,
	0xf2, 0xbe, 0x32, 0xbd, 0xb1, 0x9c, 0x82, 0x94, 0xd1, 0x02, 0x14, 0xe5, 0x97, 0x0a, 0x6a, 0x0a,
	0xcd, 0x72, 0xd5, 0x35, 0x4a, 0x18, 0xcb, 0xdd, 0xe5, 0xbb, 0x7b, 0xe8, 0xa4, 0xe8, 0xa1, 0xb6,
	0xee, 0xa1, 0xb9, 0xd9, 0xe6, 0x6f, 0x7f, 0xee, 0xec, 0x7e, 0x44, 0x81, 0x14, 0x48, 0x38, 0x8d,
	0x62, 0x6e, 0xfe, 0xcf, 0x7c, 0xbf, 0x8c, 0xb6, 0x8f, 0xb5, 0x1a, 0x3b, 0x44, 0xc2, 0xbd, 0x77,
	0xb2, 0xf9, 0x97, 0xf4, 0xe0, 0xdf, 0xbe, 0xa4, 0xef, 0x50, 0x9d, 0xb2, 0x00, 0x2e, 0x0a, 0x5e,
	0x39, 0x41, 0x45, 0x39, 0x42, 0x03, 0x7f, 0x42, 0x9b, 0x11, 0x91, 0x20, 0xa4, 0x3b, 0x3e, 0xaa,
	0x52, 0x22, 0xcb, 0x4a, 0xe8, 0x86, 0x46, 0xcd, 0xd4, 0x47, 0xc9, 0xb4, 0x9f, 0xc5, 0x59, 0x44,
	0x24, 0x1d, 0xc2, 0x7c, 0x8c, 0x92, 0xb7, 0xb8, 0x29, 0x6e, 0x36, 0xce, 0x87, 0xdd, 0xbb, 0xfa,
	0x11, 0xdd, 0xbb, 0x76, 0xab, 0x7b, 0x0f, 0x8e, 0xde, 0x5c, 0x77, 0x2a, 0x6f, 0xaf, 0x3b, 0x95,
	0xbf, 0xae, 0x3b, 0x95, 0x5f, 0x6f, 0x3a, 0x4b, 0x6f, 0x6f, 0x3a, 0x4b, 0x7f, 0xdc, 0x74, 0x96,
	0x7e, 0xf8, 0x7a, 0x26, 0xbf, 0x97, 0xf9, 0x27, 0xc2, 0xe1, 0x80, 0x50, 0x66, 0xeb, 0xcf, 0x05,
	0xfb, 0xc2, 0xce, 0xaf, 0xef, 0x79, 0x9e, 0xde, 0x6a, 0x7e, 0x79, 0xff, 0xf6, 0x9f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xda, 0xc9, 0x27, 0x54, 0x61, 0x0c, 0x00, 0x00,
}

func (m *PositionChangedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionChangedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PositionChangedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockTimeMs != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BlockTimeMs))
		i--
		dAtA[i] = 0x78
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x70
	}
	{
		size := m.FundingPayment.Size()
		i -= size
		if _, err := m.FundingPayment.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.SpotPrice.Size()
		i -= size
		if _, err := m.SpotPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.LiquidationPenalty.Size()
		i -= size
		if _, err := m.LiquidationPenalty.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size, err := m.BadDebt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.UnrealizedPnlAfter.Size()
		i -= size
		if _, err := m.UnrealizedPnlAfter.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.RealizedPnl.Size()
		i -= size
		if _, err := m.RealizedPnl.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.PositionSize.Size()
		i -= size
		if _, err := m.PositionSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.TransactionFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.ExchangedPositionSize.Size()
		i -= size
		if _, err := m.ExchangedPositionSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.PositionNotional.Size()
		i -= size
		if _, err := m.PositionNotional.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Margin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.TraderAddress) > 0 {
		i -= len(m.TraderAddress)
		copy(dAtA[i:], m.TraderAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.TraderAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pair) > 0 {
		i -= len(m.Pair)
		copy(dAtA[i:], m.Pair)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Pair)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PositionLiquidatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionLiquidatedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PositionLiquidatedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockTimeMs != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BlockTimeMs))
		i--
		dAtA[i] = 0x78
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x70
	}
	{
		size := m.MarkPrice.Size()
		i -= size
		if _, err := m.MarkPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.UnrealizedPnl.Size()
		i -= size
		if _, err := m.UnrealizedPnl.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.PositionSize.Size()
		i -= size
		if _, err := m.PositionSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.PositionNotional.Size()
		i -= size
		if _, err := m.PositionNotional.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size, err := m.Margin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.BadDebt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.FeeToEcosystemFund.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.FeeToLiquidator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.LiquidatorAddress) > 0 {
		i -= len(m.LiquidatorAddress)
		copy(dAtA[i:], m.LiquidatorAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.LiquidatorAddress)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.ExchangedPositionSize.Size()
		i -= size
		if _, err := m.ExchangedPositionSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.ExchangedQuoteAmount.Size()
		i -= size
		if _, err := m.ExchangedQuoteAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.TraderAddress) > 0 {
		i -= len(m.TraderAddress)
		copy(dAtA[i:], m.TraderAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.TraderAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pair) > 0 {
		i -= len(m.Pair)
		copy(dAtA[i:], m.Pair)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Pair)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PositionSettledEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionSettledEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PositionSettledEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SettledCoins) > 0 {
		for iNdEx := len(m.SettledCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SettledCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TraderAddress) > 0 {
		i -= len(m.TraderAddress)
		copy(dAtA[i:], m.TraderAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.TraderAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pair) > 0 {
		i -= len(m.Pair)
		copy(dAtA[i:], m.Pair)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Pair)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FundingRateChangedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FundingRateChangedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FundingRateChangedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockTimeMs != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BlockTimeMs))
		i--
		dAtA[i] = 0x38
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.CumulativeFundingRate.Size()
		i -= size
		if _, err := m.CumulativeFundingRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.LatestFundingRate.Size()
		i -= size
		if _, err := m.LatestFundingRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.IndexPrice.Size()
		i -= size
		if _, err := m.IndexPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.MarkPrice.Size()
		i -= size
		if _, err := m.MarkPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Pair) > 0 {
		i -= len(m.Pair)
		copy(dAtA[i:], m.Pair)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Pair)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PositionChangedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pair)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.TraderAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = m.Margin.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.PositionNotional.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.ExchangedPositionSize.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.TransactionFee.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.PositionSize.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.RealizedPnl.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.UnrealizedPnlAfter.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.BadDebt.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.LiquidationPenalty.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.SpotPrice.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.FundingPayment.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.BlockHeight != 0 {
		n += 1 + sovEvent(uint64(m.BlockHeight))
	}
	if m.BlockTimeMs != 0 {
		n += 1 + sovEvent(uint64(m.BlockTimeMs))
	}
	return n
}

func (m *PositionLiquidatedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pair)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.TraderAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = m.ExchangedQuoteAmount.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.ExchangedPositionSize.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.LiquidatorAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = m.FeeToLiquidator.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.FeeToEcosystemFund.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.BadDebt.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.Margin.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.PositionNotional.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.PositionSize.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.UnrealizedPnl.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.MarkPrice.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.BlockHeight != 0 {
		n += 1 + sovEvent(uint64(m.BlockHeight))
	}
	if m.BlockTimeMs != 0 {
		n += 1 + sovEvent(uint64(m.BlockTimeMs))
	}
	return n
}

func (m *PositionSettledEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pair)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.TraderAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.SettledCoins) > 0 {
		for _, e := range m.SettledCoins {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *FundingRateChangedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pair)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = m.MarkPrice.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.IndexPrice.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.LatestFundingRate.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.CumulativeFundingRate.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.BlockHeight != 0 {
		n += 1 + sovEvent(uint64(m.BlockHeight))
	}
	if m.BlockTimeMs != 0 {
		n += 1 + sovEvent(uint64(m.BlockTimeMs))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PositionChangedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionChangedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionChangedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Margin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Margin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionNotional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PositionNotional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangedPositionSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangedPositionSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TransactionFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PositionSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealizedPnl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RealizedPnl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnrealizedPnlAfter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnrealizedPnlAfter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadDebt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BadDebt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationPenalty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationPenalty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpotPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpotPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingPayment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FundingPayment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTimeMs", wireType)
			}
			m.BlockTimeMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTimeMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PositionLiquidatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionLiquidatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionLiquidatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangedQuoteAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangedQuoteAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangedPositionSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangedPositionSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeToLiquidator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeToLiquidator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeToEcosystemFund", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeToEcosystemFund.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadDebt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BadDebt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Margin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Margin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionNotional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PositionNotional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PositionSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnrealizedPnl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnrealizedPnl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarkPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTimeMs", wireType)
			}
			m.BlockTimeMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTimeMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PositionSettledEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionSettledEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionSettledEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettledCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettledCoins = append(m.SettledCoins, types.Coin{})
			if err := m.SettledCoins[len(m.SettledCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FundingRateChangedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundingRateChangedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundingRateChangedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarkPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IndexPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestFundingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LatestFundingRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeFundingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CumulativeFundingRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTimeMs", wireType)
			}
			m.BlockTimeMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTimeMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
