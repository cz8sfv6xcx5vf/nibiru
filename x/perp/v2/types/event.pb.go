// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nibiru/perp/v2/event.proto

package types

import (
	fmt "fmt"
	github_com_NibiruChain_nibiru_x_common_asset "github.com/NibiruChain/nibiru/x/common/asset"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LiquidationFailedEvent_LiquidationFailedReason int32

const (
	LiquidationFailedEvent_UNSPECIFIED LiquidationFailedEvent_LiquidationFailedReason = 0
	// the position is healthy and does not need to be liquidated.
	LiquidationFailedEvent_POSITION_HEALTHY LiquidationFailedEvent_LiquidationFailedReason = 1
	// the pair does not exist.
	LiquidationFailedEvent_NONEXISTENT_PAIR LiquidationFailedEvent_LiquidationFailedReason = 2
	// the position does not exist.
	LiquidationFailedEvent_NONEXISTENT_POSITION LiquidationFailedEvent_LiquidationFailedReason = 3
)

var LiquidationFailedEvent_LiquidationFailedReason_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "POSITION_HEALTHY",
	2: "NONEXISTENT_PAIR",
	3: "NONEXISTENT_POSITION",
}

var LiquidationFailedEvent_LiquidationFailedReason_value = map[string]int32{
	"UNSPECIFIED":          0,
	"POSITION_HEALTHY":     1,
	"NONEXISTENT_PAIR":     2,
	"NONEXISTENT_POSITION": 3,
}

func (x LiquidationFailedEvent_LiquidationFailedReason) String() string {
	return proto.EnumName(LiquidationFailedEvent_LiquidationFailedReason_name, int32(x))
}

func (LiquidationFailedEvent_LiquidationFailedReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a5313bbc89fa31dd, []int{4, 0}
}

// Emitted when a position changes.
type PositionChangedEvent struct {
	FinalPosition Position `protobuf:"bytes,1,opt,name=final_position,json=finalPosition,proto3" json:"final_position"`
	// Position notional (in quote units) after the change. In general,
	// 'notional = baseAmount * priceQuotePerBase', where size is the baseAmount.
	PositionNotional github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=position_notional,json=positionNotional,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"position_notional"`
	// Transaction fee paid. A "taker" fee.
	TransactionFee types.Coin `protobuf:"bytes,3,opt,name=transaction_fee,json=transactionFee,proto3" json:"transaction_fee" yaml:"transaction_fee"`
	// realize profits and losses after the change
	RealizedPnl github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=realized_pnl,json=realizedPnl,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"realized_pnl"`
	// Amount of bad debt cleared by the PerpEF during the change.
	// Bad debt is negative net margin past the liquidation point of a position.
	BadDebt types.Coin `protobuf:"bytes,5,opt,name=bad_debt,json=badDebt,proto3" json:"bad_debt"`
	// A funding payment made or received by the trader on the current position.
	//'fundingPayment' is positive if 'owner' is the sender and negative if 'owner'
	//is the receiver of the payment. Its magnitude is abs(size * fundingRate).
	//Funding payments act to converge the mark price and index price
	//(average price on major exchanges).
	FundingPayment github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=funding_payment,json=fundingPayment,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"funding_payment"`
	// The block number at which this position was changed.
	BlockHeight int64 `protobuf:"varint,7,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// margin_to_user is the amount of collateral received by the trader during
	// the position change. A positve value indicates that the trader received
	// funds, while a negative value indicates that the trader spent funds.
	MarginToUser github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=margin_to_user,json=marginToUser,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"margin_to_user"`
	// change_reason describes the reason for why the position resulted in a
	// change. Change type can take the following values:
	//
	// - CHANGE_REASON_UNSPECIFIED: Unspecified change reason.
	// - CHANGE_REASON_ADD_MARGIN: Margin was added to the position.
	// - CHANGE_REASON_REMOVE_MARGIN: Margin was removed from the position.
	// - CHANGE_REASON_OPEN_POSITION: A new position was opened.
	// - CHANGE_REASON_CLOSE_POSITION: An existing position was closed.
	ChangeReason ChangeReason `protobuf:"bytes,9,opt,name=change_reason,json=changeReason,proto3,customtype=ChangeReason" json:"change_reason"`
	// exchanged_size represent the change in size for an existing position
	// after the change. A positive value indicates that the position size
	// increased, while a negative value indicates that the position size
	// decreased.
	ExchangedSize github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=exchanged_size,json=exchangedSize,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"exchanged_size"`
	// exchanged_notional represent the change in notional for an existing
	// position after the change. A positive value indicates that the position
	// notional increased, while a negative value indicates that the position
	// notional decreased.
	ExchangedNotional github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=exchanged_notional,json=exchangedNotional,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"exchanged_notional"`
}

func (m *PositionChangedEvent) Reset()         { *m = PositionChangedEvent{} }
func (m *PositionChangedEvent) String() string { return proto.CompactTextString(m) }
func (*PositionChangedEvent) ProtoMessage()    {}
func (*PositionChangedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5313bbc89fa31dd, []int{0}
}
func (m *PositionChangedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionChangedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionChangedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionChangedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionChangedEvent.Merge(m, src)
}
func (m *PositionChangedEvent) XXX_Size() int {
	return m.Size()
}
func (m *PositionChangedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionChangedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_PositionChangedEvent proto.InternalMessageInfo

func (m *PositionChangedEvent) GetFinalPosition() Position {
	if m != nil {
		return m.FinalPosition
	}
	return Position{}
}

func (m *PositionChangedEvent) GetTransactionFee() types.Coin {
	if m != nil {
		return m.TransactionFee
	}
	return types.Coin{}
}

func (m *PositionChangedEvent) GetBadDebt() types.Coin {
	if m != nil {
		return m.BadDebt
	}
	return types.Coin{}
}

func (m *PositionChangedEvent) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// Emitted when a position is liquidated. Wraps a PositionChanged event since a
// liquidation causes position changes.
type PositionLiquidatedEvent struct {
	PositionChangedEvent PositionChangedEvent `protobuf:"bytes,1,opt,name=position_changed_event,json=positionChangedEvent,proto3" json:"position_changed_event"`
	// Address of the account that executed the tx.
	LiquidatorAddress string `protobuf:"bytes,2,opt,name=liquidator_address,json=liquidatorAddress,proto3" json:"liquidator_address,omitempty"`
	// Commission (in margin units) received by 'liquidator'.
	FeeToLiquidator types.Coin `protobuf:"bytes,3,opt,name=fee_to_liquidator,json=feeToLiquidator,proto3" json:"fee_to_liquidator" yaml:"fee_to_liquidator"`
	// Commission (in margin units) given to the ecosystem fund.
	FeeToEcosystemFund types.Coin `protobuf:"bytes,4,opt,name=fee_to_ecosystem_fund,json=feeToEcosystemFund,proto3" json:"fee_to_ecosystem_fund" yaml:"fee_to_ecosystem_fund"`
}

func (m *PositionLiquidatedEvent) Reset()         { *m = PositionLiquidatedEvent{} }
func (m *PositionLiquidatedEvent) String() string { return proto.CompactTextString(m) }
func (*PositionLiquidatedEvent) ProtoMessage()    {}
func (*PositionLiquidatedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5313bbc89fa31dd, []int{1}
}
func (m *PositionLiquidatedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionLiquidatedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionLiquidatedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionLiquidatedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionLiquidatedEvent.Merge(m, src)
}
func (m *PositionLiquidatedEvent) XXX_Size() int {
	return m.Size()
}
func (m *PositionLiquidatedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionLiquidatedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_PositionLiquidatedEvent proto.InternalMessageInfo

func (m *PositionLiquidatedEvent) GetPositionChangedEvent() PositionChangedEvent {
	if m != nil {
		return m.PositionChangedEvent
	}
	return PositionChangedEvent{}
}

func (m *PositionLiquidatedEvent) GetLiquidatorAddress() string {
	if m != nil {
		return m.LiquidatorAddress
	}
	return ""
}

func (m *PositionLiquidatedEvent) GetFeeToLiquidator() types.Coin {
	if m != nil {
		return m.FeeToLiquidator
	}
	return types.Coin{}
}

func (m *PositionLiquidatedEvent) GetFeeToEcosystemFund() types.Coin {
	if m != nil {
		return m.FeeToEcosystemFund
	}
	return types.Coin{}
}

// Emitted when a position is settled.
type PositionSettledEvent struct {
	// Identifier for the virtual pool of the position.
	Pair github_com_NibiruChain_nibiru_x_common_asset.Pair `protobuf:"bytes,1,opt,name=pair,proto3,customtype=github.com/NibiruChain/nibiru/x/common/asset.Pair" json:"pair"`
	// Owner of the position.
	TraderAddress string `protobuf:"bytes,2,opt,name=trader_address,json=traderAddress,proto3" json:"trader_address,omitempty"`
	// Settled coin as dictated by the settlement price of the perp.amm.
	SettledCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=settled_coins,json=settledCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"settled_coins" yaml:"settled_coins"`
}

func (m *PositionSettledEvent) Reset()         { *m = PositionSettledEvent{} }
func (m *PositionSettledEvent) String() string { return proto.CompactTextString(m) }
func (*PositionSettledEvent) ProtoMessage()    {}
func (*PositionSettledEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5313bbc89fa31dd, []int{2}
}
func (m *PositionSettledEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionSettledEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionSettledEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionSettledEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionSettledEvent.Merge(m, src)
}
func (m *PositionSettledEvent) XXX_Size() int {
	return m.Size()
}
func (m *PositionSettledEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionSettledEvent.DiscardUnknown(m)
}

var xxx_messageInfo_PositionSettledEvent proto.InternalMessageInfo

func (m *PositionSettledEvent) GetTraderAddress() string {
	if m != nil {
		return m.TraderAddress
	}
	return ""
}

func (m *PositionSettledEvent) GetSettledCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.SettledCoins
	}
	return nil
}

// Emitted when the funding rate changes for a market.
type FundingRateChangedEvent struct {
	// The pair for which the funding rate was calculated.
	Pair github_com_NibiruChain_nibiru_x_common_asset.Pair `protobuf:"bytes,1,opt,name=pair,proto3,customtype=github.com/NibiruChain/nibiru/x/common/asset.Pair" json:"pair"`
	// The mark price of the pair.
	MarkPriceTwap github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=mark_price_twap,json=markPriceTwap,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"mark_price_twap"`
	// The oracle index price of the pair.
	IndexPriceTwap github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=index_price_twap,json=indexPriceTwap,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"index_price_twap"`
	// The latest premium fraction just calculated.
	PremiumFraction github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=premium_fraction,json=premiumFraction,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"premium_fraction"`
	// The market's latest cumulative premium fraction.
	// The funding payment a position will pay is the difference between this
	// value and the latest cumulative premium fraction on the position,
	// multiplied by the position size.
	CumulativePremiumFraction github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=cumulative_premium_fraction,json=cumulativePremiumFraction,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"cumulative_premium_fraction"`
}

func (m *FundingRateChangedEvent) Reset()         { *m = FundingRateChangedEvent{} }
func (m *FundingRateChangedEvent) String() string { return proto.CompactTextString(m) }
func (*FundingRateChangedEvent) ProtoMessage()    {}
func (*FundingRateChangedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5313bbc89fa31dd, []int{3}
}
func (m *FundingRateChangedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FundingRateChangedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FundingRateChangedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FundingRateChangedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundingRateChangedEvent.Merge(m, src)
}
func (m *FundingRateChangedEvent) XXX_Size() int {
	return m.Size()
}
func (m *FundingRateChangedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_FundingRateChangedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_FundingRateChangedEvent proto.InternalMessageInfo

// Emitted when liquidation fails.
type LiquidationFailedEvent struct {
	// The pair for which we are trying to liquidate.
	Pair github_com_NibiruChain_nibiru_x_common_asset.Pair `protobuf:"bytes,1,opt,name=pair,proto3,customtype=github.com/NibiruChain/nibiru/x/common/asset.Pair" json:"pair"`
	// owner of the position.
	Trader string `protobuf:"bytes,2,opt,name=trader,proto3" json:"trader,omitempty"`
	// Address of the account that executed the tx.
	Liquidator string `protobuf:"bytes,3,opt,name=liquidator,proto3" json:"liquidator,omitempty"`
	// Reason for the liquidation failure.
	Reason LiquidationFailedEvent_LiquidationFailedReason `protobuf:"varint,4,opt,name=reason,proto3,enum=nibiru.perp.v2.LiquidationFailedEvent_LiquidationFailedReason" json:"reason,omitempty"`
}

func (m *LiquidationFailedEvent) Reset()         { *m = LiquidationFailedEvent{} }
func (m *LiquidationFailedEvent) String() string { return proto.CompactTextString(m) }
func (*LiquidationFailedEvent) ProtoMessage()    {}
func (*LiquidationFailedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5313bbc89fa31dd, []int{4}
}
func (m *LiquidationFailedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidationFailedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidationFailedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidationFailedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidationFailedEvent.Merge(m, src)
}
func (m *LiquidationFailedEvent) XXX_Size() int {
	return m.Size()
}
func (m *LiquidationFailedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidationFailedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidationFailedEvent proto.InternalMessageInfo

func (m *LiquidationFailedEvent) GetTrader() string {
	if m != nil {
		return m.Trader
	}
	return ""
}

func (m *LiquidationFailedEvent) GetLiquidator() string {
	if m != nil {
		return m.Liquidator
	}
	return ""
}

func (m *LiquidationFailedEvent) GetReason() LiquidationFailedEvent_LiquidationFailedReason {
	if m != nil {
		return m.Reason
	}
	return LiquidationFailedEvent_UNSPECIFIED
}

// This event is emitted when the amm is updated, which can be triggered by
// the following events:
//
// - swap
// - edit price multiplier
// - edit depth
type AmmUpdatedEvent struct {
	// the final state of the AMM
	FinalAmm AMM `protobuf:"bytes,1,opt,name=final_amm,json=finalAmm,proto3" json:"final_amm"`
	// The mark price of the pair.
	MarkPriceTwap github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=mark_price_twap,json=markPriceTwap,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"mark_price_twap"`
	// The oracle index price of the pair.
	IndexPriceTwap github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=index_price_twap,json=indexPriceTwap,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"index_price_twap"`
}

func (m *AmmUpdatedEvent) Reset()         { *m = AmmUpdatedEvent{} }
func (m *AmmUpdatedEvent) String() string { return proto.CompactTextString(m) }
func (*AmmUpdatedEvent) ProtoMessage()    {}
func (*AmmUpdatedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5313bbc89fa31dd, []int{5}
}
func (m *AmmUpdatedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AmmUpdatedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AmmUpdatedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AmmUpdatedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AmmUpdatedEvent.Merge(m, src)
}
func (m *AmmUpdatedEvent) XXX_Size() int {
	return m.Size()
}
func (m *AmmUpdatedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AmmUpdatedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AmmUpdatedEvent proto.InternalMessageInfo

func (m *AmmUpdatedEvent) GetFinalAmm() AMM {
	if m != nil {
		return m.FinalAmm
	}
	return AMM{}
}

// This event is emitted at the end of every block for persisting market changes
// off-chain
//
// Market changes are triggered by the following actions:
//
// - disabling market
// - changing market fees
// - bad debt is prepaid by the ecosystem fund
type MarketUpdatedEvent struct {
	// the final state of the market
	FinalMarket Market `protobuf:"bytes,1,opt,name=final_market,json=finalMarket,proto3" json:"final_market"`
}

func (m *MarketUpdatedEvent) Reset()         { *m = MarketUpdatedEvent{} }
func (m *MarketUpdatedEvent) String() string { return proto.CompactTextString(m) }
func (*MarketUpdatedEvent) ProtoMessage()    {}
func (*MarketUpdatedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5313bbc89fa31dd, []int{6}
}
func (m *MarketUpdatedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketUpdatedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketUpdatedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketUpdatedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketUpdatedEvent.Merge(m, src)
}
func (m *MarketUpdatedEvent) XXX_Size() int {
	return m.Size()
}
func (m *MarketUpdatedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketUpdatedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MarketUpdatedEvent proto.InternalMessageInfo

func (m *MarketUpdatedEvent) GetFinalMarket() Market {
	if m != nil {
		return m.FinalMarket
	}
	return Market{}
}

// EventShiftPegMultiplier: ABCI event emitted from MsgShiftPegMultiplier
type EventShiftPegMultiplier struct {
	OldPegMultiplier github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=old_peg_multiplier,json=oldPegMultiplier,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"old_peg_multiplier"`
	NewPegMultiplier github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=new_peg_multiplier,json=newPegMultiplier,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"new_peg_multiplier"`
	CostPaid         types.Coin                             `protobuf:"bytes,3,opt,name=cost_paid,json=costPaid,proto3" json:"cost_paid"`
}

func (m *EventShiftPegMultiplier) Reset()         { *m = EventShiftPegMultiplier{} }
func (m *EventShiftPegMultiplier) String() string { return proto.CompactTextString(m) }
func (*EventShiftPegMultiplier) ProtoMessage()    {}
func (*EventShiftPegMultiplier) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5313bbc89fa31dd, []int{7}
}
func (m *EventShiftPegMultiplier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventShiftPegMultiplier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventShiftPegMultiplier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventShiftPegMultiplier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventShiftPegMultiplier.Merge(m, src)
}
func (m *EventShiftPegMultiplier) XXX_Size() int {
	return m.Size()
}
func (m *EventShiftPegMultiplier) XXX_DiscardUnknown() {
	xxx_messageInfo_EventShiftPegMultiplier.DiscardUnknown(m)
}

var xxx_messageInfo_EventShiftPegMultiplier proto.InternalMessageInfo

func (m *EventShiftPegMultiplier) GetCostPaid() types.Coin {
	if m != nil {
		return m.CostPaid
	}
	return types.Coin{}
}

// EventShiftSwapInvariant: ABCI event emitted from MsgShiftSwapInvariant
type EventShiftSwapInvariant struct {
	OldSwapInvariant github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=old_swap_invariant,json=oldSwapInvariant,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"old_swap_invariant"`
	NewSwapInvariant github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=new_swap_invariant,json=newSwapInvariant,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"new_swap_invariant"`
	CostPaid         types.Coin                             `protobuf:"bytes,3,opt,name=cost_paid,json=costPaid,proto3" json:"cost_paid"`
}

func (m *EventShiftSwapInvariant) Reset()         { *m = EventShiftSwapInvariant{} }
func (m *EventShiftSwapInvariant) String() string { return proto.CompactTextString(m) }
func (*EventShiftSwapInvariant) ProtoMessage()    {}
func (*EventShiftSwapInvariant) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5313bbc89fa31dd, []int{8}
}
func (m *EventShiftSwapInvariant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventShiftSwapInvariant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventShiftSwapInvariant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventShiftSwapInvariant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventShiftSwapInvariant.Merge(m, src)
}
func (m *EventShiftSwapInvariant) XXX_Size() int {
	return m.Size()
}
func (m *EventShiftSwapInvariant) XXX_DiscardUnknown() {
	xxx_messageInfo_EventShiftSwapInvariant.DiscardUnknown(m)
}

var xxx_messageInfo_EventShiftSwapInvariant proto.InternalMessageInfo

func (m *EventShiftSwapInvariant) GetCostPaid() types.Coin {
	if m != nil {
		return m.CostPaid
	}
	return types.Coin{}
}

func init() {
	proto.RegisterEnum("nibiru.perp.v2.LiquidationFailedEvent_LiquidationFailedReason", LiquidationFailedEvent_LiquidationFailedReason_name, LiquidationFailedEvent_LiquidationFailedReason_value)
	proto.RegisterType((*PositionChangedEvent)(nil), "nibiru.perp.v2.PositionChangedEvent")
	proto.RegisterType((*PositionLiquidatedEvent)(nil), "nibiru.perp.v2.PositionLiquidatedEvent")
	proto.RegisterType((*PositionSettledEvent)(nil), "nibiru.perp.v2.PositionSettledEvent")
	proto.RegisterType((*FundingRateChangedEvent)(nil), "nibiru.perp.v2.FundingRateChangedEvent")
	proto.RegisterType((*LiquidationFailedEvent)(nil), "nibiru.perp.v2.LiquidationFailedEvent")
	proto.RegisterType((*AmmUpdatedEvent)(nil), "nibiru.perp.v2.AmmUpdatedEvent")
	proto.RegisterType((*MarketUpdatedEvent)(nil), "nibiru.perp.v2.MarketUpdatedEvent")
	proto.RegisterType((*EventShiftPegMultiplier)(nil), "nibiru.perp.v2.EventShiftPegMultiplier")
	proto.RegisterType((*EventShiftSwapInvariant)(nil), "nibiru.perp.v2.EventShiftSwapInvariant")
}

func init() { proto.RegisterFile("nibiru/perp/v2/event.proto", fileDescriptor_a5313bbc89fa31dd) }

var fileDescriptor_a5313bbc89fa31dd = []byte{
	// 1230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x97, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0xe3, 0xb8, 0xa4, 0xcd, 0xc4, 0xb1, 0x9d, 0xc1, 0x24, 0xdb, 0x52, 0x39, 0x61, 0x55,
	0x50, 0x2e, 0xdd, 0x55, 0x83, 0x84, 0xd4, 0x0a, 0x81, 0x92, 0xd4, 0x21, 0x96, 0x1a, 0xd7, 0xac,
	0x9d, 0xd2, 0xf2, 0x43, 0xcb, 0x78, 0xf7, 0xd9, 0x19, 0x65, 0x77, 0x66, 0xd9, 0x19, 0xc7, 0x4d,
	0xff, 0x01, 0x38, 0x22, 0x71, 0xe0, 0x7f, 0xe0, 0x2f, 0xe9, 0xb1, 0x47, 0xc4, 0xa1, 0xa0, 0x56,
	0x1c, 0xb8, 0x21, 0xae, 0x5c, 0xd0, 0xce, 0xce, 0xc6, 0x3f, 0xd2, 0x36, 0xc4, 0xc0, 0x81, 0x53,
	0xb2, 0xef, 0xcd, 0x7c, 0xde, 0x9b, 0xef, 0xbe, 0xf7, 0x66, 0x8d, 0xae, 0x30, 0xda, 0xa1, 0x71,
	0xdf, 0x8e, 0x20, 0x8e, 0xec, 0xa3, 0x0d, 0x1b, 0x8e, 0x80, 0x49, 0x2b, 0x8a, 0xb9, 0xe4, 0xb8,
	0x98, 0xfa, 0xac, 0xc4, 0x67, 0x1d, 0x6d, 0x5c, 0xa9, 0xf4, 0x78, 0x8f, 0x2b, 0x97, 0x9d, 0xfc,
	0x97, 0xae, 0xba, 0x72, 0xb5, 0xc7, 0x79, 0x2f, 0x00, 0x9b, 0x44, 0xd4, 0x26, 0x8c, 0x71, 0x49,
	0x24, 0xe5, 0x4c, 0x68, 0x6f, 0xd5, 0xe3, 0x22, 0xe4, 0xc2, 0xee, 0x10, 0x01, 0xf6, 0xd1, 0x8d,
	0x0e, 0x48, 0x72, 0xc3, 0xf6, 0x38, 0x65, 0xda, 0x3f, 0x19, 0x5f, 0x48, 0x22, 0x41, 0xfb, 0x56,
	0x35, 0x59, 0x3d, 0x75, 0xfa, 0x5d, 0x5b, 0xd2, 0x10, 0x84, 0x24, 0x61, 0x94, 0x2e, 0x30, 0x7f,
	0x9f, 0x43, 0x95, 0x26, 0x17, 0x34, 0x09, 0xb8, 0x7d, 0x40, 0x58, 0x0f, 0xfc, 0x5a, 0x92, 0x3f,
	0xae, 0xa1, 0x62, 0x97, 0x32, 0x12, 0xb8, 0x91, 0xf6, 0x1a, 0xb9, 0xb5, 0xdc, 0xfa, 0xc2, 0x86,
	0x61, 0x8d, 0x1f, 0xc9, 0xca, 0x76, 0x6f, 0x5d, 0x78, 0xfc, 0x74, 0x75, 0xc6, 0x59, 0x54, 0xbb,
	0x32, 0x23, 0xfe, 0x0c, 0x2d, 0x65, 0x00, 0x97, 0xf1, 0xe4, 0x0f, 0x09, 0x8c, 0xd9, 0xb5, 0xdc,
	0xfa, 0xfc, 0x96, 0x95, 0xac, 0xff, 0xe9, 0xe9, 0xea, 0x3b, 0x3d, 0x2a, 0x0f, 0xfa, 0x1d, 0xcb,
	0xe3, 0xa1, 0xad, 0x8f, 0x9a, 0xfe, 0xb9, 0x2e, 0xfc, 0x43, 0x5b, 0x1e, 0x47, 0x20, 0xac, 0xdb,
	0xe0, 0x39, 0xe5, 0x0c, 0xd4, 0xd0, 0x1c, 0xdc, 0x41, 0x25, 0x19, 0x13, 0x26, 0x88, 0xa7, 0xf8,
	0x5d, 0x00, 0x23, 0xaf, 0x92, 0xbc, 0x6c, 0xa5, 0x04, 0x2b, 0xd1, 0xcc, 0xd2, 0x9a, 0x59, 0xdb,
	0x9c, 0xb2, 0xad, 0x6a, 0x12, 0xf5, 0x8f, 0xa7, 0xab, 0xcb, 0xc7, 0x24, 0x0c, 0x6e, 0x99, 0x13,
	0xfb, 0x4d, 0xa7, 0x38, 0x62, 0xd9, 0x01, 0xc0, 0x1f, 0xa3, 0x42, 0x0c, 0x24, 0xa0, 0x8f, 0xc0,
	0x77, 0x23, 0x16, 0x18, 0x17, 0xa6, 0xca, 0x7d, 0x21, 0x63, 0x34, 0x59, 0x80, 0x6f, 0xa1, 0x4b,
	0x1d, 0xe2, 0xbb, 0x3e, 0x74, 0xa4, 0xf1, 0xda, 0x59, 0xf9, 0xa6, 0xaa, 0x5e, 0xec, 0x10, 0xff,
	0x36, 0x74, 0x24, 0xfe, 0x04, 0x95, 0xba, 0x7d, 0xe6, 0x53, 0xd6, 0x73, 0x23, 0x72, 0x1c, 0x02,
	0x93, 0xc6, 0xdc, 0x54, 0x19, 0x15, 0x35, 0xa6, 0x99, 0x52, 0xf0, 0x5b, 0xa8, 0xd0, 0x09, 0xb8,
	0x77, 0xe8, 0x1e, 0x00, 0xed, 0x1d, 0x48, 0xe3, 0xe2, 0x5a, 0x6e, 0x3d, 0xef, 0x2c, 0x28, 0xdb,
	0xae, 0x32, 0xe1, 0x36, 0x2a, 0x86, 0x24, 0xee, 0x51, 0xe6, 0x4a, 0xee, 0xf6, 0x05, 0xc4, 0xc6,
	0xa5, 0x73, 0x87, 0xae, 0x33, 0xe9, 0x14, 0x52, 0x4a, 0x9b, 0xef, 0x0b, 0x88, 0xf1, 0x4d, 0xb4,
	0xe8, 0xa9, 0xc2, 0x73, 0x63, 0x20, 0x82, 0x33, 0x63, 0x5e, 0x41, 0x2b, 0x1a, 0x5a, 0x48, 0xab,
	0xd2, 0x51, 0x3e, 0xa7, 0xe0, 0x8d, 0x3c, 0xe1, 0x7d, 0x54, 0x84, 0x87, 0xa9, 0xc5, 0x77, 0x05,
	0x7d, 0x04, 0x06, 0x9a, 0x4a, 0x8b, 0xc5, 0x13, 0x4a, 0x8b, 0x3e, 0x02, 0xfc, 0x05, 0xc2, 0x43,
	0xec, 0x49, 0xd1, 0x2e, 0x4c, 0x85, 0x5e, 0x3a, 0x21, 0x65, 0x55, 0x6b, 0x7e, 0x9d, 0x47, 0x2b,
	0x59, 0x7f, 0xdc, 0xa1, 0x5f, 0xf5, 0xa9, 0x4f, 0x64, 0xd6, 0x75, 0x5f, 0xa2, 0xe5, 0x93, 0x76,
	0xc9, 0x32, 0x50, 0xf3, 0x44, 0x77, 0xdf, 0xb5, 0x97, 0x75, 0xdf, 0x68, 0xef, 0xea, 0x9a, 0xa9,
	0x44, 0x2f, 0xea, 0xeb, 0xeb, 0x08, 0x07, 0x3a, 0x28, 0x8f, 0x5d, 0xe2, 0xfb, 0x31, 0x08, 0x91,
	0x76, 0xa4, 0xb3, 0x34, 0xf4, 0x6c, 0xa6, 0x0e, 0xdc, 0x43, 0x4b, 0x5d, 0x80, 0xe4, 0x85, 0x0f,
	0x7d, 0x67, 0x37, 0xd9, 0x9a, 0x6e, 0x32, 0x23, 0x6d, 0xb2, 0x53, 0x04, 0xd3, 0x29, 0x75, 0x01,
	0xda, 0xfc, 0xce, 0x89, 0x05, 0xc7, 0xe8, 0x0d, 0xbd, 0x0c, 0x3c, 0x2e, 0x8e, 0x85, 0x84, 0xd0,
	0x4d, 0x4a, 0x54, 0x35, 0xdc, 0x2b, 0x83, 0x5d, 0xd3, 0xc1, 0xae, 0x8e, 0x05, 0x1b, 0xa7, 0x98,
	0x0e, 0x56, 0x01, 0x6b, 0x99, 0x75, 0x27, 0x31, 0x7e, 0x3f, 0x3b, 0x1c, 0x7e, 0x2d, 0x90, 0x32,
	0xc8, 0x44, 0xda, 0x43, 0x17, 0x22, 0x42, 0x63, 0x25, 0xfa, 0xfc, 0xd6, 0x4d, 0xfd, 0xce, 0x6f,
	0x8c, 0xbc, 0xf3, 0x86, 0x7a, 0x0d, 0xdb, 0x07, 0x84, 0x32, 0x5b, 0xcf, 0xdf, 0x87, 0xb6, 0xc7,
	0xc3, 0x90, 0x33, 0x9b, 0x08, 0x01, 0xd2, 0x6a, 0x12, 0x1a, 0x3b, 0x0a, 0x83, 0xdf, 0x46, 0xc9,
	0x54, 0xf1, 0x61, 0x52, 0xef, 0xc5, 0xd4, 0x9a, 0x69, 0xfd, 0x4d, 0x0e, 0x2d, 0x8a, 0x34, 0x0d,
	0x37, 0x99, 0xef, 0xc2, 0xc8, 0xaf, 0xe5, 0x5f, 0x7d, 0xf6, 0x5d, 0x7d, 0xf6, 0x4a, 0x7a, 0xf6,
	0xb1, 0xdd, 0xe6, 0x0f, 0x3f, 0xaf, 0xae, 0xff, 0x8d, 0x32, 0x4d, 0x40, 0xc2, 0x29, 0xe8, 0xbd,
	0xea, 0xc9, 0xfc, 0x35, 0x8f, 0x56, 0x76, 0xd2, 0x01, 0xe1, 0x10, 0x09, 0x63, 0x15, 0xf4, 0x2f,
	0x8b, 0x73, 0x0f, 0x95, 0x42, 0x12, 0x1f, 0xba, 0x51, 0x4c, 0x3d, 0x70, 0xe5, 0x80, 0x44, 0x53,
	0xde, 0x0f, 0x8b, 0x09, 0xa6, 0x99, 0x50, 0xda, 0x03, 0x12, 0xe1, 0xfb, 0xa8, 0x4c, 0x99, 0x0f,
	0x0f, 0x47, 0xc1, 0xf9, 0xe9, 0x46, 0xa5, 0xe2, 0x0c, 0xc9, 0x0f, 0x50, 0x39, 0x8a, 0x21, 0xa4,
	0xfd, 0xd0, 0xed, 0xc6, 0xe9, 0x4d, 0xa1, 0xe6, 0xf8, 0xf9, 0xc9, 0x25, 0xcd, 0xd9, 0xd1, 0x18,
	0xcc, 0xd0, 0x9b, 0x5e, 0x3f, 0xec, 0x07, 0x44, 0xd2, 0x23, 0x70, 0x4f, 0x45, 0x99, 0x6e, 0xd4,
	0x5f, 0x1e, 0x22, 0x9b, 0xe3, 0xf1, 0xcc, 0xdf, 0x66, 0xd1, 0x72, 0xd6, 0x84, 0xc9, 0x85, 0x47,
	0xe8, 0x7f, 0xd5, 0x03, 0xcb, 0x68, 0x2e, 0xad, 0x76, 0x5d, 0xfb, 0xfa, 0x09, 0x57, 0x11, 0x9a,
	0x98, 0x2c, 0xf3, 0xce, 0x88, 0x05, 0xdf, 0x43, 0x73, 0xfa, 0x5e, 0x48, 0x06, 0x41, 0x71, 0xe3,
	0x83, 0xc9, 0x09, 0xf8, 0xe2, 0xf4, 0x4f, 0x9b, 0xf5, 0x0d, 0xa2, 0x69, 0x66, 0x84, 0x56, 0x5e,
	0xb2, 0x04, 0x97, 0xd0, 0xc2, 0x7e, 0xa3, 0xd5, 0xac, 0x6d, 0xd7, 0x77, 0xea, 0xb5, 0xdb, 0xe5,
	0x19, 0x5c, 0x41, 0xe5, 0xe6, 0xdd, 0x56, 0xbd, 0x5d, 0xbf, 0xdb, 0x70, 0x77, 0x6b, 0x9b, 0x77,
	0xda, 0xbb, 0x0f, 0xca, 0xb9, 0xc4, 0xda, 0xb8, 0xdb, 0xa8, 0xdd, 0xaf, 0xb7, 0xda, 0xb5, 0x46,
	0xdb, 0x6d, 0x6e, 0xd6, 0x9d, 0xf2, 0x2c, 0x36, 0x50, 0x65, 0xcc, 0xaa, 0xf7, 0x95, 0xf3, 0xe6,
	0x9f, 0x39, 0x54, 0xda, 0x0c, 0xc3, 0xfd, 0x68, 0x64, 0xde, 0xbf, 0x87, 0xe6, 0xd3, 0xaf, 0x2c,
	0x12, 0x86, 0x7a, 0xc4, 0xbf, 0x3e, 0x79, 0xc0, 0xcd, 0xbd, 0x3d, 0x3d, 0xd1, 0x2f, 0xa9, 0xb5,
	0x9b, 0x61, 0xf8, 0xff, 0x6b, 0x1a, 0x73, 0x1f, 0xe1, 0x3d, 0x12, 0x1f, 0x82, 0x1c, 0x3b, 0xff,
	0x87, 0xa8, 0x90, 0x9e, 0x3f, 0x54, 0x3e, 0x2d, 0xc1, 0xf2, 0xa4, 0x04, 0xe9, 0x4e, 0xad, 0xc2,
	0x82, 0xda, 0x91, 0x9a, 0xcc, 0xef, 0x66, 0xd1, 0x8a, 0x42, 0xb5, 0x0e, 0x68, 0x57, 0x36, 0xa1,
	0xb7, 0xd7, 0x0f, 0x24, 0x8d, 0x02, 0x0a, 0x31, 0xfe, 0x1c, 0x61, 0x1e, 0xf8, 0x6e, 0x04, 0x3d,
	0x37, 0x3c, 0xb1, 0xea, 0x7a, 0x3e, 0xf7, 0xc7, 0x27, 0x0f, 0xfc, 0x53, 0x74, 0x06, 0x83, 0x49,
	0xfa, 0x94, 0x9f, 0xb6, 0x0c, 0x06, 0xe3, 0xf4, 0xf7, 0xd1, 0xbc, 0xc7, 0x85, 0x74, 0x23, 0x42,
	0xfd, 0xb3, 0xef, 0x5b, 0x5d, 0x1e, 0xc9, 0x8e, 0x26, 0xa1, 0xfe, 0x84, 0x2a, 0xad, 0x01, 0x89,
	0xea, 0xec, 0x88, 0xc4, 0x94, 0x30, 0x99, 0xa9, 0x22, 0x06, 0x24, 0x72, 0x69, 0x66, 0x9d, 0x42,
	0x95, 0xe4, 0x4b, 0x2e, 0x51, 0xe5, 0x14, 0x3d, 0x51, 0x65, 0x82, 0x3e, 0x3b, 0x1d, 0x9d, 0xc1,
	0x60, 0x9c, 0xfe, 0x8f, 0x54, 0xd9, 0xfa, 0xe8, 0xf1, 0xb3, 0x6a, 0xee, 0xc9, 0xb3, 0x6a, 0xee,
	0x97, 0x67, 0xd5, 0xdc, 0xb7, 0xcf, 0xab, 0x33, 0x4f, 0x9e, 0x57, 0x67, 0x7e, 0x7c, 0x5e, 0x9d,
	0xf9, 0xf4, 0xfa, 0x59, 0x53, 0x2d, 0xfb, 0x6d, 0xa5, 0x92, 0xeb, 0xcc, 0xa9, 0xdf, 0x4e, 0xef,
	0xfe, 0x15, 0x00, 0x00, 0xff, 0xff, 0x50, 0x37, 0x90, 0x96, 0xfa, 0x0d, 0x00, 0x00,
}

func (m *PositionChangedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionChangedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PositionChangedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ExchangedNotional.Size()
		i -= size
		if _, err := m.ExchangedNotional.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.ExchangedSize.Size()
		i -= size
		if _, err := m.ExchangedSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.ChangeReason.Size()
		i -= size
		if _, err := m.ChangeReason.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.MarginToUser.Size()
		i -= size
		if _, err := m.MarginToUser.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.BlockHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.FundingPayment.Size()
		i -= size
		if _, err := m.FundingPayment.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.BadDebt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.RealizedPnl.Size()
		i -= size
		if _, err := m.RealizedPnl.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.TransactionFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.PositionNotional.Size()
		i -= size
		if _, err := m.PositionNotional.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.FinalPosition.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PositionLiquidatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionLiquidatedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PositionLiquidatedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FeeToEcosystemFund.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.FeeToLiquidator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.LiquidatorAddress) > 0 {
		i -= len(m.LiquidatorAddress)
		copy(dAtA[i:], m.LiquidatorAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.LiquidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.PositionChangedEvent.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PositionSettledEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionSettledEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PositionSettledEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SettledCoins) > 0 {
		for iNdEx := len(m.SettledCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SettledCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TraderAddress) > 0 {
		i -= len(m.TraderAddress)
		copy(dAtA[i:], m.TraderAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.TraderAddress)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Pair.Size()
		i -= size
		if _, err := m.Pair.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FundingRateChangedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FundingRateChangedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FundingRateChangedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CumulativePremiumFraction.Size()
		i -= size
		if _, err := m.CumulativePremiumFraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.PremiumFraction.Size()
		i -= size
		if _, err := m.PremiumFraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.IndexPriceTwap.Size()
		i -= size
		if _, err := m.IndexPriceTwap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.MarkPriceTwap.Size()
		i -= size
		if _, err := m.MarkPriceTwap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Pair.Size()
		i -= size
		if _, err := m.Pair.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LiquidationFailedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidationFailedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidationFailedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reason != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Liquidator) > 0 {
		i -= len(m.Liquidator)
		copy(dAtA[i:], m.Liquidator)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Liquidator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Trader) > 0 {
		i -= len(m.Trader)
		copy(dAtA[i:], m.Trader)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Trader)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Pair.Size()
		i -= size
		if _, err := m.Pair.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AmmUpdatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AmmUpdatedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AmmUpdatedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.IndexPriceTwap.Size()
		i -= size
		if _, err := m.IndexPriceTwap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.MarkPriceTwap.Size()
		i -= size
		if _, err := m.MarkPriceTwap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.FinalAmm.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MarketUpdatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketUpdatedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketUpdatedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FinalMarket.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventShiftPegMultiplier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventShiftPegMultiplier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventShiftPegMultiplier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CostPaid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.NewPegMultiplier.Size()
		i -= size
		if _, err := m.NewPegMultiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.OldPegMultiplier.Size()
		i -= size
		if _, err := m.OldPegMultiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventShiftSwapInvariant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventShiftSwapInvariant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventShiftSwapInvariant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CostPaid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.NewSwapInvariant.Size()
		i -= size
		if _, err := m.NewSwapInvariant.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.OldSwapInvariant.Size()
		i -= size
		if _, err := m.OldSwapInvariant.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PositionChangedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FinalPosition.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.PositionNotional.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.TransactionFee.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.RealizedPnl.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.BadDebt.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.FundingPayment.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.BlockHeight != 0 {
		n += 1 + sovEvent(uint64(m.BlockHeight))
	}
	l = m.MarginToUser.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.ChangeReason.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.ExchangedSize.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.ExchangedNotional.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *PositionLiquidatedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PositionChangedEvent.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.LiquidatorAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = m.FeeToLiquidator.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.FeeToEcosystemFund.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *PositionSettledEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pair.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.TraderAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.SettledCoins) > 0 {
		for _, e := range m.SettledCoins {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *FundingRateChangedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pair.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.MarkPriceTwap.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.IndexPriceTwap.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.PremiumFraction.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.CumulativePremiumFraction.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *LiquidationFailedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pair.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.Trader)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Liquidator)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Reason != 0 {
		n += 1 + sovEvent(uint64(m.Reason))
	}
	return n
}

func (m *AmmUpdatedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FinalAmm.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.MarkPriceTwap.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.IndexPriceTwap.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *MarketUpdatedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FinalMarket.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *EventShiftPegMultiplier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OldPegMultiplier.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.NewPegMultiplier.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.CostPaid.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *EventShiftSwapInvariant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OldSwapInvariant.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.NewSwapInvariant.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.CostPaid.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PositionChangedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionChangedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionChangedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalPosition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FinalPosition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionNotional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PositionNotional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TransactionFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealizedPnl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RealizedPnl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadDebt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BadDebt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingPayment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FundingPayment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarginToUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarginToUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChangeReason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangedSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangedSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangedNotional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangedNotional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PositionLiquidatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionLiquidatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionLiquidatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionChangedEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PositionChangedEvent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeToLiquidator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeToLiquidator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeToEcosystemFund", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeToEcosystemFund.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PositionSettledEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionSettledEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionSettledEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettledCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettledCoins = append(m.SettledCoins, types.Coin{})
			if err := m.SettledCoins[len(m.SettledCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FundingRateChangedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundingRateChangedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundingRateChangedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkPriceTwap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarkPriceTwap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexPriceTwap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IndexPriceTwap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PremiumFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PremiumFraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativePremiumFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CumulativePremiumFraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidationFailedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidationFailedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidationFailedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Liquidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= LiquidationFailedEvent_LiquidationFailedReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AmmUpdatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AmmUpdatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AmmUpdatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalAmm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FinalAmm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkPriceTwap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarkPriceTwap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexPriceTwap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IndexPriceTwap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketUpdatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketUpdatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketUpdatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalMarket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FinalMarket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventShiftPegMultiplier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventShiftPegMultiplier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventShiftPegMultiplier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldPegMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OldPegMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPegMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewPegMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostPaid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CostPaid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventShiftSwapInvariant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventShiftSwapInvariant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventShiftSwapInvariant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldSwapInvariant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OldSwapInvariant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSwapInvariant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewSwapInvariant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostPaid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CostPaid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
