// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nibiru/perp/v2/genesis.proto

package types

import (
	fmt "fmt"
	github_com_NibiruChain_nibiru_x_common_asset "github.com/NibiruChain/nibiru/x/common/asset"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the perp module's genesis state.
// Thge genesis state is used not only to start the network but also useful for
// exporting and importing state during network upgrades.
type GenesisState struct {
	Markets          []Market          `protobuf:"bytes,2,rep,name=markets,proto3" json:"markets"`
	Amms             []AMM             `protobuf:"bytes,3,rep,name=amms,proto3" json:"amms"`
	Positions        []GenesisPosition `protobuf:"bytes,4,rep,name=positions,proto3" json:"positions"`
	ReserveSnapshots []ReserveSnapshot `protobuf:"bytes,5,rep,name=reserve_snapshots,json=reserveSnapshots,proto3" json:"reserve_snapshots"`
	DnrEpoch         uint64            `protobuf:"varint,6,opt,name=dnr_epoch,json=dnrEpoch,proto3" json:"dnr_epoch,omitempty"`
	// For testing purposes, we allow the collateral to be set at genesis
	CollateralDenom    string                        `protobuf:"bytes,11,opt,name=collateral_denom,json=collateralDenom,proto3" json:"collateral_denom,omitempty"`
	TraderVolumes      []GenesisState_TraderVolume   `protobuf:"bytes,7,rep,name=trader_volumes,json=traderVolumes,proto3" json:"trader_volumes"`
	GlobalDiscount     []GenesisState_Discount       `protobuf:"bytes,8,rep,name=global_discount,json=globalDiscount,proto3" json:"global_discount"`
	CustomDiscounts    []GenesisState_CustomDiscount `protobuf:"bytes,9,rep,name=custom_discounts,json=customDiscounts,proto3" json:"custom_discounts"`
	MarketLastVersions []GenesisMarketLastVersion    `protobuf:"bytes,10,rep,name=market_last_versions,json=marketLastVersions,proto3" json:"market_last_versions"`
	GlobalVolumes      []GenesisState_GlobalVolume   `protobuf:"bytes,13,rep,name=global_volumes,json=globalVolumes,proto3" json:"global_volumes"`
	RebatesAllocations []DNRAllocation               `protobuf:"bytes,12,rep,name=rebates_allocations,json=rebatesAllocations,proto3" json:"rebates_allocations"`
	DnrEpochName       string                        `protobuf:"bytes,14,opt,name=dnr_epoch_name,json=dnrEpochName,proto3" json:"dnr_epoch_name,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2c7acfef3993fde, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetMarkets() []Market {
	if m != nil {
		return m.Markets
	}
	return nil
}

func (m *GenesisState) GetAmms() []AMM {
	if m != nil {
		return m.Amms
	}
	return nil
}

func (m *GenesisState) GetPositions() []GenesisPosition {
	if m != nil {
		return m.Positions
	}
	return nil
}

func (m *GenesisState) GetReserveSnapshots() []ReserveSnapshot {
	if m != nil {
		return m.ReserveSnapshots
	}
	return nil
}

func (m *GenesisState) GetDnrEpoch() uint64 {
	if m != nil {
		return m.DnrEpoch
	}
	return 0
}

func (m *GenesisState) GetCollateralDenom() string {
	if m != nil {
		return m.CollateralDenom
	}
	return ""
}

func (m *GenesisState) GetTraderVolumes() []GenesisState_TraderVolume {
	if m != nil {
		return m.TraderVolumes
	}
	return nil
}

func (m *GenesisState) GetGlobalDiscount() []GenesisState_Discount {
	if m != nil {
		return m.GlobalDiscount
	}
	return nil
}

func (m *GenesisState) GetCustomDiscounts() []GenesisState_CustomDiscount {
	if m != nil {
		return m.CustomDiscounts
	}
	return nil
}

func (m *GenesisState) GetMarketLastVersions() []GenesisMarketLastVersion {
	if m != nil {
		return m.MarketLastVersions
	}
	return nil
}

func (m *GenesisState) GetGlobalVolumes() []GenesisState_GlobalVolume {
	if m != nil {
		return m.GlobalVolumes
	}
	return nil
}

func (m *GenesisState) GetRebatesAllocations() []DNRAllocation {
	if m != nil {
		return m.RebatesAllocations
	}
	return nil
}

func (m *GenesisState) GetDnrEpochName() string {
	if m != nil {
		return m.DnrEpochName
	}
	return ""
}

type GenesisState_TraderVolume struct {
	Trader string                                 `protobuf:"bytes,1,opt,name=trader,proto3" json:"trader,omitempty"`
	Epoch  uint64                                 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Volume github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=volume,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"volume"`
}

func (m *GenesisState_TraderVolume) Reset()         { *m = GenesisState_TraderVolume{} }
func (m *GenesisState_TraderVolume) String() string { return proto.CompactTextString(m) }
func (*GenesisState_TraderVolume) ProtoMessage()    {}
func (*GenesisState_TraderVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2c7acfef3993fde, []int{0, 0}
}
func (m *GenesisState_TraderVolume) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState_TraderVolume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState_TraderVolume.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState_TraderVolume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState_TraderVolume.Merge(m, src)
}
func (m *GenesisState_TraderVolume) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState_TraderVolume) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState_TraderVolume.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState_TraderVolume proto.InternalMessageInfo

func (m *GenesisState_TraderVolume) GetTrader() string {
	if m != nil {
		return m.Trader
	}
	return ""
}

func (m *GenesisState_TraderVolume) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type GenesisState_Discount struct {
	Fee    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=fee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fee"`
	Volume github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=volume,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"volume"`
}

func (m *GenesisState_Discount) Reset()         { *m = GenesisState_Discount{} }
func (m *GenesisState_Discount) String() string { return proto.CompactTextString(m) }
func (*GenesisState_Discount) ProtoMessage()    {}
func (*GenesisState_Discount) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2c7acfef3993fde, []int{0, 1}
}
func (m *GenesisState_Discount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState_Discount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState_Discount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState_Discount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState_Discount.Merge(m, src)
}
func (m *GenesisState_Discount) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState_Discount) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState_Discount.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState_Discount proto.InternalMessageInfo

type GenesisState_CustomDiscount struct {
	Trader   string                 `protobuf:"bytes,1,opt,name=trader,proto3" json:"trader,omitempty"`
	Discount *GenesisState_Discount `protobuf:"bytes,2,opt,name=discount,proto3" json:"discount,omitempty"`
}

func (m *GenesisState_CustomDiscount) Reset()         { *m = GenesisState_CustomDiscount{} }
func (m *GenesisState_CustomDiscount) String() string { return proto.CompactTextString(m) }
func (*GenesisState_CustomDiscount) ProtoMessage()    {}
func (*GenesisState_CustomDiscount) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2c7acfef3993fde, []int{0, 2}
}
func (m *GenesisState_CustomDiscount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState_CustomDiscount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState_CustomDiscount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState_CustomDiscount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState_CustomDiscount.Merge(m, src)
}
func (m *GenesisState_CustomDiscount) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState_CustomDiscount) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState_CustomDiscount.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState_CustomDiscount proto.InternalMessageInfo

func (m *GenesisState_CustomDiscount) GetTrader() string {
	if m != nil {
		return m.Trader
	}
	return ""
}

func (m *GenesisState_CustomDiscount) GetDiscount() *GenesisState_Discount {
	if m != nil {
		return m.Discount
	}
	return nil
}

type GenesisState_GlobalVolume struct {
	Epoch  uint64                                 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Volume github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=volume,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"volume"`
}

func (m *GenesisState_GlobalVolume) Reset()         { *m = GenesisState_GlobalVolume{} }
func (m *GenesisState_GlobalVolume) String() string { return proto.CompactTextString(m) }
func (*GenesisState_GlobalVolume) ProtoMessage()    {}
func (*GenesisState_GlobalVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2c7acfef3993fde, []int{0, 3}
}
func (m *GenesisState_GlobalVolume) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState_GlobalVolume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState_GlobalVolume.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState_GlobalVolume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState_GlobalVolume.Merge(m, src)
}
func (m *GenesisState_GlobalVolume) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState_GlobalVolume) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState_GlobalVolume.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState_GlobalVolume proto.InternalMessageInfo

func (m *GenesisState_GlobalVolume) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

// GenesisMarketLastVersion is the last version including pair only used for
// genesis
type GenesisMarketLastVersion struct {
	Pair    github_com_NibiruChain_nibiru_x_common_asset.Pair `protobuf:"bytes,1,opt,name=pair,proto3,customtype=github.com/NibiruChain/nibiru/x/common/asset.Pair" json:"pair"`
	Version uint64                                            `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *GenesisMarketLastVersion) Reset()         { *m = GenesisMarketLastVersion{} }
func (m *GenesisMarketLastVersion) String() string { return proto.CompactTextString(m) }
func (*GenesisMarketLastVersion) ProtoMessage()    {}
func (*GenesisMarketLastVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2c7acfef3993fde, []int{1}
}
func (m *GenesisMarketLastVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisMarketLastVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisMarketLastVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisMarketLastVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisMarketLastVersion.Merge(m, src)
}
func (m *GenesisMarketLastVersion) XXX_Size() int {
	return m.Size()
}
func (m *GenesisMarketLastVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisMarketLastVersion.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisMarketLastVersion proto.InternalMessageInfo

func (m *GenesisMarketLastVersion) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type GenesisPosition struct {
	Pair     github_com_NibiruChain_nibiru_x_common_asset.Pair `protobuf:"bytes,1,opt,name=pair,proto3,customtype=github.com/NibiruChain/nibiru/x/common/asset.Pair" json:"pair"`
	Version  uint64                                            `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Position Position                                          `protobuf:"bytes,3,opt,name=position,proto3" json:"position"`
}

func (m *GenesisPosition) Reset()         { *m = GenesisPosition{} }
func (m *GenesisPosition) String() string { return proto.CompactTextString(m) }
func (*GenesisPosition) ProtoMessage()    {}
func (*GenesisPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2c7acfef3993fde, []int{2}
}
func (m *GenesisPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisPosition.Merge(m, src)
}
func (m *GenesisPosition) XXX_Size() int {
	return m.Size()
}
func (m *GenesisPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisPosition.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisPosition proto.InternalMessageInfo

func (m *GenesisPosition) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GenesisPosition) GetPosition() Position {
	if m != nil {
		return m.Position
	}
	return Position{}
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "nibiru.perp.v2.GenesisState")
	proto.RegisterType((*GenesisState_TraderVolume)(nil), "nibiru.perp.v2.GenesisState.TraderVolume")
	proto.RegisterType((*GenesisState_Discount)(nil), "nibiru.perp.v2.GenesisState.Discount")
	proto.RegisterType((*GenesisState_CustomDiscount)(nil), "nibiru.perp.v2.GenesisState.CustomDiscount")
	proto.RegisterType((*GenesisState_GlobalVolume)(nil), "nibiru.perp.v2.GenesisState.GlobalVolume")
	proto.RegisterType((*GenesisMarketLastVersion)(nil), "nibiru.perp.v2.GenesisMarketLastVersion")
	proto.RegisterType((*GenesisPosition)(nil), "nibiru.perp.v2.GenesisPosition")
}

func init() { proto.RegisterFile("nibiru/perp/v2/genesis.proto", fileDescriptor_c2c7acfef3993fde) }

var fileDescriptor_c2c7acfef3993fde = []byte{
	// 788 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xdf, 0x6a, 0x13, 0x4f,
	0x14, 0xce, 0x36, 0x69, 0x9a, 0x4c, 0xd2, 0xa4, 0xbf, 0x69, 0x29, 0x43, 0x7e, 0x35, 0x2d, 0x45,
	0x25, 0x45, 0xba, 0x4b, 0x23, 0x08, 0x7a, 0x65, 0xd3, 0x68, 0x11, 0x4c, 0x29, 0xdb, 0xd2, 0x0b,
	0x11, 0xd6, 0xc9, 0x66, 0xdc, 0x2c, 0xdd, 0xdd, 0x59, 0x76, 0x26, 0x41, 0xaf, 0xf5, 0x01, 0x14,
	0x7c, 0x16, 0x9f, 0xa1, 0x97, 0xbd, 0x14, 0x2f, 0x8a, 0xb4, 0x2f, 0x22, 0x3b, 0x33, 0x9b, 0x3f,
	0x4b, 0x53, 0x2b, 0x05, 0xaf, 0x92, 0x39, 0xe7, 0x7c, 0xdf, 0xf9, 0xe6, 0xec, 0x37, 0x33, 0x60,
	0x2d, 0x70, 0xbb, 0x6e, 0x34, 0x30, 0x42, 0x12, 0x85, 0xc6, 0xb0, 0x69, 0x38, 0x24, 0x20, 0xcc,
	0x65, 0x7a, 0x18, 0x51, 0x4e, 0x61, 0x45, 0x66, 0xf5, 0x38, 0xab, 0x0f, 0x9b, 0xb5, 0xba, 0x4d,
	0x99, 0x4f, 0x99, 0xd1, 0xc5, 0x8c, 0x18, 0xc3, 0x9d, 0x2e, 0xe1, 0x78, 0xc7, 0xb0, 0xa9, 0x1b,
	0xc8, 0xfa, 0xda, 0x9a, 0x43, 0xa9, 0xe3, 0x11, 0x03, 0x87, 0xae, 0x81, 0x83, 0x80, 0x72, 0xcc,
	0x5d, 0x1a, 0x28, 0xb6, 0xda, 0x8a, 0x43, 0x1d, 0x2a, 0xfe, 0x1a, 0xf1, 0x3f, 0x15, 0xad, 0xa5,
	0x14, 0x30, 0x8e, 0x39, 0x91, 0xb9, 0xcd, 0xaf, 0x25, 0x50, 0xde, 0x97, 0x8a, 0x8e, 0xe2, 0x30,
	0x7c, 0x02, 0x16, 0x7c, 0x1c, 0x9d, 0x12, 0xce, 0xd0, 0xdc, 0x46, 0xb6, 0x51, 0x6a, 0xae, 0xea,
	0xd3, 0x12, 0xf5, 0x8e, 0x48, 0xb7, 0x72, 0x67, 0x17, 0xeb, 0x19, 0x33, 0x29, 0x86, 0xdb, 0x20,
	0x87, 0x7d, 0x9f, 0xa1, 0xac, 0x00, 0x2d, 0xa7, 0x41, 0xbb, 0x9d, 0x8e, 0x42, 0x88, 0x32, 0xb8,
	0x07, 0x8a, 0x21, 0x65, 0xae, 0x10, 0x8f, 0x72, 0x02, 0xb3, 0x9e, 0xc6, 0x28, 0x5d, 0x87, 0xaa,
	0x4e, 0xe1, 0xc7, 0x38, 0x68, 0x82, 0xff, 0x22, 0xc2, 0x48, 0x34, 0x24, 0x16, 0x0b, 0x70, 0xc8,
	0xfa, 0x94, 0x33, 0x34, 0x7f, 0x3d, 0x99, 0x29, 0x0b, 0x8f, 0x54, 0x9d, 0x22, 0x5b, 0x8a, 0xa6,
	0xc3, 0x0c, 0xfe, 0x0f, 0x8a, 0xbd, 0x20, 0xb2, 0x48, 0x48, 0xed, 0x3e, 0xca, 0x6f, 0x68, 0x8d,
	0x9c, 0x59, 0xe8, 0x05, 0xd1, 0x8b, 0x78, 0x0d, 0xb7, 0xc0, 0x92, 0x4d, 0x3d, 0x0f, 0x73, 0x12,
	0x61, 0xcf, 0xea, 0x91, 0x80, 0xfa, 0xa8, 0xb4, 0xa1, 0x35, 0x8a, 0x66, 0x75, 0x1c, 0x6f, 0xc7,
	0x61, 0x78, 0x02, 0x2a, 0x3c, 0xc2, 0x3d, 0x12, 0x59, 0x43, 0xea, 0x0d, 0x7c, 0xc2, 0xd0, 0x82,
	0x10, 0xb6, 0x35, 0x63, 0x97, 0x62, 0xfa, 0xfa, 0xb1, 0x80, 0x9c, 0x08, 0x84, 0x92, 0xb8, 0xc8,
	0x27, 0x62, 0x0c, 0x1e, 0x83, 0xaa, 0xe3, 0xd1, 0x6e, 0xdc, 0xde, 0x65, 0x36, 0x1d, 0x04, 0x1c,
	0x15, 0x04, 0xf1, 0x83, 0x1b, 0x89, 0xdb, 0xaa, 0x58, 0x91, 0x56, 0x24, 0x47, 0x12, 0x85, 0x6f,
	0xc1, 0x92, 0x3d, 0x60, 0x9c, 0xfa, 0x23, 0x56, 0x86, 0x8a, 0x82, 0xf6, 0xd1, 0x8d, 0xb4, 0x7b,
	0x02, 0x94, 0x22, 0xaf, 0xda, 0x53, 0x51, 0x06, 0xdf, 0x81, 0x15, 0x69, 0x13, 0xcb, 0xc3, 0x8c,
	0x5b, 0x43, 0x12, 0x31, 0xf1, 0xdd, 0x81, 0xe8, 0xd0, 0x98, 0xd1, 0x41, 0xfa, 0xec, 0x35, 0x66,
	0xfc, 0x44, 0x02, 0x14, 0x3d, 0xf4, 0xd3, 0x09, 0x16, 0x4f, 0x5b, 0x4d, 0x25, 0x99, 0xf6, 0xe2,
	0x2d, 0xa6, 0xbd, 0x2f, 0x20, 0xd3, 0xd3, 0x76, 0x26, 0x62, 0xf1, 0xb4, 0x97, 0x23, 0xd2, 0xc5,
	0x9c, 0x30, 0x0b, 0x7b, 0x1e, 0xb5, 0xe5, 0x69, 0x43, 0x65, 0x41, 0x7e, 0x2f, 0x4d, 0xde, 0x3e,
	0x30, 0x77, 0x47, 0x55, 0x89, 0x5a, 0x85, 0x1f, 0x27, 0x18, 0xbc, 0x0f, 0x2a, 0x23, 0x8f, 0x59,
	0x01, 0xf6, 0x09, 0xaa, 0x08, 0x13, 0x95, 0x13, 0xa3, 0x1d, 0x60, 0x9f, 0xd4, 0x3e, 0x6b, 0xa0,
	0x3c, 0xe9, 0x07, 0xb8, 0x0a, 0xf2, 0xd2, 0x0b, 0x48, 0x13, 0xe5, 0x6a, 0x05, 0x57, 0xc0, 0xbc,
	0xb4, 0xeb, 0x9c, 0xb0, 0xab, 0x5c, 0xc0, 0x97, 0x20, 0x2f, 0x67, 0x81, 0xb2, 0x71, 0x75, 0x4b,
	0x8f, 0xe5, 0xfc, 0xbc, 0x58, 0x7f, 0xe8, 0xb8, 0xbc, 0x3f, 0xe8, 0xea, 0x36, 0xf5, 0x0d, 0x75,
	0xd9, 0xc8, 0x9f, 0x6d, 0xd6, 0x3b, 0x35, 0xf8, 0xc7, 0x90, 0x30, 0xfd, 0x55, 0xc0, 0x4d, 0x85,
	0xae, 0x7d, 0xd3, 0x40, 0x61, 0xe4, 0x93, 0xe7, 0x20, 0xfb, 0x9e, 0x10, 0xd9, 0xff, 0xaf, 0x18,
	0xdb, 0xc4, 0x36, 0x63, 0xe8, 0x84, 0xac, 0xb9, 0x3b, 0xc9, 0x3a, 0x05, 0x95, 0x69, 0xf3, 0xcd,
	0x1c, 0xcf, 0x2e, 0x28, 0x8c, 0x8e, 0x4a, 0xdc, 0xf3, 0xb6, 0x47, 0xc5, 0x1c, 0xc1, 0x6a, 0x1e,
	0x28, 0x4f, 0x7a, 0x65, 0x3c, 0x71, 0xed, 0xfa, 0x89, 0xdf, 0x69, 0x6b, 0x9b, 0x9f, 0x34, 0x80,
	0x66, 0x9d, 0x01, 0xd8, 0x01, 0xb9, 0x10, 0xbb, 0x6a, 0x8f, 0xad, 0xa7, 0xaa, 0xc5, 0xce, 0x44,
	0x8b, 0x03, 0xb1, 0xb7, 0xbd, 0x3e, 0x76, 0x03, 0x43, 0xdd, 0xfc, 0x1f, 0x0c, 0x9b, 0xfa, 0x3e,
	0x0d, 0x0c, 0xcc, 0x18, 0xe1, 0xfa, 0x21, 0x76, 0x23, 0x53, 0xd0, 0x40, 0x04, 0x16, 0xd4, 0x71,
	0x54, 0xee, 0x49, 0x96, 0x9b, 0xdf, 0x35, 0x50, 0x4d, 0xdd, 0xc0, 0xff, 0xac, 0x39, 0x7c, 0x06,
	0x0a, 0xc9, 0x35, 0x2f, 0xec, 0x5b, 0x6a, 0xa2, 0xf4, 0x37, 0x4b, 0x3d, 0x0b, 0xa3, 0xfa, 0xd6,
	0xfe, 0xd9, 0x65, 0x5d, 0x3b, 0xbf, 0xac, 0x6b, 0xbf, 0x2e, 0xeb, 0xda, 0x97, 0xab, 0x7a, 0xe6,
	0xfc, 0xaa, 0x9e, 0xf9, 0x71, 0x55, 0xcf, 0xbc, 0xd9, 0xfe, 0x93, 0xd0, 0xe4, 0x85, 0x14, 0xdf,
	0xa4, 0x9b, 0x17, 0x4f, 0xe4, 0xe3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x5d, 0xaf, 0x6c,
	0xc2, 0x07, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DnrEpochName) > 0 {
		i -= len(m.DnrEpochName)
		copy(dAtA[i:], m.DnrEpochName)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.DnrEpochName)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.GlobalVolumes) > 0 {
		for iNdEx := len(m.GlobalVolumes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GlobalVolumes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.RebatesAllocations) > 0 {
		for iNdEx := len(m.RebatesAllocations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RebatesAllocations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.CollateralDenom) > 0 {
		i -= len(m.CollateralDenom)
		copy(dAtA[i:], m.CollateralDenom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.CollateralDenom)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.MarketLastVersions) > 0 {
		for iNdEx := len(m.MarketLastVersions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MarketLastVersions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.CustomDiscounts) > 0 {
		for iNdEx := len(m.CustomDiscounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CustomDiscounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.GlobalDiscount) > 0 {
		for iNdEx := len(m.GlobalDiscount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GlobalDiscount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.TraderVolumes) > 0 {
		for iNdEx := len(m.TraderVolumes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TraderVolumes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.DnrEpoch != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DnrEpoch))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ReserveSnapshots) > 0 {
		for iNdEx := len(m.ReserveSnapshots) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReserveSnapshots[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Positions) > 0 {
		for iNdEx := len(m.Positions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Positions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Amms) > 0 {
		for iNdEx := len(m.Amms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Markets) > 0 {
		for iNdEx := len(m.Markets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Markets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState_TraderVolume) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState_TraderVolume) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState_TraderVolume) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Volume.Size()
		i -= size
		if _, err := m.Volume.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Epoch != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Trader) > 0 {
		i -= len(m.Trader)
		copy(dAtA[i:], m.Trader)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Trader)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState_Discount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState_Discount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState_Discount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Volume.Size()
		i -= size
		if _, err := m.Volume.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Fee.Size()
		i -= size
		if _, err := m.Fee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GenesisState_CustomDiscount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState_CustomDiscount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState_CustomDiscount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Discount != nil {
		{
			size, err := m.Discount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Trader) > 0 {
		i -= len(m.Trader)
		copy(dAtA[i:], m.Trader)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Trader)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState_GlobalVolume) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState_GlobalVolume) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState_GlobalVolume) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Volume.Size()
		i -= size
		if _, err := m.Volume.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Epoch != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisMarketLastVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisMarketLastVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisMarketLastVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.Pair.Size()
		i -= size
		if _, err := m.Pair.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GenesisPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Version != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.Pair.Size()
		i -= size
		if _, err := m.Pair.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Markets) > 0 {
		for _, e := range m.Markets {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Amms) > 0 {
		for _, e := range m.Amms {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Positions) > 0 {
		for _, e := range m.Positions {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ReserveSnapshots) > 0 {
		for _, e := range m.ReserveSnapshots {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.DnrEpoch != 0 {
		n += 1 + sovGenesis(uint64(m.DnrEpoch))
	}
	if len(m.TraderVolumes) > 0 {
		for _, e := range m.TraderVolumes {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.GlobalDiscount) > 0 {
		for _, e := range m.GlobalDiscount {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.CustomDiscounts) > 0 {
		for _, e := range m.CustomDiscounts {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.MarketLastVersions) > 0 {
		for _, e := range m.MarketLastVersions {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = len(m.CollateralDenom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.RebatesAllocations) > 0 {
		for _, e := range m.RebatesAllocations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.GlobalVolumes) > 0 {
		for _, e := range m.GlobalVolumes {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = len(m.DnrEpochName)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *GenesisState_TraderVolume) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Trader)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovGenesis(uint64(m.Epoch))
	}
	l = m.Volume.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *GenesisState_Discount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Fee.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.Volume.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *GenesisState_CustomDiscount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Trader)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Discount != nil {
		l = m.Discount.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *GenesisState_GlobalVolume) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovGenesis(uint64(m.Epoch))
	}
	l = m.Volume.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *GenesisMarketLastVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pair.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.Version != 0 {
		n += 1 + sovGenesis(uint64(m.Version))
	}
	return n
}

func (m *GenesisPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pair.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.Version != 0 {
		n += 1 + sovGenesis(uint64(m.Version))
	}
	l = m.Position.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Markets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Markets = append(m.Markets, Market{})
			if err := m.Markets[len(m.Markets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amms = append(m.Amms, AMM{})
			if err := m.Amms[len(m.Amms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Positions = append(m.Positions, GenesisPosition{})
			if err := m.Positions[len(m.Positions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveSnapshots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveSnapshots = append(m.ReserveSnapshots, ReserveSnapshot{})
			if err := m.ReserveSnapshots[len(m.ReserveSnapshots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnrEpoch", wireType)
			}
			m.DnrEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DnrEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraderVolumes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraderVolumes = append(m.TraderVolumes, GenesisState_TraderVolume{})
			if err := m.TraderVolumes[len(m.TraderVolumes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalDiscount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GlobalDiscount = append(m.GlobalDiscount, GenesisState_Discount{})
			if err := m.GlobalDiscount[len(m.GlobalDiscount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomDiscounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomDiscounts = append(m.CustomDiscounts, GenesisState_CustomDiscount{})
			if err := m.CustomDiscounts[len(m.CustomDiscounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketLastVersions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketLastVersions = append(m.MarketLastVersions, GenesisMarketLastVersion{})
			if err := m.MarketLastVersions[len(m.MarketLastVersions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebatesAllocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RebatesAllocations = append(m.RebatesAllocations, DNRAllocation{})
			if err := m.RebatesAllocations[len(m.RebatesAllocations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVolumes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GlobalVolumes = append(m.GlobalVolumes, GenesisState_GlobalVolume{})
			if err := m.GlobalVolumes[len(m.GlobalVolumes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnrEpochName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnrEpochName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState_TraderVolume) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraderVolume: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraderVolume: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Volume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState_Discount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Discount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Discount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Volume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState_CustomDiscount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomDiscount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomDiscount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Discount == nil {
				m.Discount = &GenesisState_Discount{}
			}
			if err := m.Discount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState_GlobalVolume) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalVolume: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalVolume: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Volume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisMarketLastVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisMarketLastVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisMarketLastVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
