// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vpool/v1/state.proto

package types

import (
	fmt "fmt"
	github_com_NibiruChain_nibiru_x_common_asset "github.com/NibiruChain/nibiru/x/common/asset"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Direction int32

const (
	Direction_DIRECTION_UNSPECIFIED Direction = 0
	Direction_ADD_TO_POOL           Direction = 1
	Direction_REMOVE_FROM_POOL      Direction = 2
)

var Direction_name = map[int32]string{
	0: "DIRECTION_UNSPECIFIED",
	1: "ADD_TO_POOL",
	2: "REMOVE_FROM_POOL",
}

var Direction_value = map[string]int32{
	"DIRECTION_UNSPECIFIED": 0,
	"ADD_TO_POOL":           1,
	"REMOVE_FROM_POOL":      2,
}

func (x Direction) String() string {
	return proto.EnumName(Direction_name, int32(x))
}

func (Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e9da3afd19017067, []int{0}
}

// Enumerates different options of calculating twap.
type TwapCalcOption int32

const (
	TwapCalcOption_TWAP_CALC_OPTION_UNSPECIFIED TwapCalcOption = 0
	// Spot price from quote asset reserve / base asset reserve
	TwapCalcOption_SPOT TwapCalcOption = 1
	// Swapping with quote assets, output denominated in base assets
	TwapCalcOption_QUOTE_ASSET_SWAP TwapCalcOption = 2
	// Swapping with base assets, output denominated in quote assets
	TwapCalcOption_BASE_ASSET_SWAP TwapCalcOption = 3
)

var TwapCalcOption_name = map[int32]string{
	0: "TWAP_CALC_OPTION_UNSPECIFIED",
	1: "SPOT",
	2: "QUOTE_ASSET_SWAP",
	3: "BASE_ASSET_SWAP",
}

var TwapCalcOption_value = map[string]int32{
	"TWAP_CALC_OPTION_UNSPECIFIED": 0,
	"SPOT":                         1,
	"QUOTE_ASSET_SWAP":             2,
	"BASE_ASSET_SWAP":              3,
}

func (x TwapCalcOption) String() string {
	return proto.EnumName(TwapCalcOption_name, int32(x))
}

func (TwapCalcOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e9da3afd19017067, []int{1}
}

// A virtual pool used only for price discovery of perpetual futures contracts.
// No real liquidity exists in this pool.
type Vpool struct {
	// always BASE:QUOTE, e.g. BTC:NUSD or ETH:NUSD
	Pair github_com_NibiruChain_nibiru_x_common_asset.Pair `protobuf:"bytes,1,opt,name=pair,proto3,customtype=github.com/NibiruChain/nibiru/x/common/asset.Pair" json:"pair"`
	// base asset is the crypto asset, e.g. BTC or ETH
	BaseAssetReserve github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=base_asset_reserve,json=baseAssetReserve,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"base_asset_reserve"`
	// quote asset is usually stablecoin, in our case NUSD
	QuoteAssetReserve github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=quote_asset_reserve,json=quoteAssetReserve,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"quote_asset_reserve"`
	Config            VpoolConfig                            `protobuf:"bytes,4,opt,name=config,proto3" json:"config"`
	// The square root of the liquidity depth. Liquidity depth is the product of
	// the reserves.
	SqrtDepth github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=sqrt_depth,json=sqrtDepth,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"sqrt_depth"`
	// Bias refers to the net long-short bias of the market. The bias of a pool
	// is equivalent to the sum of all base reserve changes since its creation.
	Bias github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=bias,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"bias"`
}

func (m *Vpool) Reset()      { *m = Vpool{} }
func (*Vpool) ProtoMessage() {}
func (*Vpool) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9da3afd19017067, []int{0}
}
func (m *Vpool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vpool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vpool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vpool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vpool.Merge(m, src)
}
func (m *Vpool) XXX_Size() int {
	return m.Size()
}
func (m *Vpool) XXX_DiscardUnknown() {
	xxx_messageInfo_Vpool.DiscardUnknown(m)
}

var xxx_messageInfo_Vpool proto.InternalMessageInfo

func (m *Vpool) GetConfig() VpoolConfig {
	if m != nil {
		return m.Config
	}
	return VpoolConfig{}
}

type VpoolConfig struct {
	// ratio applied to reserves in order not to over trade
	TradeLimitRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=trade_limit_ratio,json=tradeLimitRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"trade_limit_ratio"`
	// percentage that a single open or close position can alter the reserve amounts
	FluctuationLimitRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=fluctuation_limit_ratio,json=fluctuationLimitRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fluctuation_limit_ratio"`
	// max_oracle_spread_ratio
	MaxOracleSpreadRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=max_oracle_spread_ratio,json=maxOracleSpreadRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_oracle_spread_ratio"`
	// maintenance_margin_ratio
	MaintenanceMarginRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=maintenance_margin_ratio,json=maintenanceMarginRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"maintenance_margin_ratio"`
	// max_leverage
	MaxLeverage github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=max_leverage,json=maxLeverage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_leverage"`
}

func (m *VpoolConfig) Reset()         { *m = VpoolConfig{} }
func (m *VpoolConfig) String() string { return proto.CompactTextString(m) }
func (*VpoolConfig) ProtoMessage()    {}
func (*VpoolConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9da3afd19017067, []int{1}
}
func (m *VpoolConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VpoolConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VpoolConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VpoolConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VpoolConfig.Merge(m, src)
}
func (m *VpoolConfig) XXX_Size() int {
	return m.Size()
}
func (m *VpoolConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_VpoolConfig.DiscardUnknown(m)
}

var xxx_messageInfo_VpoolConfig proto.InternalMessageInfo

// CurrentTWAP states defines the numerator and denominator for the TWAP calculation
type CurrentTWAP struct {
	PairID      string                                 `protobuf:"bytes,1,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	Numerator   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=numerator,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"numerator"`
	Denominator github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=denominator,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"denominator"`
	Price       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price"`
}

func (m *CurrentTWAP) Reset()         { *m = CurrentTWAP{} }
func (m *CurrentTWAP) String() string { return proto.CompactTextString(m) }
func (*CurrentTWAP) ProtoMessage()    {}
func (*CurrentTWAP) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9da3afd19017067, []int{2}
}
func (m *CurrentTWAP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentTWAP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentTWAP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrentTWAP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentTWAP.Merge(m, src)
}
func (m *CurrentTWAP) XXX_Size() int {
	return m.Size()
}
func (m *CurrentTWAP) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentTWAP.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentTWAP proto.InternalMessageInfo

func (m *CurrentTWAP) GetPairID() string {
	if m != nil {
		return m.PairID
	}
	return ""
}

// a snapshot of the vpool's reserves at a given point in time
type ReserveSnapshot struct {
	Pair             github_com_NibiruChain_nibiru_x_common_asset.Pair `protobuf:"bytes,5,opt,name=pair,proto3,customtype=github.com/NibiruChain/nibiru/x/common/asset.Pair" json:"pair"`
	BaseAssetReserve github_com_cosmos_cosmos_sdk_types.Dec            `protobuf:"bytes,1,opt,name=base_asset_reserve,json=baseAssetReserve,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"base_asset_reserve"`
	// quote asset is usually the margin asset, e.g. NUSD
	QuoteAssetReserve github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=quote_asset_reserve,json=quoteAssetReserve,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"quote_asset_reserve"`
	// milliseconds since unix epoch
	TimestampMs int64 `protobuf:"varint,3,opt,name=timestamp_ms,json=timestampMs,proto3" json:"timestamp_ms,omitempty"`
}

func (m *ReserveSnapshot) Reset()         { *m = ReserveSnapshot{} }
func (m *ReserveSnapshot) String() string { return proto.CompactTextString(m) }
func (*ReserveSnapshot) ProtoMessage()    {}
func (*ReserveSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9da3afd19017067, []int{3}
}
func (m *ReserveSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReserveSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReserveSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReserveSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReserveSnapshot.Merge(m, src)
}
func (m *ReserveSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *ReserveSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_ReserveSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_ReserveSnapshot proto.InternalMessageInfo

func (m *ReserveSnapshot) GetTimestampMs() int64 {
	if m != nil {
		return m.TimestampMs
	}
	return 0
}

// PoolPrices is a simple structure that displays a snapshot of the mark and index
// prices for an asset. Empty strings for the indexPrice or twapMark fields
// indicate that the price is currently unavailable.
type PoolPrices struct {
	// Pair identifier for the two assets. Always in format 'base:quote'
	Pair github_com_NibiruChain_nibiru_x_common_asset.Pair `protobuf:"bytes,9,opt,name=pair,proto3,customtype=github.com/NibiruChain/nibiru/x/common/asset.Pair" json:"pair"`
	// MarkPrice is the instantaneous price of the perp.
	// Equivalent to quoteAssetReserve / baseAssetReserve.
	MarkPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=mark_price,json=markPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"mark_price"`
	// IndexPrice is the price of the "underlying" for the perp
	IndexPrice string `protobuf:"bytes,11,opt,name=index_price,json=indexPrice,proto3" json:"index_price,omitempty"`
	// TwapMark is the time-weighted average (mark) price.
	TwapMark string `protobuf:"bytes,12,opt,name=twap_mark,json=twapMark,proto3" json:"twap_mark,omitempty"`
	// SwapInvariant is the product of the reserves, commonly referred to as "k".
	SwapInvariant github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,13,opt,name=swap_invariant,json=swapInvariant,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"swap_invariant" yaml:"swap_invariant"`
	// The block number corresponding to each price
	BlockNumber int64 `protobuf:"varint,14,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (m *PoolPrices) Reset()         { *m = PoolPrices{} }
func (m *PoolPrices) String() string { return proto.CompactTextString(m) }
func (*PoolPrices) ProtoMessage()    {}
func (*PoolPrices) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9da3afd19017067, []int{4}
}
func (m *PoolPrices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolPrices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolPrices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolPrices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolPrices.Merge(m, src)
}
func (m *PoolPrices) XXX_Size() int {
	return m.Size()
}
func (m *PoolPrices) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolPrices.DiscardUnknown(m)
}

var xxx_messageInfo_PoolPrices proto.InternalMessageInfo

func (m *PoolPrices) GetIndexPrice() string {
	if m != nil {
		return m.IndexPrice
	}
	return ""
}

func (m *PoolPrices) GetTwapMark() string {
	if m != nil {
		return m.TwapMark
	}
	return ""
}

func (m *PoolPrices) GetBlockNumber() int64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func init() {
	proto.RegisterEnum("nibiru.vpool.v1.Direction", Direction_name, Direction_value)
	proto.RegisterEnum("nibiru.vpool.v1.TwapCalcOption", TwapCalcOption_name, TwapCalcOption_value)
	proto.RegisterType((*Vpool)(nil), "nibiru.vpool.v1.Vpool")
	proto.RegisterType((*VpoolConfig)(nil), "nibiru.vpool.v1.VpoolConfig")
	proto.RegisterType((*CurrentTWAP)(nil), "nibiru.vpool.v1.CurrentTWAP")
	proto.RegisterType((*ReserveSnapshot)(nil), "nibiru.vpool.v1.ReserveSnapshot")
	proto.RegisterType((*PoolPrices)(nil), "nibiru.vpool.v1.PoolPrices")
}

func init() { proto.RegisterFile("vpool/v1/state.proto", fileDescriptor_e9da3afd19017067) }

var fileDescriptor_e9da3afd19017067 = []byte{
	// 880 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0xbf, 0x6f, 0x1b, 0x37,
	0x14, 0xc7, 0xf5, 0xcb, 0x6a, 0xf4, 0xe4, 0x58, 0x0a, 0x63, 0x37, 0x4a, 0x1a, 0x48, 0xae, 0x0a,
	0x14, 0x41, 0x8a, 0x4a, 0x70, 0x3b, 0xd5, 0x9b, 0x7e, 0xa5, 0x10, 0x20, 0xf9, 0x2e, 0x27, 0x25,
	0x01, 0x82, 0xa2, 0x04, 0x75, 0xa2, 0x25, 0x42, 0x3a, 0xf2, 0x42, 0x52, 0x8a, 0xf2, 0x5f, 0x74,
	0xcc, 0xd8, 0x7f, 0xa5, 0x5b, 0xc6, 0x8c, 0x45, 0x07, 0xa3, 0xb0, 0xa7, 0xae, 0x05, 0x3a, 0x75,
	0x29, 0xc8, 0xbb, 0xba, 0x72, 0x50, 0x20, 0xc8, 0x21, 0x9e, 0x6c, 0x7e, 0x1f, 0xf9, 0xf9, 0x3e,
	0xbd, 0x47, 0x3e, 0x1c, 0xec, 0xaf, 0x43, 0x21, 0x96, 0xcd, 0xf5, 0x51, 0x53, 0x69, 0xa2, 0x69,
	0x23, 0x94, 0x42, 0x0b, 0x54, 0xe2, 0x6c, 0xc2, 0xe4, 0xaa, 0x61, 0x83, 0x8d, 0xf5, 0xd1, 0xbd,
	0xbb, 0xbe, 0x50, 0x81, 0x50, 0xd8, 0x86, 0x9b, 0xd1, 0x22, 0xda, 0x7b, 0x6f, 0x7f, 0x26, 0x66,
	0x22, 0xd2, 0xcd, 0x7f, 0x91, 0x5a, 0xff, 0x23, 0x0b, 0x3b, 0x4f, 0xcd, 0x69, 0x34, 0x84, 0x5c,
	0x48, 0x98, 0xac, 0xa4, 0x0f, 0xd3, 0x0f, 0x0a, 0xed, 0xef, 0xde, 0x9c, 0xd5, 0x52, 0xbf, 0x9d,
	0xd5, 0x8e, 0x66, 0x4c, 0xcf, 0x57, 0x93, 0x86, 0x2f, 0x82, 0xe6, 0x89, 0x35, 0xeb, 0xcc, 0x09,
	0xe3, 0xcd, 0xc8, 0xb8, 0xb9, 0x69, 0xfa, 0x22, 0x08, 0x04, 0x6f, 0x12, 0xa5, 0xa8, 0x6e, 0xb8,
	0x84, 0x49, 0xcf, 0x62, 0xd0, 0x0f, 0x80, 0x26, 0x44, 0x51, 0x6c, 0x03, 0x58, 0x52, 0x45, 0xe5,
	0x9a, 0x56, 0x32, 0x16, 0xde, 0x88, 0xe1, 0x5f, 0x6e, 0xc1, 0xa3, 0x5c, 0xe3, 0x3f, 0x5f, 0xab,
	0xe9, 0xa2, 0xa9, 0x5f, 0x85, 0x54, 0x35, 0xba, 0xd4, 0xf7, 0xca, 0x86, 0xd4, 0x32, 0x20, 0x2f,
	0xe2, 0xa0, 0x1f, 0xe1, 0xf6, 0x8b, 0x95, 0xd0, 0xef, 0xe2, 0xb3, 0x89, 0xf0, 0xb7, 0x2c, 0xea,
	0x0a, 0xff, 0x18, 0xf2, 0xbe, 0xe0, 0xa7, 0x6c, 0x56, 0xc9, 0x1d, 0xa6, 0x1f, 0x14, 0xbf, 0xb9,
	0xdf, 0x78, 0xa7, 0xd2, 0x0d, 0x5b, 0xb4, 0x8e, 0xdd, 0xd3, 0xce, 0x19, 0x43, 0x2f, 0x3e, 0x81,
	0x86, 0x00, 0xea, 0x85, 0xd4, 0x78, 0x4a, 0x43, 0x3d, 0xaf, 0xec, 0x24, 0x4a, 0xa9, 0x60, 0x08,
	0x5d, 0x03, 0x40, 0x6d, 0xc8, 0x4d, 0x18, 0x51, 0x95, 0x7c, 0x22, 0x90, 0x3d, 0x7b, 0x9c, 0x7b,
	0xfd, 0x73, 0x2d, 0x55, 0xff, 0x2b, 0x0b, 0xc5, 0xad, 0xb4, 0xd1, 0x73, 0xb8, 0xa5, 0x25, 0x99,
	0x52, 0xbc, 0x64, 0x01, 0xd3, 0x58, 0x12, 0xcd, 0x44, 0xdc, 0xfe, 0x0f, 0xb5, 0x29, 0x59, 0xd0,
	0xc0, 0x70, 0x3c, 0x83, 0x41, 0xa7, 0x70, 0xe7, 0x74, 0xb9, 0xf2, 0xf5, 0xca, 0xac, 0xf8, 0x15,
	0x87, 0x64, 0x77, 0xe0, 0x60, 0x0b, 0xb7, 0xe5, 0x43, 0xe1, 0x4e, 0x40, 0x36, 0x58, 0x48, 0xe2,
	0x2f, 0x29, 0x56, 0xa1, 0xa4, 0x64, 0x1a, 0xfb, 0x24, 0xbb, 0x0c, 0xfb, 0x01, 0xd9, 0x38, 0x96,
	0x36, 0xb2, 0xb0, 0xc8, 0x66, 0x0e, 0x95, 0x80, 0x30, 0xae, 0x29, 0x27, 0xdc, 0xa7, 0x38, 0x20,
	0x72, 0xc6, 0x78, 0xec, 0x93, 0x4b, 0xe4, 0xf3, 0xe9, 0x16, 0x6f, 0x68, 0x71, 0x91, 0xd3, 0x63,
	0xd8, 0x35, 0x3f, 0x68, 0x49, 0xd7, 0x54, 0x92, 0x19, 0x4d, 0x78, 0x7f, 0x8a, 0x01, 0xd9, 0x0c,
	0x62, 0x44, 0xfd, 0x75, 0x06, 0x8a, 0x9d, 0x95, 0x94, 0x94, 0xeb, 0xf1, 0xb3, 0x96, 0x8b, 0xbe,
	0x80, 0x4f, 0xcc, 0x13, 0xc5, 0x6c, 0x1a, 0x77, 0x1b, 0xce, 0xcf, 0x6a, 0x79, 0xf3, 0x76, 0xfb,
	0x5d, 0x2f, 0x6f, 0x42, 0xfd, 0x29, 0x1a, 0x40, 0x81, 0xaf, 0x02, 0x2a, 0x89, 0x16, 0x32, 0x61,
	0xcb, 0xfe, 0x03, 0x20, 0x17, 0x8a, 0x53, 0xca, 0x45, 0xc0, 0xb8, 0xe5, 0x25, 0x6b, 0xcd, 0x36,
	0x02, 0x75, 0x61, 0x27, 0x94, 0xcc, 0xa7, 0x09, 0xcb, 0x1f, 0x1d, 0xae, 0xff, 0x92, 0x81, 0x52,
	0xfc, 0xe6, 0x47, 0x9c, 0x84, 0x6a, 0x2e, 0xf4, 0xe5, 0x20, 0xdc, 0xb9, 0xce, 0x41, 0x98, 0xbe,
	0xde, 0x41, 0x98, 0xf9, 0x58, 0x83, 0xf0, 0x73, 0xd8, 0xd5, 0x2c, 0xa0, 0x4a, 0x93, 0x20, 0xc4,
	0x81, 0xb2, 0x9d, 0xcb, 0x7a, 0xc5, 0x4b, 0x6d, 0xa8, 0xea, 0x7f, 0x67, 0x00, 0x5c, 0x21, 0x96,
	0xae, 0xa9, 0xa8, 0xba, 0x2c, 0x5f, 0xe1, 0xe3, 0x94, 0x6f, 0x08, 0x10, 0x10, 0xb9, 0xc0, 0x51,
	0xb3, 0x21, 0xd9, 0x45, 0x34, 0x04, 0x9b, 0x1e, 0xaa, 0x41, 0x91, 0xf1, 0x29, 0xdd, 0xc4, 0xbc,
	0xa2, 0xe1, 0x79, 0x60, 0xa5, 0x68, 0xc3, 0x67, 0x50, 0xd0, 0x2f, 0x49, 0x68, 0x9e, 0xf8, 0xa2,
	0xb2, 0x6b, 0xc3, 0x37, 0x8c, 0x30, 0x24, 0x72, 0x81, 0x38, 0xec, 0x29, 0x13, 0x64, 0x7c, 0x4d,
	0x24, 0x23, 0x5c, 0x57, 0x6e, 0xda, 0x84, 0xbe, 0xff, 0x80, 0x84, 0xfa, 0x5c, 0xff, 0x79, 0x56,
	0x3b, 0x78, 0x45, 0x82, 0xe5, 0x71, 0xfd, 0x2a, 0xad, 0xee, 0xdd, 0x34, 0x42, 0xff, 0xdf, 0xb5,
	0xa9, 0xfe, 0x64, 0x29, 0xfc, 0x05, 0xe6, 0xab, 0x60, 0x42, 0x65, 0x65, 0x2f, 0xaa, 0xbe, 0xd5,
	0x4e, 0xac, 0xf4, 0x70, 0x08, 0x85, 0x2e, 0x93, 0xd4, 0x37, 0x73, 0x11, 0xdd, 0x85, 0x83, 0x6e,
	0xdf, 0xeb, 0x75, 0xc6, 0x7d, 0xe7, 0x04, 0x3f, 0x39, 0x19, 0xb9, 0xbd, 0x4e, 0xff, 0x51, 0xbf,
	0xd7, 0x2d, 0xa7, 0x50, 0x09, 0x8a, 0xad, 0x6e, 0x17, 0x8f, 0x1d, 0xec, 0x3a, 0xce, 0xa0, 0x9c,
	0x46, 0xfb, 0x50, 0xf6, 0x7a, 0x43, 0xe7, 0x69, 0x0f, 0x3f, 0xf2, 0x9c, 0x61, 0xa4, 0x66, 0x1e,
	0xce, 0x60, 0x6f, 0xfc, 0x92, 0x84, 0x1d, 0xb2, 0xf4, 0x9d, 0xd0, 0x32, 0x0f, 0xe1, 0xbe, 0x99,
	0x1a, 0xb8, 0xd3, 0x1a, 0x74, 0xb0, 0xe3, 0xfe, 0x0f, 0xfa, 0x06, 0xe4, 0x46, 0xae, 0x33, 0x8e,
	0x98, 0x8f, 0x9f, 0x38, 0xe3, 0x1e, 0x6e, 0x8d, 0x46, 0xbd, 0x31, 0x1e, 0x3d, 0x6b, 0xb9, 0xe5,
	0x0c, 0xba, 0x0d, 0xa5, 0x76, 0x6b, 0x74, 0x45, 0xcc, 0xb6, 0x7b, 0x6f, 0xce, 0xab, 0xe9, 0xb7,
	0xe7, 0xd5, 0xf4, 0xef, 0xe7, 0xd5, 0xf4, 0x4f, 0x17, 0xd5, 0xd4, 0xdb, 0x8b, 0x6a, 0xea, 0xd7,
	0x8b, 0x6a, 0xea, 0xf9, 0x57, 0xef, 0xbb, 0x2a, 0xd1, 0xa7, 0x90, 0xad, 0xe6, 0x24, 0x6f, 0x3f,
	0x63, 0xbe, 0xfd, 0x27, 0x00, 0x00, 0xff, 0xff, 0x00, 0xc8, 0x4c, 0xa9, 0x20, 0x09, 0x00, 0x00,
}

func (m *Vpool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vpool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vpool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Bias.Size()
		i -= size
		if _, err := m.Bias.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.SqrtDepth.Size()
		i -= size
		if _, err := m.SqrtDepth.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.QuoteAssetReserve.Size()
		i -= size
		if _, err := m.QuoteAssetReserve.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.BaseAssetReserve.Size()
		i -= size
		if _, err := m.BaseAssetReserve.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Pair.Size()
		i -= size
		if _, err := m.Pair.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VpoolConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VpoolConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VpoolConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxLeverage.Size()
		i -= size
		if _, err := m.MaxLeverage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.MaintenanceMarginRatio.Size()
		i -= size
		if _, err := m.MaintenanceMarginRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.MaxOracleSpreadRatio.Size()
		i -= size
		if _, err := m.MaxOracleSpreadRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.FluctuationLimitRatio.Size()
		i -= size
		if _, err := m.FluctuationLimitRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TradeLimitRatio.Size()
		i -= size
		if _, err := m.TradeLimitRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CurrentTWAP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentTWAP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrentTWAP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Denominator.Size()
		i -= size
		if _, err := m.Denominator.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Numerator.Size()
		i -= size
		if _, err := m.Numerator.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.PairID) > 0 {
		i -= len(m.PairID)
		copy(dAtA[i:], m.PairID)
		i = encodeVarintState(dAtA, i, uint64(len(m.PairID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReserveSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReserveSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReserveSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Pair.Size()
		i -= size
		if _, err := m.Pair.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.TimestampMs != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.TimestampMs))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.QuoteAssetReserve.Size()
		i -= size
		if _, err := m.QuoteAssetReserve.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.BaseAssetReserve.Size()
		i -= size
		if _, err := m.BaseAssetReserve.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PoolPrices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolPrices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolPrices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockNumber != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x70
	}
	{
		size := m.SwapInvariant.Size()
		i -= size
		if _, err := m.SwapInvariant.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if len(m.TwapMark) > 0 {
		i -= len(m.TwapMark)
		copy(dAtA[i:], m.TwapMark)
		i = encodeVarintState(dAtA, i, uint64(len(m.TwapMark)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.IndexPrice) > 0 {
		i -= len(m.IndexPrice)
		copy(dAtA[i:], m.IndexPrice)
		i = encodeVarintState(dAtA, i, uint64(len(m.IndexPrice)))
		i--
		dAtA[i] = 0x5a
	}
	{
		size := m.MarkPrice.Size()
		i -= size
		if _, err := m.MarkPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.Pair.Size()
		i -= size
		if _, err := m.Pair.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	return len(dAtA) - i, nil
}

func encodeVarintState(dAtA []byte, offset int, v uint64) int {
	offset -= sovState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Vpool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pair.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.BaseAssetReserve.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.QuoteAssetReserve.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.Config.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.SqrtDepth.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.Bias.Size()
	n += 1 + l + sovState(uint64(l))
	return n
}

func (m *VpoolConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TradeLimitRatio.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.FluctuationLimitRatio.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.MaxOracleSpreadRatio.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.MaintenanceMarginRatio.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.MaxLeverage.Size()
	n += 1 + l + sovState(uint64(l))
	return n
}

func (m *CurrentTWAP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairID)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = m.Numerator.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.Denominator.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.Price.Size()
	n += 1 + l + sovState(uint64(l))
	return n
}

func (m *ReserveSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BaseAssetReserve.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.QuoteAssetReserve.Size()
	n += 1 + l + sovState(uint64(l))
	if m.TimestampMs != 0 {
		n += 1 + sovState(uint64(m.TimestampMs))
	}
	l = m.Pair.Size()
	n += 1 + l + sovState(uint64(l))
	return n
}

func (m *PoolPrices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pair.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.MarkPrice.Size()
	n += 1 + l + sovState(uint64(l))
	l = len(m.IndexPrice)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.TwapMark)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = m.SwapInvariant.Size()
	n += 1 + l + sovState(uint64(l))
	if m.BlockNumber != 0 {
		n += 1 + sovState(uint64(m.BlockNumber))
	}
	return n
}

func sovState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozState(x uint64) (n int) {
	return sovState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Vpool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vpool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vpool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAssetReserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseAssetReserve.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteAssetReserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.QuoteAssetReserve.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SqrtDepth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SqrtDepth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bias.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VpoolConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VpoolConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VpoolConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeLimitRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TradeLimitRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FluctuationLimitRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FluctuationLimitRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOracleSpreadRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxOracleSpreadRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaintenanceMarginRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaintenanceMarginRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLeverage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxLeverage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentTWAP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentTWAP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentTWAP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numerator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Numerator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denominator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Denominator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReserveSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReserveSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReserveSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAssetReserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseAssetReserve.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteAssetReserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.QuoteAssetReserve.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampMs", wireType)
			}
			m.TimestampMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolPrices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolPrices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolPrices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarkPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwapMark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwapMark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapInvariant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwapInvariant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupState = fmt.Errorf("proto: unexpected end of group")
)
