// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pricefeed/state.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	common "github.com/NibiruChain/nibiru/x/common"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the x/pricefeed module.
type Params struct {
	// Pairs is the list of valid trading pairs for the module.
	// Add new trading pairs
	Pairs []common.AssetPair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs"`
	// amount of time to look back for TWAP calculations
	TwapLookbackWindow time.Duration `protobuf:"bytes,2,opt,name=twap_lookback_window,json=twapLookbackWindow,proto3,stdduration" json:"twap_lookback_window,omitempty" yaml:"twap_lookback_window"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e08791a9dd0830, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetPairs() []common.AssetPair {
	if m != nil {
		return m.Pairs
	}
	return nil
}

func (m *Params) GetTwapLookbackWindow() time.Duration {
	if m != nil {
		return m.TwapLookbackWindow
	}
	return 0
}

// a snapshot of the pricefeed oracle's median price at a given point in time
type PriceSnapshot struct {
	// the token pair
	PairId string `protobuf:"bytes,1,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	// the median prices of all oracles
	Price github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price"`
	// milliseconds since unix epoch
	TimestampMs int64 `protobuf:"varint,3,opt,name=timestamp_ms,json=timestampMs,proto3" json:"timestamp_ms,omitempty"`
}

func (m *PriceSnapshot) Reset()         { *m = PriceSnapshot{} }
func (m *PriceSnapshot) String() string { return proto.CompactTextString(m) }
func (*PriceSnapshot) ProtoMessage()    {}
func (*PriceSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e08791a9dd0830, []int{1}
}
func (m *PriceSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceSnapshot.Merge(m, src)
}
func (m *PriceSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *PriceSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_PriceSnapshot proto.InternalMessageInfo

func (m *PriceSnapshot) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *PriceSnapshot) GetTimestampMs() int64 {
	if m != nil {
		return m.TimestampMs
	}
	return 0
}

// OraclesMarshaler is a codec.ProtoMarshaler for an oracles array in the
// OraclesState sdk.KVStore.
type OraclesMarshaler struct {
	Oracles []github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,rep,name=oracles,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"oracles,omitempty"`
}

func (m *OraclesMarshaler) Reset()         { *m = OraclesMarshaler{} }
func (m *OraclesMarshaler) String() string { return proto.CompactTextString(m) }
func (*OraclesMarshaler) ProtoMessage()    {}
func (*OraclesMarshaler) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e08791a9dd0830, []int{2}
}
func (m *OraclesMarshaler) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OraclesMarshaler) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OraclesMarshaler.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OraclesMarshaler) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OraclesMarshaler.Merge(m, src)
}
func (m *OraclesMarshaler) XXX_Size() int {
	return m.Size()
}
func (m *OraclesMarshaler) XXX_DiscardUnknown() {
	xxx_messageInfo_OraclesMarshaler.DiscardUnknown(m)
}

var xxx_messageInfo_OraclesMarshaler proto.InternalMessageInfo

func (m *OraclesMarshaler) GetOracles() []github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Oracles
	}
	return nil
}

// ActivePairMarshaler is a codec.ProtoMarshaler for the "IsActive" status of
// a pair in the ActivePairState sdk.KVStore.
type ActivePairMarshaler struct {
	IsActive bool `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (m *ActivePairMarshaler) Reset()         { *m = ActivePairMarshaler{} }
func (m *ActivePairMarshaler) String() string { return proto.CompactTextString(m) }
func (*ActivePairMarshaler) ProtoMessage()    {}
func (*ActivePairMarshaler) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e08791a9dd0830, []int{3}
}
func (m *ActivePairMarshaler) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivePairMarshaler) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivePairMarshaler.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivePairMarshaler) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivePairMarshaler.Merge(m, src)
}
func (m *ActivePairMarshaler) XXX_Size() int {
	return m.Size()
}
func (m *ActivePairMarshaler) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivePairMarshaler.DiscardUnknown(m)
}

var xxx_messageInfo_ActivePairMarshaler proto.InternalMessageInfo

func (m *ActivePairMarshaler) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

// PostedPrice defines a price for an asset pair posted by a specific oracle.
type PostedPrice struct {
	PairID string                                 `protobuf:"bytes,1,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	Oracle string                                 `protobuf:"bytes,2,opt,name=oracle,proto3" json:"oracle,omitempty"`
	Price  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price"`
	Expiry time.Time                              `protobuf:"bytes,4,opt,name=expiry,proto3,stdtime" json:"expiry"`
}

func (m *PostedPrice) Reset()         { *m = PostedPrice{} }
func (m *PostedPrice) String() string { return proto.CompactTextString(m) }
func (*PostedPrice) ProtoMessage()    {}
func (*PostedPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e08791a9dd0830, []int{4}
}
func (m *PostedPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostedPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostedPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostedPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostedPrice.Merge(m, src)
}
func (m *PostedPrice) XXX_Size() int {
	return m.Size()
}
func (m *PostedPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_PostedPrice.DiscardUnknown(m)
}

var xxx_messageInfo_PostedPrice proto.InternalMessageInfo

func (m *PostedPrice) GetPairID() string {
	if m != nil {
		return m.PairID
	}
	return ""
}

func (m *PostedPrice) GetOracle() string {
	if m != nil {
		return m.Oracle
	}
	return ""
}

func (m *PostedPrice) GetExpiry() time.Time {
	if m != nil {
		return m.Expiry
	}
	return time.Time{}
}

// CurrentPrice defines the current price for an asset pair in the pricefeed
// module.
type CurrentPrice struct {
	PairID string                                 `protobuf:"bytes,1,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	Price  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price"`
}

func (m *CurrentPrice) Reset()         { *m = CurrentPrice{} }
func (m *CurrentPrice) String() string { return proto.CompactTextString(m) }
func (*CurrentPrice) ProtoMessage()    {}
func (*CurrentPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e08791a9dd0830, []int{5}
}
func (m *CurrentPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrentPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentPrice.Merge(m, src)
}
func (m *CurrentPrice) XXX_Size() int {
	return m.Size()
}
func (m *CurrentPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentPrice.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentPrice proto.InternalMessageInfo

func (m *CurrentPrice) GetPairID() string {
	if m != nil {
		return m.PairID
	}
	return ""
}

// CurrentTWAP states defines the numerator and denominator for the TWAP calculation
type CurrentTWAP struct {
	PairID      string                                 `protobuf:"bytes,1,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	Numerator   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=numerator,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"numerator"`
	Denominator github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=denominator,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"denominator"`
	Price       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price"`
}

func (m *CurrentTWAP) Reset()         { *m = CurrentTWAP{} }
func (m *CurrentTWAP) String() string { return proto.CompactTextString(m) }
func (*CurrentTWAP) ProtoMessage()    {}
func (*CurrentTWAP) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1e08791a9dd0830, []int{6}
}
func (m *CurrentTWAP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentTWAP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentTWAP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrentTWAP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentTWAP.Merge(m, src)
}
func (m *CurrentTWAP) XXX_Size() int {
	return m.Size()
}
func (m *CurrentTWAP) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentTWAP.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentTWAP proto.InternalMessageInfo

func (m *CurrentTWAP) GetPairID() string {
	if m != nil {
		return m.PairID
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "nibiru.pricefeed.v1.Params")
	proto.RegisterType((*PriceSnapshot)(nil), "nibiru.pricefeed.v1.PriceSnapshot")
	proto.RegisterType((*OraclesMarshaler)(nil), "nibiru.pricefeed.v1.OraclesMarshaler")
	proto.RegisterType((*ActivePairMarshaler)(nil), "nibiru.pricefeed.v1.ActivePairMarshaler")
	proto.RegisterType((*PostedPrice)(nil), "nibiru.pricefeed.v1.PostedPrice")
	proto.RegisterType((*CurrentPrice)(nil), "nibiru.pricefeed.v1.CurrentPrice")
	proto.RegisterType((*CurrentTWAP)(nil), "nibiru.pricefeed.v1.CurrentTWAP")
}

func init() { proto.RegisterFile("pricefeed/state.proto", fileDescriptor_c1e08791a9dd0830) }

var fileDescriptor_c1e08791a9dd0830 = []byte{
	// 648 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4f, 0x4f, 0x13, 0x4f,
	0x18, 0xee, 0x50, 0x28, 0x74, 0xca, 0x2f, 0xf9, 0x65, 0x41, 0xad, 0x60, 0x76, 0xeb, 0x9a, 0x98,
	0x1e, 0x64, 0x37, 0xa0, 0x27, 0xe3, 0xa5, 0x4b, 0x2f, 0x44, 0xd0, 0xba, 0x92, 0x90, 0x78, 0x69,
	0xa6, 0xbb, 0x43, 0x3b, 0xa1, 0xbb, 0xb3, 0x99, 0x99, 0x02, 0xfd, 0x16, 0x78, 0x31, 0x7c, 0x04,
	0x3f, 0x0a, 0x27, 0xc3, 0x4d, 0xe3, 0xa1, 0x62, 0xb9, 0x79, 0xf4, 0xe8, 0xc9, 0xcc, 0x9f, 0xb6,
	0x04, 0x39, 0x20, 0x78, 0xda, 0x9d, 0x79, 0xde, 0x79, 0x9e, 0x67, 0x9e, 0xf7, 0xcd, 0xc0, 0x3b,
	0x19, 0x23, 0x11, 0xde, 0xc5, 0x38, 0xf6, 0xb9, 0x40, 0x02, 0x7b, 0x19, 0xa3, 0x82, 0x5a, 0x0b,
	0x29, 0x69, 0x11, 0xd6, 0xf3, 0xc6, 0xa8, 0xb7, 0xbf, 0xba, 0xb4, 0xd8, 0xa6, 0x6d, 0xaa, 0x70,
	0x5f, 0xfe, 0xe9, 0xd2, 0x25, 0xa7, 0x4d, 0x69, 0xbb, 0x8b, 0x7d, 0xb5, 0x6a, 0xf5, 0x76, 0x7d,
	0x41, 0x12, 0xcc, 0x05, 0x4a, 0x32, 0x53, 0x60, 0x5f, 0x2e, 0x88, 0x7b, 0x0c, 0x09, 0x42, 0x53,
	0x83, 0x3f, 0x30, 0x38, 0xca, 0x88, 0x8f, 0xd2, 0x94, 0x0a, 0x05, 0x72, 0x83, 0x2e, 0x44, 0x34,
	0x49, 0x68, 0xea, 0xeb, 0x8f, 0xde, 0x74, 0x3f, 0x03, 0x58, 0x68, 0x20, 0x86, 0x12, 0x6e, 0x3d,
	0x83, 0x33, 0x19, 0x22, 0x8c, 0x97, 0x41, 0x25, 0x5f, 0x2d, 0xad, 0x95, 0x3d, 0xe3, 0xdc, 0xd4,
	0xd7, 0x38, 0xc7, 0xa2, 0x81, 0x08, 0x0b, 0xa6, 0x4f, 0x06, 0x4e, 0x2e, 0xd4, 0xc5, 0xd6, 0x07,
	0x00, 0x17, 0xc5, 0x01, 0xca, 0x9a, 0x5d, 0x4a, 0xf7, 0x5a, 0x28, 0xda, 0x6b, 0x1e, 0x90, 0x34,
	0xa6, 0x07, 0xe5, 0xa9, 0x0a, 0xa8, 0x96, 0xd6, 0xee, 0x7b, 0xda, 0x93, 0x37, 0xf2, 0xec, 0xd5,
	0x8d, 0xe7, 0x60, 0x43, 0xd2, 0xfc, 0x18, 0x38, 0xf6, 0x55, 0xc7, 0x9f, 0xd0, 0x84, 0x08, 0x9c,
	0x64, 0xa2, 0xff, 0x73, 0xe0, 0x2c, 0xf7, 0x51, 0xd2, 0x7d, 0xee, 0x5e, 0x55, 0xe7, 0x1e, 0x7f,
	0x73, 0x40, 0x68, 0x49, 0x68, 0xd3, 0x20, 0x3b, 0x1a, 0x78, 0x0f, 0xe0, 0x7f, 0x0d, 0x19, 0xfa,
	0xdb, 0x14, 0x65, 0xbc, 0x43, 0x85, 0x75, 0x0f, 0xce, 0x4a, 0xcf, 0x4d, 0x12, 0x97, 0x41, 0x05,
	0x54, 0x8b, 0x61, 0x41, 0x2e, 0x37, 0x62, 0xab, 0x0e, 0x67, 0x54, 0x7b, 0x94, 0xe7, 0x62, 0xe0,
	0x49, 0x63, 0x5f, 0x07, 0xce, 0xe3, 0x36, 0x11, 0x9d, 0x5e, 0x4b, 0x06, 0xe0, 0x47, 0x94, 0x27,
	0x94, 0x9b, 0xcf, 0x0a, 0x8f, 0xf7, 0x7c, 0xd1, 0xcf, 0x30, 0xf7, 0xea, 0x38, 0x0a, 0xf5, 0x61,
	0xeb, 0x21, 0x9c, 0x1f, 0x37, 0xac, 0x99, 0xf0, 0x72, 0xbe, 0x02, 0xaa, 0xf9, 0xb0, 0x34, 0xde,
	0xdb, 0xe2, 0x6e, 0x13, 0xfe, 0xff, 0x9a, 0xa1, 0xa8, 0x8b, 0xf9, 0x16, 0x62, 0xbc, 0x83, 0xba,
	0x98, 0x59, 0x2f, 0xe1, 0x2c, 0xd5, 0x7b, 0x2a, 0xf8, 0xf9, 0x60, 0xf5, 0xd7, 0xc0, 0x59, 0xb9,
	0x86, 0x74, 0x2d, 0x8a, 0x6a, 0x71, 0xcc, 0x30, 0xe7, 0xe1, 0x88, 0xc1, 0x5d, 0x83, 0x0b, 0xb5,
	0x48, 0x90, 0x7d, 0x2c, 0x1b, 0x35, 0xd1, 0x58, 0x86, 0x45, 0xc2, 0x9b, 0x48, 0x21, 0xea, 0xee,
	0x73, 0xe1, 0x1c, 0xe1, 0xba, 0xd2, 0xfd, 0x04, 0x60, 0xa9, 0x41, 0xb9, 0xc0, 0xb1, 0x8a, 0xcb,
	0x7a, 0x74, 0x29, 0xa6, 0x00, 0x0e, 0x07, 0x4e, 0x41, 0x12, 0x6e, 0xd4, 0xc7, 0x91, 0xdd, 0x85,
	0x05, 0xad, 0xa9, 0x33, 0x0b, 0xcd, 0x6a, 0x12, 0x65, 0xfe, 0x36, 0x51, 0xbe, 0x80, 0x05, 0x7c,
	0x98, 0x11, 0xd6, 0x2f, 0x4f, 0xab, 0x29, 0x5a, 0xfa, 0x63, 0x8a, 0xb6, 0x47, 0xa9, 0x06, 0x73,
	0x52, 0xe2, 0x48, 0x4e, 0x81, 0x39, 0xe3, 0xf6, 0xe1, 0xfc, 0x7a, 0x8f, 0x31, 0x9c, 0x8a, 0xbf,
	0xb8, 0xd0, 0x3f, 0x99, 0x01, 0xf7, 0x78, 0x0a, 0x96, 0x8c, 0xf6, 0xf6, 0x4e, 0xad, 0x71, 0x3d,
	0xe9, 0x4d, 0x58, 0x4c, 0x7b, 0x09, 0x66, 0x48, 0x50, 0x76, 0x43, 0xf9, 0x09, 0x81, 0xd5, 0x80,
	0xa5, 0x18, 0xa7, 0x34, 0x21, 0xa9, 0xe2, 0xbb, 0x59, 0x1f, 0x2e, 0x52, 0x4c, 0xa2, 0x99, 0xbe,
	0x45, 0x34, 0xc1, 0x9b, 0xb3, 0xef, 0x36, 0xf8, 0x38, 0xb4, 0xc1, 0xc9, 0xd0, 0x06, 0xa7, 0x43,
	0x1b, 0x9c, 0x0d, 0x6d, 0x70, 0x74, 0x6e, 0xe7, 0x4e, 0xcf, 0xed, 0xdc, 0x97, 0x73, 0x3b, 0xf7,
	0xce, 0xbf, 0x40, 0xf8, 0x4a, 0xbd, 0x3d, 0xeb, 0x1d, 0x44, 0x52, 0x5f, 0xbf, 0x43, 0xfe, 0xa1,
	0x3f, 0x79, 0x61, 0x15, 0x7b, 0xab, 0xa0, 0xc6, 0xe1, 0xe9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xb6, 0x51, 0x65, 0x1c, 0x7b, 0x05, 0x00, 0x00,
}

func (this *Params) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Params")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Params but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Params but is not nil && this == nil")
	}
	if len(this.Pairs) != len(that1.Pairs) {
		return fmt.Errorf("Pairs this(%v) Not Equal that(%v)", len(this.Pairs), len(that1.Pairs))
	}
	for i := range this.Pairs {
		if !this.Pairs[i].Equal(&that1.Pairs[i]) {
			return fmt.Errorf("Pairs this[%v](%v) Not Equal that[%v](%v)", i, this.Pairs[i], i, that1.Pairs[i])
		}
	}
	if this.TwapLookbackWindow != that1.TwapLookbackWindow {
		return fmt.Errorf("TwapLookbackWindow this(%v) Not Equal that(%v)", this.TwapLookbackWindow, that1.TwapLookbackWindow)
	}
	return nil
}
func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Pairs) != len(that1.Pairs) {
		return false
	}
	for i := range this.Pairs {
		if !this.Pairs[i].Equal(&that1.Pairs[i]) {
			return false
		}
	}
	if this.TwapLookbackWindow != that1.TwapLookbackWindow {
		return false
	}
	return true
}
func (this *PriceSnapshot) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PriceSnapshot)
	if !ok {
		that2, ok := that.(PriceSnapshot)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PriceSnapshot")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PriceSnapshot but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PriceSnapshot but is not nil && this == nil")
	}
	if this.PairId != that1.PairId {
		return fmt.Errorf("PairId this(%v) Not Equal that(%v)", this.PairId, that1.PairId)
	}
	if !this.Price.Equal(that1.Price) {
		return fmt.Errorf("Price this(%v) Not Equal that(%v)", this.Price, that1.Price)
	}
	if this.TimestampMs != that1.TimestampMs {
		return fmt.Errorf("TimestampMs this(%v) Not Equal that(%v)", this.TimestampMs, that1.TimestampMs)
	}
	return nil
}
func (this *PriceSnapshot) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PriceSnapshot)
	if !ok {
		that2, ok := that.(PriceSnapshot)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PairId != that1.PairId {
		return false
	}
	if !this.Price.Equal(that1.Price) {
		return false
	}
	if this.TimestampMs != that1.TimestampMs {
		return false
	}
	return true
}
func (this *OraclesMarshaler) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OraclesMarshaler)
	if !ok {
		that2, ok := that.(OraclesMarshaler)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OraclesMarshaler")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OraclesMarshaler but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OraclesMarshaler but is not nil && this == nil")
	}
	if len(this.Oracles) != len(that1.Oracles) {
		return fmt.Errorf("Oracles this(%v) Not Equal that(%v)", len(this.Oracles), len(that1.Oracles))
	}
	for i := range this.Oracles {
		if !bytes.Equal(this.Oracles[i], that1.Oracles[i]) {
			return fmt.Errorf("Oracles this[%v](%v) Not Equal that[%v](%v)", i, this.Oracles[i], i, that1.Oracles[i])
		}
	}
	return nil
}
func (this *OraclesMarshaler) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OraclesMarshaler)
	if !ok {
		that2, ok := that.(OraclesMarshaler)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Oracles) != len(that1.Oracles) {
		return false
	}
	for i := range this.Oracles {
		if !bytes.Equal(this.Oracles[i], that1.Oracles[i]) {
			return false
		}
	}
	return true
}
func (this *ActivePairMarshaler) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ActivePairMarshaler)
	if !ok {
		that2, ok := that.(ActivePairMarshaler)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ActivePairMarshaler")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ActivePairMarshaler but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ActivePairMarshaler but is not nil && this == nil")
	}
	if this.IsActive != that1.IsActive {
		return fmt.Errorf("IsActive this(%v) Not Equal that(%v)", this.IsActive, that1.IsActive)
	}
	return nil
}
func (this *ActivePairMarshaler) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivePairMarshaler)
	if !ok {
		that2, ok := that.(ActivePairMarshaler)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsActive != that1.IsActive {
		return false
	}
	return true
}
func (this *PostedPrice) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PostedPrice)
	if !ok {
		that2, ok := that.(PostedPrice)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PostedPrice")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PostedPrice but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PostedPrice but is not nil && this == nil")
	}
	if this.PairID != that1.PairID {
		return fmt.Errorf("PairID this(%v) Not Equal that(%v)", this.PairID, that1.PairID)
	}
	if this.Oracle != that1.Oracle {
		return fmt.Errorf("Oracle this(%v) Not Equal that(%v)", this.Oracle, that1.Oracle)
	}
	if !this.Price.Equal(that1.Price) {
		return fmt.Errorf("Price this(%v) Not Equal that(%v)", this.Price, that1.Price)
	}
	if !this.Expiry.Equal(that1.Expiry) {
		return fmt.Errorf("Expiry this(%v) Not Equal that(%v)", this.Expiry, that1.Expiry)
	}
	return nil
}
func (this *PostedPrice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PostedPrice)
	if !ok {
		that2, ok := that.(PostedPrice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PairID != that1.PairID {
		return false
	}
	if this.Oracle != that1.Oracle {
		return false
	}
	if !this.Price.Equal(that1.Price) {
		return false
	}
	if !this.Expiry.Equal(that1.Expiry) {
		return false
	}
	return true
}
func (this *CurrentPrice) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CurrentPrice)
	if !ok {
		that2, ok := that.(CurrentPrice)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CurrentPrice")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CurrentPrice but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CurrentPrice but is not nil && this == nil")
	}
	if this.PairID != that1.PairID {
		return fmt.Errorf("PairID this(%v) Not Equal that(%v)", this.PairID, that1.PairID)
	}
	if !this.Price.Equal(that1.Price) {
		return fmt.Errorf("Price this(%v) Not Equal that(%v)", this.Price, that1.Price)
	}
	return nil
}
func (this *CurrentPrice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CurrentPrice)
	if !ok {
		that2, ok := that.(CurrentPrice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PairID != that1.PairID {
		return false
	}
	if !this.Price.Equal(that1.Price) {
		return false
	}
	return true
}
func (this *CurrentTWAP) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CurrentTWAP)
	if !ok {
		that2, ok := that.(CurrentTWAP)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CurrentTWAP")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CurrentTWAP but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CurrentTWAP but is not nil && this == nil")
	}
	if this.PairID != that1.PairID {
		return fmt.Errorf("PairID this(%v) Not Equal that(%v)", this.PairID, that1.PairID)
	}
	if !this.Numerator.Equal(that1.Numerator) {
		return fmt.Errorf("Numerator this(%v) Not Equal that(%v)", this.Numerator, that1.Numerator)
	}
	if !this.Denominator.Equal(that1.Denominator) {
		return fmt.Errorf("Denominator this(%v) Not Equal that(%v)", this.Denominator, that1.Denominator)
	}
	if !this.Price.Equal(that1.Price) {
		return fmt.Errorf("Price this(%v) Not Equal that(%v)", this.Price, that1.Price)
	}
	return nil
}
func (this *CurrentTWAP) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CurrentTWAP)
	if !ok {
		that2, ok := that.(CurrentTWAP)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PairID != that1.PairID {
		return false
	}
	if !this.Numerator.Equal(that1.Numerator) {
		return false
	}
	if !this.Denominator.Equal(that1.Denominator) {
		return false
	}
	if !this.Price.Equal(that1.Price) {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.TwapLookbackWindow, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.TwapLookbackWindow):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintState(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if len(m.Pairs) > 0 {
		for iNdEx := len(m.Pairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintState(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PriceSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimestampMs != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.TimestampMs))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintState(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OraclesMarshaler) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OraclesMarshaler) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OraclesMarshaler) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Oracles) > 0 {
		for iNdEx := len(m.Oracles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Oracles[iNdEx])
			copy(dAtA[i:], m.Oracles[iNdEx])
			i = encodeVarintState(dAtA, i, uint64(len(m.Oracles[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActivePairMarshaler) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivePairMarshaler) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivePairMarshaler) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PostedPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostedPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostedPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Expiry, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Expiry):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintState(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x22
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Oracle) > 0 {
		i -= len(m.Oracle)
		copy(dAtA[i:], m.Oracle)
		i = encodeVarintState(dAtA, i, uint64(len(m.Oracle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PairID) > 0 {
		i -= len(m.PairID)
		copy(dAtA[i:], m.PairID)
		i = encodeVarintState(dAtA, i, uint64(len(m.PairID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CurrentPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrentPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.PairID) > 0 {
		i -= len(m.PairID)
		copy(dAtA[i:], m.PairID)
		i = encodeVarintState(dAtA, i, uint64(len(m.PairID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CurrentTWAP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentTWAP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrentTWAP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Denominator.Size()
		i -= size
		if _, err := m.Denominator.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Numerator.Size()
		i -= size
		if _, err := m.Numerator.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.PairID) > 0 {
		i -= len(m.PairID)
		copy(dAtA[i:], m.PairID)
		i = encodeVarintState(dAtA, i, uint64(len(m.PairID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintState(dAtA []byte, offset int, v uint64) int {
	offset -= sovState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for _, e := range m.Pairs {
			l = e.Size()
			n += 1 + l + sovState(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.TwapLookbackWindow)
	n += 1 + l + sovState(uint64(l))
	return n
}

func (m *PriceSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = m.Price.Size()
	n += 1 + l + sovState(uint64(l))
	if m.TimestampMs != 0 {
		n += 1 + sovState(uint64(m.TimestampMs))
	}
	return n
}

func (m *OraclesMarshaler) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Oracles) > 0 {
		for _, b := range m.Oracles {
			l = len(b)
			n += 1 + l + sovState(uint64(l))
		}
	}
	return n
}

func (m *ActivePairMarshaler) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsActive {
		n += 2
	}
	return n
}

func (m *PostedPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairID)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.Oracle)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = m.Price.Size()
	n += 1 + l + sovState(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Expiry)
	n += 1 + l + sovState(uint64(l))
	return n
}

func (m *CurrentPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairID)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = m.Price.Size()
	n += 1 + l + sovState(uint64(l))
	return n
}

func (m *CurrentTWAP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairID)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = m.Numerator.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.Denominator.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.Price.Size()
	n += 1 + l + sovState(uint64(l))
	return n
}

func sovState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozState(x uint64) (n int) {
	return sovState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pairs = append(m.Pairs, common.AssetPair{})
			if err := m.Pairs[len(m.Pairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwapLookbackWindow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.TwapLookbackWindow, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampMs", wireType)
			}
			m.TimestampMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OraclesMarshaler) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OraclesMarshaler: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OraclesMarshaler: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracles", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oracles = append(m.Oracles, make([]byte, postIndex-iNdEx))
			copy(m.Oracles[len(m.Oracles)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivePairMarshaler) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivePairMarshaler: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivePairMarshaler: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostedPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostedPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostedPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oracle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Expiry, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentTWAP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentTWAP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentTWAP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numerator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Numerator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denominator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Denominator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupState = fmt.Errorf("proto: unexpected end of group")
)
