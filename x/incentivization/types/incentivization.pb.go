// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: incentivization/v1/incentivization.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateIncentivizationProgram is the request needed for the CreateIncentivizationProgram RPC.
type MsgCreateIncentivizationProgram struct {
	// sender defines the sender of the msg that needs to be signed.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// lp_denom defines the liquidity pool denom that we want to incentivize.
	LpDenom string `protobuf:"bytes,2,opt,name=lp_denom,json=lpDenom,proto3" json:"lp_denom,omitempty"`
	// min_lockup_duration defines the minimum lockup duration
	// required on the lp_denom to get the incentivization.
	MinLockupDuration *time.Duration `protobuf:"bytes,3,opt,name=min_lockup_duration,json=minLockupDuration,proto3,stdduration" json:"min_lockup_duration,omitempty"`
	// start_time identifies when the incentivization starts.
	StartTime *time.Time `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time,omitempty"`
	// epochs defines the number of epochs the incentivization
	// program will last.
	Epochs int64 `protobuf:"varint,5,opt,name=epochs,proto3" json:"epochs,omitempty"`
	// initial_funds defines the initial funds to bootstrap the incentivization program's escrow.
	// This is optional.
	InitialFunds github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=initial_funds,json=initialFunds,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"initial_funds"`
}

func (m *MsgCreateIncentivizationProgram) Reset()         { *m = MsgCreateIncentivizationProgram{} }
func (m *MsgCreateIncentivizationProgram) String() string { return proto.CompactTextString(m) }
func (*MsgCreateIncentivizationProgram) ProtoMessage()    {}
func (*MsgCreateIncentivizationProgram) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0a6e6c5ab9e048, []int{0}
}
func (m *MsgCreateIncentivizationProgram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateIncentivizationProgram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateIncentivizationProgram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateIncentivizationProgram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateIncentivizationProgram.Merge(m, src)
}
func (m *MsgCreateIncentivizationProgram) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateIncentivizationProgram) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateIncentivizationProgram.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateIncentivizationProgram proto.InternalMessageInfo

func (m *MsgCreateIncentivizationProgram) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgCreateIncentivizationProgram) GetLpDenom() string {
	if m != nil {
		return m.LpDenom
	}
	return ""
}

func (m *MsgCreateIncentivizationProgram) GetMinLockupDuration() *time.Duration {
	if m != nil {
		return m.MinLockupDuration
	}
	return nil
}

func (m *MsgCreateIncentivizationProgram) GetStartTime() *time.Time {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *MsgCreateIncentivizationProgram) GetEpochs() int64 {
	if m != nil {
		return m.Epochs
	}
	return 0
}

func (m *MsgCreateIncentivizationProgram) GetInitialFunds() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.InitialFunds
	}
	return nil
}

// MsgCreateIncentivizationProgramResponse is the response returned by the CreateIncentivizationProgram RPC.
type MsgCreateIncentivizationProgramResponse struct {
	// program_id defines the incentivization program unique identifier.
	ProgramId uint64 `protobuf:"varint,1,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
}

func (m *MsgCreateIncentivizationProgramResponse) Reset() {
	*m = MsgCreateIncentivizationProgramResponse{}
}
func (m *MsgCreateIncentivizationProgramResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateIncentivizationProgramResponse) ProtoMessage()    {}
func (*MsgCreateIncentivizationProgramResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0a6e6c5ab9e048, []int{1}
}
func (m *MsgCreateIncentivizationProgramResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateIncentivizationProgramResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateIncentivizationProgramResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateIncentivizationProgramResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateIncentivizationProgramResponse.Merge(m, src)
}
func (m *MsgCreateIncentivizationProgramResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateIncentivizationProgramResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateIncentivizationProgramResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateIncentivizationProgramResponse proto.InternalMessageInfo

func (m *MsgCreateIncentivizationProgramResponse) GetProgramId() uint64 {
	if m != nil {
		return m.ProgramId
	}
	return 0
}

// MsgFundIncentivizationProgram is the request for the FundIncentivizationProgram RPC.
type MsgFundIncentivizationProgram struct {
	// sender is the sender of the requests
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// id marks the incentivization program id.
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// funds is the amount of money sender deposits in the program funding escrow.
	Funds github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=funds,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"funds"`
}

func (m *MsgFundIncentivizationProgram) Reset()         { *m = MsgFundIncentivizationProgram{} }
func (m *MsgFundIncentivizationProgram) String() string { return proto.CompactTextString(m) }
func (*MsgFundIncentivizationProgram) ProtoMessage()    {}
func (*MsgFundIncentivizationProgram) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0a6e6c5ab9e048, []int{2}
}
func (m *MsgFundIncentivizationProgram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFundIncentivizationProgram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFundIncentivizationProgram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFundIncentivizationProgram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFundIncentivizationProgram.Merge(m, src)
}
func (m *MsgFundIncentivizationProgram) XXX_Size() int {
	return m.Size()
}
func (m *MsgFundIncentivizationProgram) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFundIncentivizationProgram.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFundIncentivizationProgram proto.InternalMessageInfo

func (m *MsgFundIncentivizationProgram) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgFundIncentivizationProgram) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgFundIncentivizationProgram) GetFunds() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Funds
	}
	return nil
}

type MsgFundIncentivizationProgramResponse struct {
}

func (m *MsgFundIncentivizationProgramResponse) Reset()         { *m = MsgFundIncentivizationProgramResponse{} }
func (m *MsgFundIncentivizationProgramResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFundIncentivizationProgramResponse) ProtoMessage()    {}
func (*MsgFundIncentivizationProgramResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0a6e6c5ab9e048, []int{3}
}
func (m *MsgFundIncentivizationProgramResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFundIncentivizationProgramResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFundIncentivizationProgramResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFundIncentivizationProgramResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFundIncentivizationProgramResponse.Merge(m, src)
}
func (m *MsgFundIncentivizationProgramResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFundIncentivizationProgramResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFundIncentivizationProgramResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFundIncentivizationProgramResponse proto.InternalMessageInfo

// IncentivizationProgram defines how an incentivization program looks like.
type IncentivizationProgram struct {
	// id defines the unique uint64 id of the program
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// escrow_address defines the escrow module account address
	// for the incentivization program.
	EscrowAddress string `protobuf:"bytes,2,opt,name=escrow_address,json=escrowAddress,proto3" json:"escrow_address,omitempty"`
	// remaining_epochs defines the number of epochs left before the incentivization
	// program can be considered finalized.
	RemainingEpochs int64 `protobuf:"varint,3,opt,name=remaining_epochs,json=remainingEpochs,proto3" json:"remaining_epochs,omitempty"`
	// lp_denom defines the liquidity pool denom that is being incentivized.
	LpDenom string `protobuf:"bytes,4,opt,name=lp_denom,json=lpDenom,proto3" json:"lp_denom,omitempty"`
	// min_lockup_duration defines the minimum lp_denom lockup period
	// required to get the epochs' rewards.
	MinLockupDuration time.Duration `protobuf:"bytes,5,opt,name=min_lockup_duration,json=minLockupDuration,proto3,stdduration" json:"min_lockup_duration"`
	// start_time defines the incentivization program start time.
	StartTime time.Time `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
}

func (m *IncentivizationProgram) Reset()         { *m = IncentivizationProgram{} }
func (m *IncentivizationProgram) String() string { return proto.CompactTextString(m) }
func (*IncentivizationProgram) ProtoMessage()    {}
func (*IncentivizationProgram) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0a6e6c5ab9e048, []int{4}
}
func (m *IncentivizationProgram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncentivizationProgram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncentivizationProgram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncentivizationProgram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncentivizationProgram.Merge(m, src)
}
func (m *IncentivizationProgram) XXX_Size() int {
	return m.Size()
}
func (m *IncentivizationProgram) XXX_DiscardUnknown() {
	xxx_messageInfo_IncentivizationProgram.DiscardUnknown(m)
}

var xxx_messageInfo_IncentivizationProgram proto.InternalMessageInfo

func (m *IncentivizationProgram) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *IncentivizationProgram) GetEscrowAddress() string {
	if m != nil {
		return m.EscrowAddress
	}
	return ""
}

func (m *IncentivizationProgram) GetRemainingEpochs() int64 {
	if m != nil {
		return m.RemainingEpochs
	}
	return 0
}

func (m *IncentivizationProgram) GetLpDenom() string {
	if m != nil {
		return m.LpDenom
	}
	return ""
}

func (m *IncentivizationProgram) GetMinLockupDuration() time.Duration {
	if m != nil {
		return m.MinLockupDuration
	}
	return 0
}

func (m *IncentivizationProgram) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

type GenesisState struct {
	IncentivizationPrograms []*IncentivizationProgram `protobuf:"bytes,1,rep,name=incentivization_programs,json=incentivizationPrograms,proto3" json:"incentivization_programs,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0a6e6c5ab9e048, []int{5}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetIncentivizationPrograms() []*IncentivizationProgram {
	if m != nil {
		return m.IncentivizationPrograms
	}
	return nil
}

type QueryIncentivizationProgramRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryIncentivizationProgramRequest) Reset()         { *m = QueryIncentivizationProgramRequest{} }
func (m *QueryIncentivizationProgramRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIncentivizationProgramRequest) ProtoMessage()    {}
func (*QueryIncentivizationProgramRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0a6e6c5ab9e048, []int{6}
}
func (m *QueryIncentivizationProgramRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIncentivizationProgramRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIncentivizationProgramRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIncentivizationProgramRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIncentivizationProgramRequest.Merge(m, src)
}
func (m *QueryIncentivizationProgramRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIncentivizationProgramRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIncentivizationProgramRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIncentivizationProgramRequest proto.InternalMessageInfo

func (m *QueryIncentivizationProgramRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryIncentivizationProgramResponse struct {
	IncentivizationProgram *IncentivizationProgram `protobuf:"bytes,1,opt,name=incentivization_program,json=incentivizationProgram,proto3" json:"incentivization_program,omitempty"`
}

func (m *QueryIncentivizationProgramResponse) Reset()         { *m = QueryIncentivizationProgramResponse{} }
func (m *QueryIncentivizationProgramResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIncentivizationProgramResponse) ProtoMessage()    {}
func (*QueryIncentivizationProgramResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0a6e6c5ab9e048, []int{7}
}
func (m *QueryIncentivizationProgramResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIncentivizationProgramResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIncentivizationProgramResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIncentivizationProgramResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIncentivizationProgramResponse.Merge(m, src)
}
func (m *QueryIncentivizationProgramResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIncentivizationProgramResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIncentivizationProgramResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIncentivizationProgramResponse proto.InternalMessageInfo

func (m *QueryIncentivizationProgramResponse) GetIncentivizationProgram() *IncentivizationProgram {
	if m != nil {
		return m.IncentivizationProgram
	}
	return nil
}

type QueryIncentivizationProgramsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryIncentivizationProgramsRequest) Reset()         { *m = QueryIncentivizationProgramsRequest{} }
func (m *QueryIncentivizationProgramsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIncentivizationProgramsRequest) ProtoMessage()    {}
func (*QueryIncentivizationProgramsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0a6e6c5ab9e048, []int{8}
}
func (m *QueryIncentivizationProgramsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIncentivizationProgramsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIncentivizationProgramsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIncentivizationProgramsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIncentivizationProgramsRequest.Merge(m, src)
}
func (m *QueryIncentivizationProgramsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIncentivizationProgramsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIncentivizationProgramsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIncentivizationProgramsRequest proto.InternalMessageInfo

func (m *QueryIncentivizationProgramsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryIncentivizationProgramsResponse struct {
	IncentivizationPrograms []*IncentivizationProgram `protobuf:"bytes,1,rep,name=incentivization_programs,json=incentivizationPrograms,proto3" json:"incentivization_programs,omitempty"`
	Pagination              *query.PageResponse       `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryIncentivizationProgramsResponse) Reset()         { *m = QueryIncentivizationProgramsResponse{} }
func (m *QueryIncentivizationProgramsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIncentivizationProgramsResponse) ProtoMessage()    {}
func (*QueryIncentivizationProgramsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0a6e6c5ab9e048, []int{9}
}
func (m *QueryIncentivizationProgramsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIncentivizationProgramsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIncentivizationProgramsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIncentivizationProgramsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIncentivizationProgramsResponse.Merge(m, src)
}
func (m *QueryIncentivizationProgramsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIncentivizationProgramsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIncentivizationProgramsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIncentivizationProgramsResponse proto.InternalMessageInfo

func (m *QueryIncentivizationProgramsResponse) GetIncentivizationPrograms() []*IncentivizationProgram {
	if m != nil {
		return m.IncentivizationPrograms
	}
	return nil
}

func (m *QueryIncentivizationProgramsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgCreateIncentivizationProgram)(nil), "nibiru.incentivization.v1.MsgCreateIncentivizationProgram")
	proto.RegisterType((*MsgCreateIncentivizationProgramResponse)(nil), "nibiru.incentivization.v1.MsgCreateIncentivizationProgramResponse")
	proto.RegisterType((*MsgFundIncentivizationProgram)(nil), "nibiru.incentivization.v1.MsgFundIncentivizationProgram")
	proto.RegisterType((*MsgFundIncentivizationProgramResponse)(nil), "nibiru.incentivization.v1.MsgFundIncentivizationProgramResponse")
	proto.RegisterType((*IncentivizationProgram)(nil), "nibiru.incentivization.v1.IncentivizationProgram")
	proto.RegisterType((*GenesisState)(nil), "nibiru.incentivization.v1.GenesisState")
	proto.RegisterType((*QueryIncentivizationProgramRequest)(nil), "nibiru.incentivization.v1.QueryIncentivizationProgramRequest")
	proto.RegisterType((*QueryIncentivizationProgramResponse)(nil), "nibiru.incentivization.v1.QueryIncentivizationProgramResponse")
	proto.RegisterType((*QueryIncentivizationProgramsRequest)(nil), "nibiru.incentivization.v1.QueryIncentivizationProgramsRequest")
	proto.RegisterType((*QueryIncentivizationProgramsResponse)(nil), "nibiru.incentivization.v1.QueryIncentivizationProgramsResponse")
}

func init() {
	proto.RegisterFile("incentivization/v1/incentivization.proto", fileDescriptor_cd0a6e6c5ab9e048)
}

var fileDescriptor_cd0a6e6c5ab9e048 = []byte{
	// 904 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x41, 0x8f, 0xdb, 0x44,
	0x14, 0xde, 0x49, 0xb2, 0xdb, 0xee, 0xd0, 0x16, 0x18, 0xd0, 0xae, 0xd7, 0xda, 0x3a, 0x91, 0x69,
	0xbb, 0x01, 0x09, 0x9b, 0x6c, 0x5b, 0x09, 0x15, 0x41, 0x21, 0x5b, 0x5a, 0x2a, 0xb1, 0xb4, 0xb8,
	0x9c, 0xb8, 0x58, 0x13, 0x7b, 0xea, 0x1d, 0x1a, 0xcf, 0xb8, 0x9e, 0x71, 0xa0, 0x88, 0x13, 0x7f,
	0x80, 0x22, 0x2e, 0xfc, 0x86, 0x5e, 0x38, 0x72, 0xe3, 0x88, 0x7a, 0xac, 0xd4, 0x03, 0x5c, 0xa0,
	0x68, 0x97, 0x1f, 0xc0, 0x4f, 0x40, 0x1e, 0x8f, 0x43, 0x92, 0x5d, 0x3b, 0xda, 0x08, 0xf5, 0x94,
	0xcc, 0x9b, 0xf9, 0xde, 0xbc, 0xef, 0xbd, 0xef, 0xbd, 0x31, 0xec, 0x52, 0x16, 0x10, 0x26, 0xe9,
	0x88, 0x7e, 0x8d, 0x25, 0xe5, 0xcc, 0x1d, 0xf5, 0xdc, 0x19, 0x93, 0x93, 0xa4, 0x5c, 0x72, 0xb4,
	0xc1, 0xe8, 0x80, 0xa6, 0x99, 0x33, 0xbb, 0x3b, 0xea, 0x99, 0xed, 0x88, 0xf3, 0x68, 0x48, 0x5c,
	0x75, 0x70, 0x90, 0xdd, 0x75, 0x25, 0x8d, 0x89, 0x90, 0x38, 0x4e, 0x0a, 0xac, 0x69, 0xcd, 0x1e,
	0x08, 0xb3, 0x74, 0xc2, 0xb7, 0xf9, 0x6a, 0xc4, 0x23, 0xae, 0xfe, 0xba, 0xf9, 0x3f, 0x6d, 0xdd,
	0xd4, 0x28, 0x9c, 0x50, 0x17, 0x33, 0xc6, 0xa5, 0x82, 0x08, 0xbd, 0xfb, 0x46, 0xc0, 0x45, 0xcc,
	0x85, 0x3b, 0xc0, 0x82, 0xb8, 0xf7, 0x33, 0x92, 0x3e, 0x70, 0x47, 0xbd, 0x01, 0x91, 0xb8, 0xe7,
	0x26, 0x38, 0xa2, 0x6c, 0xd2, 0xbf, 0x35, 0x79, 0xb6, 0x3c, 0x15, 0x70, 0xaa, 0xf7, 0xed, 0x7f,
	0x1a, 0xb0, 0xbd, 0x2b, 0xa2, 0x9d, 0x94, 0x60, 0x49, 0x6e, 0x4e, 0x13, 0xbc, 0x9d, 0xf2, 0x28,
	0xc5, 0x31, 0x5a, 0x83, 0x2b, 0x82, 0xb0, 0x90, 0xa4, 0x06, 0xe8, 0x80, 0xee, 0xaa, 0xa7, 0x57,
	0x68, 0x03, 0x9e, 0x1c, 0x26, 0x7e, 0x48, 0x18, 0x8f, 0x8d, 0x86, 0xda, 0x39, 0x31, 0x4c, 0xae,
	0xe5, 0x4b, 0x74, 0x0b, 0xbe, 0x12, 0x53, 0xe6, 0x0f, 0x79, 0x70, 0x2f, 0x4b, 0xfc, 0x92, 0xb3,
	0xd1, 0xec, 0x80, 0xee, 0x0b, 0xdb, 0x1b, 0x4e, 0x41, 0xcf, 0x29, 0x93, 0xe2, 0x5c, 0xd3, 0x07,
	0xfa, 0xad, 0x1f, 0x9f, 0xb5, 0x81, 0xf7, 0x72, 0x4c, 0xd9, 0xc7, 0x0a, 0x5a, 0x6e, 0xa0, 0xab,
	0x10, 0x0a, 0x89, 0x53, 0xe9, 0xe7, 0x09, 0x36, 0x5a, 0xca, 0x8f, 0x79, 0xc8, 0xcf, 0x67, 0x65,
	0xf6, 0xfb, 0xad, 0x87, 0xb9, 0xa3, 0x55, 0x85, 0xc9, 0xad, 0x39, 0x09, 0x92, 0xf0, 0x60, 0x4f,
	0x18, 0xcb, 0x1d, 0xd0, 0x6d, 0x7a, 0x7a, 0x85, 0x12, 0x78, 0x9a, 0x32, 0x2a, 0x29, 0x1e, 0xfa,
	0x77, 0x33, 0x16, 0x0a, 0xe3, 0x44, 0xa7, 0xa9, 0x62, 0x2c, 0x12, 0xe7, 0xe4, 0x89, 0x73, 0x74,
	0xe2, 0x9c, 0x1d, 0x4e, 0x59, 0xff, 0xad, 0xc7, 0x7f, 0xb6, 0x97, 0x1e, 0x3d, 0x6b, 0x77, 0x23,
	0x2a, 0xf7, 0xb2, 0x81, 0x13, 0xf0, 0xd8, 0xd5, 0x59, 0x2e, 0x7e, 0xde, 0x14, 0xe1, 0x3d, 0x57,
	0x3e, 0x48, 0x88, 0x50, 0x00, 0xe1, 0x9d, 0xd2, 0x37, 0x5c, 0xcf, 0x2f, 0xb0, 0x3f, 0x82, 0x5b,
	0x73, 0x32, 0xee, 0x11, 0x91, 0x70, 0x26, 0x08, 0x3a, 0x0b, 0x61, 0x52, 0x98, 0x7c, 0x1a, 0xaa,
	0xec, 0xb7, 0xbc, 0x55, 0x6d, 0xb9, 0x19, 0xda, 0x8f, 0x00, 0x3c, 0xbb, 0x2b, 0xa2, 0xdc, 0xed,
	0x31, 0x4b, 0x77, 0x06, 0x36, 0x68, 0xa8, 0x8a, 0xd6, 0xf2, 0x1a, 0x34, 0x44, 0x18, 0x2e, 0x17,
	0xec, 0x9b, 0xff, 0x3f, 0xfb, 0xc2, 0xb3, 0xbd, 0x05, 0xcf, 0xd7, 0xc6, 0x5a, 0x92, 0xb6, 0x7f,
	0x6a, 0xc0, 0xb5, 0x0a, 0x3a, 0x45, 0xd8, 0x60, 0x1c, 0xf6, 0x79, 0x78, 0x86, 0x88, 0x20, 0xe5,
	0x5f, 0xfa, 0x38, 0x0c, 0x53, 0x22, 0x84, 0xd6, 0xe1, 0xe9, 0xc2, 0xfa, 0x41, 0x61, 0x44, 0xaf,
	0xc3, 0x97, 0x52, 0x12, 0x63, 0xca, 0x28, 0x8b, 0x7c, 0xad, 0x82, 0xa6, 0x52, 0xc1, 0x8b, 0x63,
	0xfb, 0x87, 0x85, 0x1c, 0x26, 0x35, 0xdd, 0x9a, 0xd6, 0xf4, 0x9d, 0xa3, 0x35, 0xbd, 0x3c, 0x4f,
	0xd3, 0x27, 0xf3, 0x8c, 0x55, 0xe9, 0x7a, 0x67, 0x4a, 0xd7, 0x2b, 0x73, 0x75, 0xad, 0x9c, 0xcd,
	0x68, 0xdb, 0xfe, 0x06, 0x9e, 0xba, 0x41, 0x18, 0x11, 0x54, 0xdc, 0x91, 0x58, 0x12, 0x34, 0x84,
	0xc6, 0xcc, 0xac, 0xf2, 0xb5, 0x68, 0x84, 0x01, 0x54, 0x81, 0x7b, 0x4e, 0xe5, 0x4c, 0x73, 0x2a,
	0xca, 0xb3, 0x4e, 0x8f, 0xb4, 0x0b, 0xfb, 0x12, 0xb4, 0x3f, 0xcd, 0x87, 0x50, 0x55, 0x59, 0xef,
	0x67, 0x44, 0xc8, 0xd9, 0xd2, 0xd9, 0xdf, 0x03, 0xf8, 0x5a, 0x2d, 0x4c, 0xb7, 0xc0, 0x17, 0x70,
	0xbd, 0x82, 0x8b, 0x72, 0xb6, 0x10, 0x95, 0xb5, 0xa3, 0xa9, 0xd8, 0x71, 0x6d, 0x48, 0xa2, 0xa4,
	0x72, 0x1d, 0xc2, 0xff, 0xe6, 0xac, 0x8e, 0xe2, 0xc2, 0x54, 0xc7, 0xa8, 0xa1, 0x3c, 0xee, 0x9b,
	0xdb, 0x38, 0x22, 0x1a, 0xeb, 0x4d, 0x20, 0xed, 0x3f, 0x00, 0x3c, 0x57, 0x7f, 0x9f, 0xce, 0xc1,
	0x73, 0xad, 0x27, 0xba, 0x31, 0x45, 0xaf, 0xa1, 0xe8, 0x6d, 0xcd, 0xa5, 0x57, 0x84, 0x3a, 0xc9,
	0x6f, 0xfb, 0xbb, 0x26, 0x6c, 0xee, 0x8a, 0x08, 0xfd, 0x0a, 0xe0, 0x66, 0xed, 0x03, 0x73, 0xa5,
	0x26, 0xfa, 0x39, 0xa3, 0xd2, 0xec, 0x2f, 0x8e, 0x1d, 0x4f, 0x9c, 0x0b, 0xdf, 0x3e, 0xfd, 0xfb,
	0x87, 0x46, 0xc7, 0xb6, 0xdc, 0xc2, 0xd7, 0xec, 0x77, 0x80, 0x1b, 0x28, 0x2f, 0xe8, 0x17, 0x00,
	0xcd, 0x9a, 0x61, 0xfb, 0x76, 0x7d, 0x28, 0xd5, 0x48, 0xf3, 0xfd, 0x45, 0x91, 0x63, 0x0a, 0xe7,
	0x14, 0x05, 0xcb, 0xde, 0xac, 0xa2, 0x90, 0x0f, 0xe1, 0xed, 0x9f, 0x9b, 0x70, 0x59, 0x29, 0x0e,
	0x3d, 0x05, 0x95, 0x43, 0xf6, 0xdd, 0x9a, 0x60, 0xe6, 0x37, 0xba, 0xf9, 0xde, 0xa2, 0x70, 0xcd,
	0xe4, 0x8a, 0x62, 0x72, 0x09, 0x6d, 0x57, 0x31, 0x39, 0xfc, 0x9d, 0x56, 0x76, 0x03, 0xfa, 0x0d,
	0xc0, 0xf5, 0x8a, 0x66, 0x42, 0x0b, 0xc6, 0x55, 0x76, 0xbd, 0x79, 0x75, 0x61, 0xbc, 0x26, 0xf6,
	0x8e, 0x22, 0x76, 0x19, 0x5d, 0x3c, 0x3e, 0x31, 0xd1, 0xbf, 0xf5, 0x78, 0xdf, 0x02, 0x4f, 0xf6,
	0x2d, 0xf0, 0xd7, 0xbe, 0x05, 0x1e, 0x1e, 0x58, 0x4b, 0x4f, 0x0e, 0xac, 0xa5, 0xdf, 0x0f, 0xac,
	0xa5, 0xcf, 0x2f, 0x4f, 0x3c, 0xc4, 0x9f, 0x28, 0xc7, 0x3b, 0x7b, 0x98, 0xb2, 0xf2, 0x92, 0xaf,
	0x0e, 0x5d, 0xa3, 0xde, 0xe6, 0xc1, 0x8a, 0x7a, 0x5c, 0x2e, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0x0a, 0x7f, 0xa0, 0x3b, 0x07, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateIncentivizationProgram allows an entity to create an incentivization program for a liquidity pool.
	CreateIncentivizationProgram(ctx context.Context, in *MsgCreateIncentivizationProgram, opts ...grpc.CallOption) (*MsgCreateIncentivizationProgramResponse, error)
	// FundIncentivizationProgram allows an entity to fund an already existing incentivization program with more coins.
	FundIncentivizationProgram(ctx context.Context, in *MsgFundIncentivizationProgram, opts ...grpc.CallOption) (*MsgFundIncentivizationProgramResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateIncentivizationProgram(ctx context.Context, in *MsgCreateIncentivizationProgram, opts ...grpc.CallOption) (*MsgCreateIncentivizationProgramResponse, error) {
	out := new(MsgCreateIncentivizationProgramResponse)
	err := c.cc.Invoke(ctx, "/nibiru.incentivization.v1.Msg/CreateIncentivizationProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FundIncentivizationProgram(ctx context.Context, in *MsgFundIncentivizationProgram, opts ...grpc.CallOption) (*MsgFundIncentivizationProgramResponse, error) {
	out := new(MsgFundIncentivizationProgramResponse)
	err := c.cc.Invoke(ctx, "/nibiru.incentivization.v1.Msg/FundIncentivizationProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateIncentivizationProgram allows an entity to create an incentivization program for a liquidity pool.
	CreateIncentivizationProgram(context.Context, *MsgCreateIncentivizationProgram) (*MsgCreateIncentivizationProgramResponse, error)
	// FundIncentivizationProgram allows an entity to fund an already existing incentivization program with more coins.
	FundIncentivizationProgram(context.Context, *MsgFundIncentivizationProgram) (*MsgFundIncentivizationProgramResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateIncentivizationProgram(ctx context.Context, req *MsgCreateIncentivizationProgram) (*MsgCreateIncentivizationProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIncentivizationProgram not implemented")
}
func (*UnimplementedMsgServer) FundIncentivizationProgram(ctx context.Context, req *MsgFundIncentivizationProgram) (*MsgFundIncentivizationProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundIncentivizationProgram not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateIncentivizationProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateIncentivizationProgram)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateIncentivizationProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nibiru.incentivization.v1.Msg/CreateIncentivizationProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateIncentivizationProgram(ctx, req.(*MsgCreateIncentivizationProgram))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FundIncentivizationProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFundIncentivizationProgram)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FundIncentivizationProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nibiru.incentivization.v1.Msg/FundIncentivizationProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FundIncentivizationProgram(ctx, req.(*MsgFundIncentivizationProgram))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nibiru.incentivization.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIncentivizationProgram",
			Handler:    _Msg_CreateIncentivizationProgram_Handler,
		},
		{
			MethodName: "FundIncentivizationProgram",
			Handler:    _Msg_FundIncentivizationProgram_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "incentivization/v1/incentivization.proto",
}

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	IncentivizationProgram(ctx context.Context, in *QueryIncentivizationProgramRequest, opts ...grpc.CallOption) (*QueryIncentivizationProgramResponse, error)
	IncentivizationPrograms(ctx context.Context, in *QueryIncentivizationProgramsRequest, opts ...grpc.CallOption) (*QueryIncentivizationProgramsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) IncentivizationProgram(ctx context.Context, in *QueryIncentivizationProgramRequest, opts ...grpc.CallOption) (*QueryIncentivizationProgramResponse, error) {
	out := new(QueryIncentivizationProgramResponse)
	err := c.cc.Invoke(ctx, "/nibiru.incentivization.v1.Query/IncentivizationProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IncentivizationPrograms(ctx context.Context, in *QueryIncentivizationProgramsRequest, opts ...grpc.CallOption) (*QueryIncentivizationProgramsResponse, error) {
	out := new(QueryIncentivizationProgramsResponse)
	err := c.cc.Invoke(ctx, "/nibiru.incentivization.v1.Query/IncentivizationPrograms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	IncentivizationProgram(context.Context, *QueryIncentivizationProgramRequest) (*QueryIncentivizationProgramResponse, error)
	IncentivizationPrograms(context.Context, *QueryIncentivizationProgramsRequest) (*QueryIncentivizationProgramsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) IncentivizationProgram(ctx context.Context, req *QueryIncentivizationProgramRequest) (*QueryIncentivizationProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncentivizationProgram not implemented")
}
func (*UnimplementedQueryServer) IncentivizationPrograms(ctx context.Context, req *QueryIncentivizationProgramsRequest) (*QueryIncentivizationProgramsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncentivizationPrograms not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_IncentivizationProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIncentivizationProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IncentivizationProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nibiru.incentivization.v1.Query/IncentivizationProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IncentivizationProgram(ctx, req.(*QueryIncentivizationProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IncentivizationPrograms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIncentivizationProgramsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IncentivizationPrograms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nibiru.incentivization.v1.Query/IncentivizationPrograms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IncentivizationPrograms(ctx, req.(*QueryIncentivizationProgramsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nibiru.incentivization.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IncentivizationProgram",
			Handler:    _Query_IncentivizationProgram_Handler,
		},
		{
			MethodName: "IncentivizationPrograms",
			Handler:    _Query_IncentivizationPrograms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "incentivization/v1/incentivization.proto",
}

func (m *MsgCreateIncentivizationProgram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateIncentivizationProgram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateIncentivizationProgram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InitialFunds) > 0 {
		for iNdEx := len(m.InitialFunds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InitialFunds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIncentivization(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Epochs != 0 {
		i = encodeVarintIncentivization(dAtA, i, uint64(m.Epochs))
		i--
		dAtA[i] = 0x28
	}
	if m.StartTime != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintIncentivization(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x22
	}
	if m.MinLockupDuration != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.MinLockupDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.MinLockupDuration):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintIncentivization(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LpDenom) > 0 {
		i -= len(m.LpDenom)
		copy(dAtA[i:], m.LpDenom)
		i = encodeVarintIncentivization(dAtA, i, uint64(len(m.LpDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintIncentivization(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateIncentivizationProgramResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateIncentivizationProgramResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateIncentivizationProgramResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProgramId != 0 {
		i = encodeVarintIncentivization(dAtA, i, uint64(m.ProgramId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgFundIncentivizationProgram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFundIncentivizationProgram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFundIncentivizationProgram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Funds) > 0 {
		for iNdEx := len(m.Funds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Funds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIncentivization(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Id != 0 {
		i = encodeVarintIncentivization(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintIncentivization(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFundIncentivizationProgramResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFundIncentivizationProgramResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFundIncentivizationProgramResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *IncentivizationProgram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncentivizationProgram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncentivizationProgram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintIncentivization(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x32
	n4, err4 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.MinLockupDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.MinLockupDuration):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintIncentivization(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x2a
	if len(m.LpDenom) > 0 {
		i -= len(m.LpDenom)
		copy(dAtA[i:], m.LpDenom)
		i = encodeVarintIncentivization(dAtA, i, uint64(len(m.LpDenom)))
		i--
		dAtA[i] = 0x22
	}
	if m.RemainingEpochs != 0 {
		i = encodeVarintIncentivization(dAtA, i, uint64(m.RemainingEpochs))
		i--
		dAtA[i] = 0x18
	}
	if len(m.EscrowAddress) > 0 {
		i -= len(m.EscrowAddress)
		copy(dAtA[i:], m.EscrowAddress)
		i = encodeVarintIncentivization(dAtA, i, uint64(len(m.EscrowAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintIncentivization(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IncentivizationPrograms) > 0 {
		for iNdEx := len(m.IncentivizationPrograms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncentivizationPrograms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIncentivization(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIncentivizationProgramRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIncentivizationProgramRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIncentivizationProgramRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintIncentivization(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIncentivizationProgramResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIncentivizationProgramResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIncentivizationProgramResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncentivizationProgram != nil {
		{
			size, err := m.IncentivizationProgram.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIncentivization(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIncentivizationProgramsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIncentivizationProgramsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIncentivizationProgramsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIncentivization(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIncentivizationProgramsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIncentivizationProgramsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIncentivizationProgramsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIncentivization(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.IncentivizationPrograms) > 0 {
		for iNdEx := len(m.IncentivizationPrograms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncentivizationPrograms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIncentivization(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintIncentivization(dAtA []byte, offset int, v uint64) int {
	offset -= sovIncentivization(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateIncentivizationProgram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovIncentivization(uint64(l))
	}
	l = len(m.LpDenom)
	if l > 0 {
		n += 1 + l + sovIncentivization(uint64(l))
	}
	if m.MinLockupDuration != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.MinLockupDuration)
		n += 1 + l + sovIncentivization(uint64(l))
	}
	if m.StartTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime)
		n += 1 + l + sovIncentivization(uint64(l))
	}
	if m.Epochs != 0 {
		n += 1 + sovIncentivization(uint64(m.Epochs))
	}
	if len(m.InitialFunds) > 0 {
		for _, e := range m.InitialFunds {
			l = e.Size()
			n += 1 + l + sovIncentivization(uint64(l))
		}
	}
	return n
}

func (m *MsgCreateIncentivizationProgramResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProgramId != 0 {
		n += 1 + sovIncentivization(uint64(m.ProgramId))
	}
	return n
}

func (m *MsgFundIncentivizationProgram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovIncentivization(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovIncentivization(uint64(m.Id))
	}
	if len(m.Funds) > 0 {
		for _, e := range m.Funds {
			l = e.Size()
			n += 1 + l + sovIncentivization(uint64(l))
		}
	}
	return n
}

func (m *MsgFundIncentivizationProgramResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *IncentivizationProgram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovIncentivization(uint64(m.Id))
	}
	l = len(m.EscrowAddress)
	if l > 0 {
		n += 1 + l + sovIncentivization(uint64(l))
	}
	if m.RemainingEpochs != 0 {
		n += 1 + sovIncentivization(uint64(m.RemainingEpochs))
	}
	l = len(m.LpDenom)
	if l > 0 {
		n += 1 + l + sovIncentivization(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.MinLockupDuration)
	n += 1 + l + sovIncentivization(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovIncentivization(uint64(l))
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IncentivizationPrograms) > 0 {
		for _, e := range m.IncentivizationPrograms {
			l = e.Size()
			n += 1 + l + sovIncentivization(uint64(l))
		}
	}
	return n
}

func (m *QueryIncentivizationProgramRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovIncentivization(uint64(m.Id))
	}
	return n
}

func (m *QueryIncentivizationProgramResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncentivizationProgram != nil {
		l = m.IncentivizationProgram.Size()
		n += 1 + l + sovIncentivization(uint64(l))
	}
	return n
}

func (m *QueryIncentivizationProgramsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovIncentivization(uint64(l))
	}
	return n
}

func (m *QueryIncentivizationProgramsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IncentivizationPrograms) > 0 {
		for _, e := range m.IncentivizationPrograms {
			l = e.Size()
			n += 1 + l + sovIncentivization(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovIncentivization(uint64(l))
	}
	return n
}

func sovIncentivization(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIncentivization(x uint64) (n int) {
	return sovIncentivization(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateIncentivizationProgram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentivization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateIncentivizationProgram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateIncentivizationProgram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentivization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentivization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentivization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentivization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LpDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLockupDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentivization
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentivization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinLockupDuration == nil {
				m.MinLockupDuration = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.MinLockupDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentivization
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentivization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epochs", wireType)
			}
			m.Epochs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epochs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialFunds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentivization
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentivization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialFunds = append(m.InitialFunds, types.Coin{})
			if err := m.InitialFunds[len(m.InitialFunds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIncentivization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentivization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateIncentivizationProgramResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentivization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateIncentivizationProgramResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateIncentivizationProgramResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			m.ProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProgramId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIncentivization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentivization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFundIncentivizationProgram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentivization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFundIncentivizationProgram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFundIncentivizationProgram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentivization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentivization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentivization
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentivization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Funds = append(m.Funds, types.Coin{})
			if err := m.Funds[len(m.Funds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIncentivization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentivization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFundIncentivizationProgramResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentivization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFundIncentivizationProgramResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFundIncentivizationProgramResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipIncentivization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentivization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncentivizationProgram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentivization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncentivizationProgram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncentivizationProgram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentivization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentivization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingEpochs", wireType)
			}
			m.RemainingEpochs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainingEpochs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentivization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentivization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LpDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLockupDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentivization
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentivization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.MinLockupDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentivization
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentivization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIncentivization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentivization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentivization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentivizationPrograms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentivization
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentivization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncentivizationPrograms = append(m.IncentivizationPrograms, &IncentivizationProgram{})
			if err := m.IncentivizationPrograms[len(m.IncentivizationPrograms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIncentivization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentivization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIncentivizationProgramRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentivization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIncentivizationProgramRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIncentivizationProgramRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIncentivization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentivization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIncentivizationProgramResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentivization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIncentivizationProgramResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIncentivizationProgramResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentivizationProgram", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentivization
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentivization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IncentivizationProgram == nil {
				m.IncentivizationProgram = &IncentivizationProgram{}
			}
			if err := m.IncentivizationProgram.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIncentivization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentivization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIncentivizationProgramsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentivization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIncentivizationProgramsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIncentivizationProgramsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentivization
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentivization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIncentivization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentivization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIncentivizationProgramsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentivization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIncentivizationProgramsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIncentivizationProgramsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentivizationPrograms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentivization
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentivization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncentivizationPrograms = append(m.IncentivizationPrograms, &IncentivizationProgram{})
			if err := m.IncentivizationPrograms[len(m.IncentivizationPrograms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentivization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentivization
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentivization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIncentivization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentivization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIncentivization(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIncentivization
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIncentivization
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIncentivization
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIncentivization
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIncentivization
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIncentivization
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIncentivization        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIncentivization          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIncentivization = fmt.Errorf("proto: unexpected end of group")
)
