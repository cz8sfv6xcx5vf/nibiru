syntax = "proto3";
package matrix.dex.v1;

import "dex/v1/params.proto";
import "dex/v1/pool.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/MatrixDao/matrix/x/dex/types";

// Msg defines the Msg service.
service Msg {
  // Used to create a pool.
  rpc CreatePool(MsgCreatePool) returns (MsgCreatePoolResponse);

  // Join a pool as a liquidity provider.
  rpc JoinPool(MsgJoinPool) returns (MsgJoinPoolResponse);
}

message MsgCreatePool {
  string creator = 1;

  PoolParams poolParams = 2 [(gogoproto.moretags) = "yaml:\"pool_params\""];

  repeated PoolAsset poolAssets = 3 [(gogoproto.nullable) = false];
}

message MsgCreatePoolResponse {
  uint64 poolId = 1;
}

/*
Message to join a pool (identified by poolId) with a set of tokens to deposit.
*/
message MsgJoinPool {
  string sender = 1 [(gogoproto.moretags) = "yaml:\"sender\""];

  uint64 poolId = 2 [(gogoproto.moretags) = "yaml:\"pool_id\""];

  repeated cosmos.base.v1beta1.Coin tokensIn = 3 [
    (gogoproto.moretags) = "yaml:\"tokens_in\"",
    (gogoproto.nullable) = false
  ];
}

/*
Response when a user joins a pool.
*/
message MsgJoinPoolResponse {
  // the final state of the pool after a join
  Pool pool = 1;

  // sum of LP tokens minted from the join
  cosmos.base.v1beta1.Coin numPoolSharesOut = 2 [
    (gogoproto.moretags) = "yaml:\"num_pool_shares_out\"",
    (gogoproto.nullable) = false
  ];

  // remaining tokens from attempting to join the pool
  repeated cosmos.base.v1beta1.Coin remainingCoins = 3 [
    (gogoproto.moretags) = "yaml:\"tokens_in\"",
    (gogoproto.nullable) = false
  ];
}