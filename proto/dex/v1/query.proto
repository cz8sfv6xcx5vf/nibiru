syntax = "proto3";
package nibiru.dex.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "dex/v1/params.proto";
import "dex/v1/pool.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/NibiruChain/nibiru/x/dex/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters of the dex module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/nibiru/dex/params";
  }

  // Next available pool id number.
  rpc PoolNumber(QueryPoolNumberRequest) returns (QueryPoolNumberResponse) {
    option (google.api.http).get = "/nibiru/dex/pool_number";
  }

  // Fetch a pool by id.
  rpc Pool(QueryPoolRequest) returns (QueryPoolResponse) {
    option (google.api.http).get = "/nibiru/dex/pool";
  }

  // Returns all pools.
  rpc Pools(QueryPoolsRequest) returns (QueryPoolsResponse) {
    option (google.api.http).get = "/nibiru/dex/pools";
  }

  // Parameters of a single pool.
  rpc PoolParams(QueryPoolParamsRequest) returns (QueryPoolParamsResponse) {
    option (google.api.http).get = "/nibiru/dex/pools/{poolId}/params";
  }

  // Number of pools.
  rpc NumPools(QueryNumPoolsRequest) returns (QueryNumPoolsResponse) {
    option (google.api.http).get = "/nibiru/dex/num_pools";
  }

  // Total liquidity across all pools.
  rpc TotalLiquidity(QueryTotalLiquidityRequest)
      returns (QueryTotalLiquidityResponse) {
    option (google.api.http).get = "/nibiru/dex/total_liquidity";
  }

  // Total liquidity in a single pool.
  rpc TotalPoolLiquidity(QueryTotalPoolLiquidityRequest)
      returns (QueryTotalPoolLiquidityResponse) {
    option (google.api.http).get =
        "/nibiru/dex/pools/{poolId}/total_pool_liquidity";
  }

  // Total shares in a single pool.
  rpc TotalShares(QueryTotalSharesRequest) returns (QueryTotalSharesResponse) {
    option (google.api.http).get = "/nibiru/dex/pools/{poolId}/total_shares";
  }

  // Instantaneous price of an asset in a pool.
  rpc SpotPrice(QuerySpotPriceRequest) returns (QuerySpotPriceResponse) {
    option (google.api.http).get = "/nibiru/dex/pools/{poolId}/prices";
  }

  // Estimates the amount of assets returned given an exact amount of tokens to
  // swap.
  rpc EstimateSwapExactAmountIn(QuerySwapExactAmountInRequest)
      returns (QuerySwapExactAmountInResponse) {
    option (google.api.http).get =
        "/nibiru/dex/{poolId}/estimate/swap_exact_amount_in";
  }

  // Estimates the amount of tokens required to return the exact amount of
  // assets requested.
  rpc EstimateSwapExactAmountOut(QuerySwapExactAmountOutRequest)
      returns (QuerySwapExactAmountOutResponse) {
    option (google.api.http).get =
        "/nibiru/dex/{poolId}/estimate/swap_exact_amount_out";
  }

  // Estimates the amount of pool shares returned given an amount of tokens to
  // join.
  rpc EstimateJoinExactAmountIn(QueryJoinExactAmountInRequest)
      returns (QueryJoinExactAmountInResponse) {
    option (google.api.http).get =
        "/nibiru/dex/{poolId}/estimate/join_exact_amount_in";
  }

  // Estimates the amount of tokens required to obtain an exact amount of pool
  // shares.
  rpc EstimateJoinExactAmountOut(QueryJoinExactAmountOutRequest)
      returns (QueryJoinExactAmountOutResponse) {
    option (google.api.http).get =
        "/nibiru/dex/{poolId}/estimate/join_exact_amount_out";
  }

  // Estimates the amount of tokens returned to the user given an exact amount
  // of pool shares.
  rpc EstimateExitExactAmountIn(QueryExitExactAmountInRequest)
      returns (QueryExitExactAmountInResponse) {
    option (google.api.http).get =
        "/nibiru/dex/{poolId}/estimate/exit_exact_amount_in";
  }

  // Estimates the amount of pool shares required to extract an exact amount of
  // tokens from the pool.
  rpc EstimateExitExactAmountOut(QueryExitExactAmountOutRequest)
      returns (QueryExitExactAmountOutResponse) {
    option (google.api.http).get =
        "/nibiru/dex/{poolId}/estimate/exit_exact_amount_out";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}
// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryPoolNumberRequest {}
message QueryPoolNumberResponse {
  uint64 poolId = 1;
}

message QueryPoolRequest {
  uint64 poolId = 1;
}
message QueryPoolResponse {
  Pool pool = 1;
}

message QueryPoolsRequest {}
message QueryPoolsResponse {}

message QueryPoolParamsRequest {
  uint64 poolId = 1;
}
message QueryPoolParamsResponse {}

message QueryNumPoolsRequest {}
message QueryNumPoolsResponse {}

// --------------------------------------------
// Query total liquidity the protocol
message QueryTotalLiquidityRequest {}
message QueryTotalLiquidityResponse {  
  repeated cosmos.base.v1beta1.Coin liquidity = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.moretags) = "yaml:\"liquidity\"",
    (gogoproto.nullable) = false
  ];
}

// --------------------------------------------
// Query total liquidity for a pool
message QueryTotalPoolLiquidityRequest {
  uint64 poolId = 1;
}

message QueryTotalPoolLiquidityResponse {  
  repeated cosmos.base.v1beta1.Coin liquidity = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.moretags) = "yaml:\"liquidity\"",
    (gogoproto.nullable) = false
  ];
}

message QueryTotalSharesRequest {
  uint64 poolId = 1;
}
message QueryTotalSharesResponse {}

message QuerySpotPriceRequest {
  uint64 poolId = 1;
}
message QuerySpotPriceResponse {}

message QuerySwapExactAmountInRequest {
  uint64 poolId = 1;
}
message QuerySwapExactAmountInResponse {}

message QuerySwapExactAmountOutRequest {
  uint64 poolId = 1;
}
message QuerySwapExactAmountOutResponse {}

message QueryJoinExactAmountInRequest {
  uint64 poolId = 1;
}
message QueryJoinExactAmountInResponse {}

message QueryJoinExactAmountOutRequest {
  uint64 poolId = 1;
}
message QueryJoinExactAmountOutResponse {}

message QueryExitExactAmountInRequest {
  uint64 poolId = 1;
}
message QueryExitExactAmountInResponse {}

message QueryExitExactAmountOutRequest {
  uint64 poolId = 1;
}
message QueryExitExactAmountOutResponse {}
