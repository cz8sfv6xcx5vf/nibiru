syntax = "proto3";
package MatrixDao.stablecoin.v1;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/MatrixDao/matrix/x/stablecoin/types";

// Msg defines the Msg service.
service Msg {
      rpc MintStable(MsgMintStable) returns (MsgMintStableResponse);
      rpc BurnStable(MsgBurnStable) returns (MsgBurnStableResponse);
}

/* 
MsgMintStable: Msg to mint USDM. A user deposits MTRX and collateral and gets 
USDM in return. The amount of USDM received depends on the current price set 
by the pricefeed library and the current collateral ratio for the protocol.
*/
message MsgMintStable {
  string creator = 1;
  cosmos.base.v1beta1.Coin stable = 2 [(gogoproto.nullable) = false];
}

/* MsgMintStableResponse specifies the amount of USDM token the user will receive after their
* mint transaction*/
message MsgMintStableResponse {
  cosmos.base.v1beta1.Coin stable = 1 [(gogoproto.nullable) = false];
}

/* MsgBurnStable allows users to burn USDM in exchange for MTRX and collateral in return. The amount of MTRX and 
* Collateral received depends on the current price set by the pricefeed library and the current collateral ratio
* for the protocol.*/
message MsgBurnStable {
  string creator = 1;
  cosmos.base.v1beta1.Coin stable = 2 [(gogoproto.nullable) = false];
}

/* MsgBurnStableResponse specifies the amount of collateral and governance token the user will receive after their
* burn transaction*/
message MsgBurnStableResponse {
  cosmos.base.v1beta1.Coin collateral = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin gov = 2 [(gogoproto.nullable) = false];
}