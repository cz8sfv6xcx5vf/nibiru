syntax = "proto3";

package nibiru.perp.v2;

import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "nibiru/perp/v2/state.proto";

option go_package = "github.com/NibiruChain/nibiru/x/perp/v2/types";

// Msg defines the x/perp Msg service.
service Msg {

  rpc RemoveMargin(MsgRemoveMargin) returns (MsgRemoveMarginResponse) {}

  rpc AddMargin(MsgAddMargin) returns (MsgAddMarginResponse) {}

  rpc MultiLiquidate(MsgMultiLiquidate) returns (MsgMultiLiquidateResponse) {}

  rpc MarketOrder(MsgMarketOrder) returns (MsgMarketOrderResponse) {}

  rpc ClosePosition(MsgClosePosition) returns (MsgClosePositionResponse) {}

  rpc PartialClose(MsgPartialClose) returns (MsgPartialCloseResponse) {}

  rpc SettlePosition(MsgSettlePosition) returns (MsgClosePositionResponse) {}

  rpc DonateToEcosystemFund(MsgDonateToEcosystemFund)
      returns (MsgDonateToEcosystemFundResponse) {}

  rpc ChangeCollateralDenom(MsgChangeCollateralDenom)
      returns (MsgChangeCollateralDenomResponse) {}

  rpc AllocateEpochRebates(MsgAllocateEpochRebates) returns (MsgAllocateEpochRebatesResponse) {}

  rpc WithdrawEpochRebates(MsgWithdrawEpochRebates) returns (MsgWithdrawEpochRebatesResponse) {}
}

// -------------------------- Settle Position --------------------------

/* MsgSettlePosition: Msg to remove margin. */
message MsgSettlePosition {
  string sender = 1;

  string pair = 2 [
    (gogoproto.customtype) =
        "github.com/NibiruChain/nibiru/x/common/asset.Pair",
    (gogoproto.nullable) = false
  ];

  uint64 version = 3;
}

// -------------------------- RemoveMargin --------------------------

/* MsgRemoveMargin: Msg to remove margin. */
message MsgRemoveMargin {
  string sender = 1;

  string pair = 2 [
    (gogoproto.customtype) =
        "github.com/NibiruChain/nibiru/x/common/asset.Pair",
    (gogoproto.nullable) = false
  ];

  cosmos.base.v1beta1.Coin margin = 3 [ (gogoproto.nullable) = false ];
}

message MsgRemoveMarginResponse {
  // tokens transferred back to the trader
  cosmos.base.v1beta1.Coin margin_out = 1 [ (gogoproto.nullable) = false ];

  // the funding payment applied on this position interaction
  string funding_payment = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // The resulting position
  nibiru.perp.v2.Position position = 3;
}

// -------------------------- AddMargin --------------------------

/* MsgAddMargin: Msg to remove margin. */
message MsgAddMargin {
  string sender = 1;

  string pair = 2 [
    (gogoproto.customtype) =
        "github.com/NibiruChain/nibiru/x/common/asset.Pair",
    (gogoproto.nullable) = false
  ];

  cosmos.base.v1beta1.Coin margin = 3 [ (gogoproto.nullable) = false ];
}

message MsgAddMarginResponse {
  string funding_payment = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  nibiru.perp.v2.Position position = 2;
}

// -------------------------- Liquidation --------------------------

message MsgMultiLiquidate {
  string sender = 1;

  message Liquidation {
    string pair = 1 [
      (gogoproto.customtype) =
          "github.com/NibiruChain/nibiru/x/common/asset.Pair",
      (gogoproto.nullable) = false
    ];
    string trader = 2;
  }

  repeated Liquidation liquidations = 2;
}

message MsgMultiLiquidateResponse {
  message LiquidationResponse {
    bool success = 1;
    string error = 2;

    cosmos.base.v1beta1.Coin liquidator_fee = 3 [ (gogoproto.nullable) = true ];
    // nullable since no fee is taken on failed liquidation

    cosmos.base.v1beta1.Coin perp_ef_fee = 4
        [ (gogoproto.nullable) = true ]; // perp ecosystem fund
    // nullable since no fee is taken on failed liquidation

    string trader = 5;
    string pair = 6 [
      (gogoproto.customtype) =
          "github.com/NibiruChain/nibiru/x/common/asset.Pair",
      (gogoproto.nullable) = false
    ];
  }

  repeated LiquidationResponse liquidations = 1;
}

// -------------------------- MarketOrder --------------------------

message MsgMarketOrder {
  string sender = 1;

  string pair = 2 [
    (gogoproto.customtype) =
        "github.com/NibiruChain/nibiru/x/common/asset.Pair",
    (gogoproto.nullable) = false
  ];

  nibiru.perp.v2.Direction side = 3;

  string quote_asset_amount = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  string leverage = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  string base_asset_amount_limit = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgMarketOrderResponse {
  nibiru.perp.v2.Position position = 1;

  // The amount of quote assets exchanged.
  string exchanged_notional_value = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // The amount of base assets exchanged.
  string exchanged_position_size = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // The funding payment applied on this position change, measured in quote
  // units.
  string funding_payment = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // The amount of PnL realized on this position changed, measured in quote
  // units.
  string realized_pnl = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // The unrealized PnL in the position after the position change, measured in
  // quote units.
  string unrealized_pnl_after = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // The amount of margin the trader has to give to the vault.
  // A negative value means the vault pays the trader.
  string margin_to_vault = 7 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // The position's notional value after the position change, measured in quote
  // units.
  string position_notional = 8 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// -------------------------- ClosePosition --------------------------

message MsgClosePosition {
  string sender = 1;

  string pair = 2 [
    (gogoproto.customtype) =
        "github.com/NibiruChain/nibiru/x/common/asset.Pair",
    (gogoproto.nullable) = false
  ];
}

message MsgClosePositionResponse {
  // The amount of quote assets exchanged.
  string exchanged_notional_value = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // The amount of base assets exchanged.
  string exchanged_position_size = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // The funding payment applied on this position change, measured in quote
  // units.
  string funding_payment = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // The amount of PnL realized on this position changed, measured in quote
  // units.
  string realized_pnl = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // The amount of margin the trader receives after closing the position, from
  // the vault. Should never be negative.
  string margin_to_trader = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message MsgPartialClose {
  string sender = 1;

  string pair = 2 [
    (gogoproto.customtype) =
        "github.com/NibiruChain/nibiru/x/common/asset.Pair",
    (gogoproto.nullable) = false
  ];

  string size = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message MsgPartialCloseResponse {
  // The amount of quote assets exchanged.
  string exchanged_notional_value = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // The amount of base assets exchanged.
  string exchanged_position_size = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // The funding payment applied on this position change, measured in quote
  // units.
  string funding_payment = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // The amount of PnL realized on this position changed, measured in quote
  // units.
  string realized_pnl = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // The amount of margin the trader receives after closing the position, from
  // the vault. Should never be negative.
  string margin_to_trader = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// -------------------------- DonateToEcosystemFund --------------------------

message MsgDonateToEcosystemFund {
  string sender = 1;

  // donation to the EF
  cosmos.base.v1beta1.Coin donation = 2 [
    (gogoproto.moretags) = "yaml:\"donation\"",
    (gogoproto.nullable) = false
  ];
}

message MsgDonateToEcosystemFundResponse {}

// -----------------------  MsgChangeCollateralDenom -----------------------

// MsgChangeCollateralDenom: Changes the collateral denom for the module.
// [Admin] Only callable by sudoers.
message MsgChangeCollateralDenom {
  string sender = 1;
  string new_denom = 2;
}

message MsgChangeCollateralDenomResponse {}

// -------------------------- AllocateEpochRebates --------------------------
message MsgAllocateEpochRebates {
  string sender = 1;

  // rebates to allocate
  repeated cosmos.base.v1beta1.Coin rebates = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgAllocateEpochRebatesResponse {
  repeated cosmos.base.v1beta1.Coin total_epoch_rebates = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// -------------------------- WithdrawEpochRebates --------------------------
message MsgWithdrawEpochRebates {
  string sender = 1;
  repeated uint64 epochs = 2;
}

message MsgWithdrawEpochRebatesResponse {
  repeated cosmos.base.v1beta1.Coin withdrawn_rebates = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}