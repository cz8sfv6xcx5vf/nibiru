syntax = "proto3";

package nibiru.perp.v2;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "nibiru/perp/v2/state.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "github.com/NibiruChain/nibiru/x/perp/v2/types";

// Query defines the gRPC querier service.
service Query {
  // QueryPosition: Query one position on the given market for a user
  rpc QueryPosition(QueryPositionRequest) returns (QueryPositionResponse) {
    option (google.api.http).get = "/nibiru/perp/v2/position";
  }

  // QueryPositions: Query all positions for a user
  rpc QueryPositions(QueryPositionsRequest) returns (QueryPositionsResponse) {
    option (google.api.http).get = "/nibiru/perp/v2/positions";
  }

  // QueryPositionStore queries all of the positions in the KV store.
  rpc QueryPositionStore(QueryPositionStoreRequest)
      returns (QueryPositionStoreResponse) {
    option (google.api.http).get = "/nibiru/perp/v2/position_store";
  }

  // Queries the module accounts for x/perp
  rpc ModuleAccounts(QueryModuleAccountsRequest)
      returns (QueryModuleAccountsResponse) {
    option (google.api.http).get = "/nibiru/perp/v2/module_accounts";
  }

  // QueryMarkets: Query all markets
  rpc QueryMarkets(QueryMarketsRequest) returns (QueryMarketsResponse) {
    option (google.api.http).get = "/nibiru/perp/v2/markets";
  }

  // QueryCollateral: Queries info about the collateral
  rpc QueryCollateral(QueryCollateralRequest)
      returns (QueryCollateralResponse) {
    option (google.api.http).get = "/nibiru/perp/v2/collateral";
  }
}

// ---------------------------------------- Positions

// QueryPositionsRequest: Request type for the
// "nibiru.perp.v2.Query/Positions" gRPC service method
message QueryPositionsRequest { string trader = 1; }

// QueryPositionsResponse: Response type for the
// "nibiru.perp.v2.Query/Positions" gRPC service method
message QueryPositionsResponse {
  repeated nibiru.perp.v2.QueryPositionResponse positions = 1
      [ (gogoproto.nullable) = false ];
}

// QueryPositionStoreRequest: Request type for the
// "nibiru.perp.v2.Query/PositionStore" gRPC service method
message QueryPositionStoreRequest {
  // pagination defines a paginated request
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryPositionStoreResponse: Response type for the
// "nibiru.perp.v2.Query/PositionStore" gRPC service method
message QueryPositionStoreResponse {
  // Position responses: collection of all stored positions (with pagination)
  repeated nibiru.perp.v2.Position positions = 1
      [ (gogoproto.nullable) = false ];

  // pagination defines a paginated response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// ---------------------------------------- Position

// QueryPositionRequest: Request type for the
// "nibiru.perp.v2.Query/Position" gRPC service method
message QueryPositionRequest {
  string pair = 1 [
    (gogoproto.customtype) =
        "github.com/NibiruChain/nibiru/x/common/asset.Pair",
    (gogoproto.nullable) = false
  ];

  string trader = 2;
}

// QueryPositionResponse: Response type for the
// "nibiru.perp.v2.Query/Position" gRPC service method
message QueryPositionResponse {
  // The position as it exists in the blockchain state
  nibiru.perp.v2.Position position = 1 [ (gogoproto.nullable) = false ];

  // The position's current notional value, if it were to be entirely closed (in
  // margin units).
  string position_notional = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // The position's unrealized PnL.
  string unrealized_pnl = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // margin ratio of the position based on the spot price
  string margin_ratio = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// ---------------------------------------- QueryModuleAccounts

// QueryModuleAccountsRequest: Request type for the
// "nibiru.perp.v2.Query/ModuleAccounts" gRPC service method
message QueryModuleAccountsRequest {}

// QueryModuleAccountsResponse: Response type for the
// "nibiru.perp.v2.Query/ModuleAccounts" gRPC service method
message QueryModuleAccountsResponse {
  repeated nibiru.perp.v2.AccountWithBalance accounts = 1
      [ (gogoproto.nullable) = false ];
}

message AccountWithBalance {
  string name = 1;
  string address = 2;

  repeated cosmos.base.v1beta1.Coin balance = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message AmmMarket {
  nibiru.perp.v2.Market market = 1 [ (gogoproto.nullable) = false ];
  nibiru.perp.v2.AMM amm = 2 [ (gogoproto.nullable) = false ];
}

message QueryMarketsRequest { bool versioned = 1; }

message QueryMarketsResponse {
  repeated nibiru.perp.v2.AmmMarket amm_markets = 1
      [ (gogoproto.nullable) = false ];
}

// ---------------------------------------- QueryCollateral

// QueryCollateralRequest: Request type for the
// "nibiru.perp.v2.Query/Collateral" gRPC service method
message QueryCollateralRequest {}

// QueryCollateralRequest: Response type for the
// "nibiru.perp.v2.Query/Collateral" gRPC service method
message QueryCollateralResponse { string collateral_denom = 1; }
