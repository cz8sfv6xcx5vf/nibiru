syntax = "proto3";

package nibiru.perp.v2;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";
import "perp/v2/state.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/NibiruChain/nibiru/x/perp/v2/types";

// Emitted when a position changes.
message PositionChangedEvent {
  Position final_position = 1 [ (gogoproto.nullable) = false ];

  // Position notional (in quote units) after the change. In general,
  // 'notional = baseAmount * priceQuotePerBase', where size is the baseAmount.
  string position_notional = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // Transaction fee paid. A "taker" fee.
  cosmos.base.v1beta1.Coin transaction_fee = 3 [
    (gogoproto.moretags) = "yaml:\"transaction_fee\"",
    (gogoproto.nullable) = false
  ];

  // realize profits and losses after the change
  string realized_pnl = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // Amount of bad debt cleared by the PerpEF during the change.
  // Bad debt is negative net margin past the liquidation point of a position.
  cosmos.base.v1beta1.Coin bad_debt = 5 [ (gogoproto.nullable) = false ];

  /* A funding payment made or received by the trader on the current position.
  'fundingPayment' is positive if 'owner' is the sender and negative if 'owner'
  is the receiver of the payment. Its magnitude is abs(size * fundingRate).
  Funding payments act to converge the mark price and index price
  (average price on major exchanges).
    */
  string funding_payment = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // The block number at which this position was changed.
  int64 block_height = 7;

  // margin_to_user is the amount of collateral received by the trader during
  // the position change. A positve value indicates that the trader received
  // funds, while a negative value indicates that the trader spent funds.
  string margin_to_user = 8 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // change_reason describes the reason for why the position resulted in a
  // change. Change type can take the following values:
  //
  // - CHANGE_REASON_UNSPECIFIED: Unspecified change reason.
  // - CHANGE_REASON_ADD_MARGIN: Margin was added to the position.
  // - CHANGE_REASON_REMOVE_MARGIN: Margin was removed from the position.
  // - CHANGE_REASON_OPEN_POSITION: A new position was opened.
  // - CHANGE_REASON_CLOSE_POSITION: An existing position was closed.
  string change_reason = 9
      [ (gogoproto.customtype) = "ChangeReason", (gogoproto.nullable) = false ];
}

// Emitted when a position is liquidated.
message PositionLiquidatedEvent {
  // identifier of the corresponding virtual pool for the position
  string pair = 1 [
    (gogoproto.customtype) =
        "github.com/NibiruChain/nibiru/x/common/asset.Pair",
    (gogoproto.nullable) = false
  ];

  // owner of the position.
  string trader_address = 2;

  // margin * leverage * vPrice. 'notional' is the virtual size times  the
  // virtual price on 'perp.amm'.
  string exchanged_quote_amount = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // virtual amount of base assets for the position, which would be margin *
  // leverage * priceBasePerQuote.
  string exchanged_position_size = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // Address of the account that executed the tx.
  string liquidator_address = 5;

  // Commission (in margin units) received by 'liquidator'.
  cosmos.base.v1beta1.Coin fee_to_liquidator = 6 [
    (gogoproto.moretags) = "yaml:\"fee_to_liquidator\"",
    (gogoproto.nullable) = false
  ];

  // Commission (in margin units) given to the ecosystem fund.
  cosmos.base.v1beta1.Coin fee_to_ecosystem_fund = 7 [
    (gogoproto.moretags) = "yaml:\"fee_to_ecosystem_fund\"",
    (gogoproto.nullable) = false
  ];

  //  Bad debt (margin units) cleared by the PerpEF during the tx. Bad debt is
  //  negative net margin past the liquidation point of a position.
  cosmos.base.v1beta1.Coin bad_debt = 8 [ (gogoproto.nullable) = false ];

  // Remaining margin in the position after liquidation
  cosmos.base.v1beta1.Coin margin = 9 [
    (gogoproto.moretags) = "yaml:\"margin\"",
    (gogoproto.nullable) = false
  ];

  // Remaining position notional in the position after liquidation
  string position_notional = 10 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // Remaining position size in the position after liquidation
  string position_size = 11 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // Unrealized PnL in the position after liquidation
  string unrealizedPnl = 12 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // Spot price of the vAMM after liquidation
  string mark_price = 13 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // The block number at which this liquidation occured.
  int64 block_height = 14;

  // The unix timestamp in milliseconds at which this liquidation occured.
  int64 block_time_ms = 15;
}

// Emitted when a position is settled.
message PositionSettledEvent {
  // Identifier for the virtual pool of the position.
  string pair = 1 [
    (gogoproto.customtype) =
        "github.com/NibiruChain/nibiru/x/common/asset.Pair",
    (gogoproto.nullable) = false
  ];

  // Owner of the position.
  string trader_address = 2;

  // Settled coin as dictated by the settlement price of the perp.amm.
  repeated cosmos.base.v1beta1.Coin settled_coins = 3 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.moretags) = "yaml:\"settled_coins\"",
    (gogoproto.nullable) = false
  ];
}

// Emitted when the funding rate changes for a market.
message FundingRateChangedEvent {
  // The pair for which the funding rate was calculated.
  string pair = 1 [
    (gogoproto.customtype) =
        "github.com/NibiruChain/nibiru/x/common/asset.Pair",
    (gogoproto.nullable) = false
  ];

  // The mark price of the pair.
  string mark_price_twap = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // The oracle index price of the pair.
  string index_price_twap = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // The latest premium fraction just calculated.
  string premium_fraction = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // The market's latest cumulative premium fraction.
  // The funding payment a position will pay is the difference between this
  // value and the latest cumulative premium fraction on the position,
  // multiplied by the position size.
  string cumulative_premium_fraction = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// Emitted when liquidation fails.
message LiquidationFailedEvent {
  // The pair for which we are trying to liquidate.
  string pair = 1 [
    (gogoproto.customtype) =
        "github.com/NibiruChain/nibiru/x/common/asset.Pair",
    (gogoproto.nullable) = false
  ];

  // owner of the position.
  string trader = 2;

  // Address of the account that executed the tx.
  string liquidator = 3;

  enum LiquidationFailedReason {
    UNSPECIFIED = 0;

    // the position is healthy and does not need to be liquidated.
    POSITION_HEALTHY = 1;

    // the pair does not exist.
    NONEXISTENT_PAIR = 2;

    // the position does not exist.
    NONEXISTENT_POSITION = 3;
  }
  // Reason for the liquidation failure.
  LiquidationFailedReason reason = 4;
}

// This event is emitted when the amm is updated, which can be triggered by
// the following events:
//
// - swap
// - edit price multiplier
// - edit depth
message AmmUpdatedEvent {
  // the final state of the AMM
  AMM final_amm = 1 [ (gogoproto.nullable) = false ];

  // The mark price of the pair.
  string mark_price_twap = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // The oracle index price of the pair.
  string index_price_twap = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// This event is emitted at the end of every block for persisting market changes
// off-chain
//
// Market changes are triggered by the following actions:
//
// - disabling market
// - changing market fees
// - bad debt is prepaid by the ecosystem fund
message MarketUpdatedEvent {
  // the final state of the market
  Market final_market = 1 [ (gogoproto.nullable) = false ];
}