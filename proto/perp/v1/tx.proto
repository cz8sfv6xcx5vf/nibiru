syntax = "proto3";

package nibiru.perp.v1;

import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "perp/v1/state.proto";

option go_package="github.com/NibiruChain/nibiru/x/perp/types";

// Msg defines the x/perp Msg service.
service Msg {

  rpc RemoveMargin(MsgRemoveMargin) returns (MsgRemoveMarginResponse) {
    option (google.api.http).post = "/nibiru/perp/remove_margin";
  }

  rpc AddMargin(MsgAddMargin) returns (MsgAddMarginResponse) {
    option (google.api.http).post = "/nibiru/perp/add_margin";
  }

  /* Liquidate is a transaction that allows the caller to fully or partially 
  liquidate an existing position. */  
  //   rpc Liquidate(MsgLiquidate) returns (MsgLiquidateResponse) {
  //     option (google.api.http).post = "/nibiru/perp/liquidate";
  //   }

  rpc OpenPosition(MsgOpenPosition) returns (MsgOpenPositionResponse) {
    option (google.api.http).post = "/nibiru/perp/open_position";
  }

}

// -------------------------- RemoveMargin --------------------------

/* MsgRemoveMargin: Msg to remove margin. */
message MsgRemoveMargin {
  bytes sender = 1 [
    (gogoproto.casttype)  = "github.com/cosmos/cosmos-sdk/types.AccAddress"];

  string token_pair = 2;

  cosmos.base.v1beta1.Coin margin = 3 [(gogoproto.nullable) = false];
}

message MsgRemoveMarginResponse {
  // MarginOut: tokens transferred back to the trader
  cosmos.base.v1beta1.Coin margin_out = 1 [(gogoproto.nullable) = false];
  string funding_payment = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];
}

// -------------------------- AddMargin --------------------------

/* MsgAddMargin: Msg to remove margin. */
message MsgAddMargin {
  bytes sender = 1 [
    (gogoproto.casttype)  = "github.com/cosmos/cosmos-sdk/types.AccAddress"];

  string token_pair = 2;
  cosmos.base.v1beta1.Coin margin = 3 [(gogoproto.nullable) = false];
}

message MsgAddMarginResponse {
  // MarginOut: tokens transferred back to the trader
}

// -------------------------- Liquidate --------------------------

message MsgLiquidate {
    // Sender is the liquidator address
    bytes sender = 1 [
      (gogoproto.casttype)  = "github.com/cosmos/cosmos-sdk/types.AccAddress"];

    // TokenPair is the identifier for the position's virtual pool
    string token_pair = 2;
    // Trader is the address of the owner of the position 
    string trader = 3;
  }
  
  message MsgLiquidateResponse {
    // TODO: blank for now
  }

// -------------------------- OpenPosition --------------------------

message MsgOpenPosition {
  bytes sender = 1 [
    (gogoproto.casttype)  = "github.com/cosmos/cosmos-sdk/types.AccAddress"];

  string token_pair = 2;
  nibiru.perp.v1.Side side = 3;
  string quote_asset_amount = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false];
  string leverage = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];
  string base_asset_amount_limit = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false];
}

message MsgOpenPositionResponse {

}

// -------------------------- ClosePosition --------------------------
// TODO