syntax = "proto3";

package nibiru.perp.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";

option go_package="github.com/NibiruChain/nibiru/x/perp/types";

message Params {
  // stopped identifies if the perp exchange is stopped or not
  bool stopped = 1;

  string maintenance_margin_ratio = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];

  // toll_ratio is the ratio transferred to the the fee pool
  int64 toll_ratio = 3;

  // spread_ratio is the ratio transferred to the PerpEF.
  int64 spread_ratio = 4;

  // LiquidationFee is the percentage of liquidated position that will be given
  // to out as a reward. Half of the liquidation fee is given to the liquidator,
  // and the other half is given to the ecosystem fund.
  int64 liquidation_fee = 5;

  // partial_liquidation_ratio is the share we try to liquidate if the margin is higher than liquidation fee
  int64 partial_liquidation_ratio = 6;
}

// GenesisState defines the perp  module's genesis state.
message GenesisState {
  Params params = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin module_account_balance = 2 [
    (gogoproto.moretags) = "yaml:\"module_account_balance\"",
    (gogoproto.nullable) = false
  ];
}

// Position identifies and records information on a user's position on one of
// the virtual liquidity pools.
message Position {
  // address identifies the address owner of this position
  string address = 1;
  // pair identifies the pair associated with this position
  string pair = 2;

  string size = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false]; // signed int
  string margin = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false]; 

  // OpenNotional is the quote denom value of the position when opening.
  string open_notional = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false]; 
  string last_update_cumulative_premium_fraction = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false]; // int
  int64 liquidity_history_index = 7;

  // BlockNumber is the block number of the change to the position.
  int64 block_number = 8;
}

message PositionResp {
  Position position = 1;

  string exchanged_quote_asset_amount = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];
  string bad_debt = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];
  string exchanged_position_size = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];
  string funding_payment = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];
  string realized_pnl = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];
  string margin_to_vault = 7 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];
  string unrealized_pnl_after = 8 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];
}

message VirtualPoolInfo {
  string pair = 1;
  int64 last_restriction_block = 2;
  repeated string cumulative_premium_fractions = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];
}

enum Side {
  BUY = 0;
  SELL = 1;
}

enum PnLCalcOption {
  SPOT_PRICE = 0;
  TWAP = 1;
  ORACLE = 2;
}

enum PnLPreferenceOption {
  MAX = 0;
  MIN = 1;
}

enum MarginCalculationPriceOption {
  SPOT = 0;
  INDEX = 1;
  MAX_PNL = 2;
}

message PairMetadata {
  string pair = 1;
  repeated string cumulative_premium_fractions = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];
}

message PositionChangedEvent {
  string trader = 1;
  string pair  = 2;
  string margin = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];
  string position_notional = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];
  string exchanged_position_size = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];
  string fee = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false];
  string position_size_after = 7 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];
  string realized_pnl = 8 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];
  string unrealized_pnl_after = 9 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];
  string bad_debt = 10 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];
  string liquidation_penalty = 11 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];
  string spot_price = 12 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];
  string funding_payment = 13 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false];
}
